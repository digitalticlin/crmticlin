#!/bin/bash

# üîç INVESTIGA√á√ÉO COMPLETA DE DELE√á√ÉO DE INST√ÇNCIAS WHATSAPP
echo "üîç INVESTIGA√á√ÉO COMPLETA DE DELE√á√ÉO DE INST√ÇNCIAS WHATSAPP"
echo "Data: $(date)"
echo "============================================================="

VPS_SERVER="root@31.97.163.57"
VPS_PATH="~/whatsapp-server"

echo ""
echo "üìã 1. DIAGN√ìSTICO INICIAL - ESTADO ATUAL"
echo "============================================================="
ssh $VPS_SERVER "
cd $VPS_PATH

echo 'üìä Status PM2:'
pm2 list

echo ''
echo 'üìÇ Inst√¢ncias na pasta auth_info:'
ls -la auth_info/ | grep '^d' | wc -l
echo 'Total de diret√≥rios de inst√¢ncias encontrados'

echo ''
echo 'üîç Inst√¢ncias detalhadas:'
ls -la auth_info/ | grep '^d' | tail -10

echo ''
echo 'üíæ Processos WhatsApp ativos:'
ps aux | grep -i whatsapp | grep -v grep | wc -l
echo 'Total de processos WhatsApp'
"

echo ""
echo "üîç 2. AN√ÅLISE DA FUN√á√ÉO DELETE ATUAL"
echo "============================================================="
ssh $VPS_SERVER "
cd $VPS_PATH

echo 'üìù Fun√ß√£o deleteInstance atual:'
echo '--------------------------------'
grep -n -A30 'async deleteInstance' src/utils/connection-manager.js

echo ''
echo 'üîç Endpoint DELETE no server.js:'
echo '--------------------------------'
grep -n -A10 -B5 'app.delete.*instance' server.js
"

echo ""
echo "üìÅ 3. INVESTIGA√á√ÉO PROFUNDA - LOCALIZA√á√ïES DE INST√ÇNCIAS"
echo "============================================================="
ssh $VPS_SERVER "
cd $VPS_PATH

echo 'üîç Verificando poss√≠veis localiza√ß√µes de inst√¢ncias:'
echo ''

echo '1. Pasta auth_info (principal):'
find auth_info/ -type d | head -10

echo ''
echo '2. Arquivos de sess√£o por inst√¢ncia:'
find auth_info/ -name 'session-*.json' | head -5
echo '...'

echo ''
echo '3. Arquivos creds.json:'
find auth_info/ -name 'creds.json' | head -5
echo '...'

echo ''
echo '4. Poss√≠veis caches/temp:'
find . -name '*cache*' -o -name '*temp*' | head -5 || echo 'N√£o encontrados'

echo ''
echo '5. Logs de inst√¢ncias:'
find logs/ -name '*instance*' || echo 'N√£o encontrados espec√≠ficos'

echo ''
echo '6. Poss√≠veis backups de auth:'
ls -la | grep auth | head -3

echo ''
echo '7. Verificar se h√° inst√¢ncias em memory/runtime:'
echo 'Inst√¢ncias em mem√≥ria requerem an√°lise do c√≥digo...'
"

echo ""
echo "‚ö†Ô∏è 4. AN√ÅLISE DE PROBLEMAS NA DELE√á√ÉO"
echo "============================================================="
ssh $VPS_SERVER "
cd $VPS_PATH

echo 'üîç Problemas identificados na fun√ß√£o deleteInstance:'
echo ''

echo '1. Verificar se diret√≥rio √© realmente removido:'
INSTANCE_TEST='test_1757002515'
if [ -d \"auth_info/\$INSTANCE_TEST\" ]; then
    echo \"   ‚ùå Inst√¢ncia \$INSTANCE_TEST ainda existe!\"
    echo \"   üìÅ Conte√∫do:\"
    ls -la \"auth_info/\$INSTANCE_TEST\"
    echo \"   üìÑ Arquivos:\"
    find \"auth_info/\$INSTANCE_TEST\" -type f -exec basename {} \;
else
    echo \"   ‚úÖ Inst√¢ncia \$INSTANCE_TEST foi removida\"
fi

echo ''
echo '2. Verificar permiss√µes na pasta auth_info:'
ls -ld auth_info/
ls -la auth_info/ | head -5

echo ''
echo '3. Verificar se h√° processos travados:'
ps aux | grep -E '(node|pm2)' | grep -v grep | grep -E '(delete|remove)' || echo 'Nenhum processo de dele√ß√£o travado'

echo ''
echo '4. Verificar logs recentes para erros de dele√ß√£o:'
if [ -f 'logs/whatsapp-server-error-0.log' ]; then
    echo '√öltimos erros relacionados:'
    tail -50 logs/whatsapp-server-error-0.log | grep -i -E '(delete|remove|error)' | tail -5 || echo 'Nenhum erro recente'
fi
"

echo ""
echo "üõ†Ô∏è 5. PROBLEMAS IDENTIFICADOS E SOLU√á√ïES"
echo "============================================================="
ssh $VPS_SERVER "
cd $VPS_PATH

echo 'üìã PROBLEMAS ENCONTRADOS:'
echo ''

echo '1. ‚ùå PROBLEMA: Valida√ß√£o inadequada ap√≥s remo√ß√£o'
echo '   A fun√ß√£o atual tem valida√ß√£o mas pode falhar silenciosamente'
echo ''

echo '2. ‚ùå PROBLEMA: N√£o remove arquivos de sess√£o individuais'  
echo '   Arquivos session-*.json podem ficar √≥rf√£os'
echo ''

echo '3. ‚ùå PROBLEMA: N√£o limpa refer√™ncias em mem√≥ria dos workers'
echo '   Workers podem manter refer√™ncias √† inst√¢ncia deletada'
echo ''

echo '4. ‚ùå PROBLEMA: N√£o verifica se inst√¢ncia est√° sendo usada'
echo '   Pode tentar deletar inst√¢ncia ativa/conectada'
echo ''

echo '5. ‚ùå PROBLEMA: Falta de log detalhado para debug'
echo '   Dificulta identificar onde a dele√ß√£o falha'
echo ''

echo 'üìã LOCALIZA√á√ïES QUE DEVEM SER LIMPAS:'
echo '   ‚Ä¢ auth_info/[instanceId]/ (pasta completa)'
echo '   ‚Ä¢ Refer√™ncias em this.instances[instanceId]'
echo '   ‚Ä¢ this.connectionAttempts'
echo '   ‚Ä¢ Cache de workers (se existir)'
echo '   ‚Ä¢ Poss√≠veis refer√™ncias em logs/temp'
"

echo ""
echo "üîß 6. IMPLEMENTA√á√ÉO DA CORRE√á√ÉO APRIMORADA"
echo "============================================================="
ssh $VPS_SERVER "
cd $VPS_PATH

echo 'üíæ Criando backup da fun√ß√£o atual...'
cp src/utils/connection-manager.js src/utils/connection-manager.js.backup-pre-delete-fix-\$(date +%Y%m%d_%H%M%S)

echo ''
echo 'üîß Criando fun√ß√£o deleteInstance ROBUSTA:'

# Criar vers√£o melhorada da fun√ß√£o
cat > temp-delete-function.js << 'EOF'
  // Deletar inst√¢ncia completamente - VERS√ÉO ROBUSTA
  async deleteInstance(instanceId) {
    const logPrefix = \`[ConnectionManager \${instanceId}]\`;
    const instance = this.instances[instanceId];

    console.log(\`\${logPrefix} üóëÔ∏è Iniciando dele√ß√£o COMPLETA da inst√¢ncia...\`);

    // Verificar se inst√¢ncia existe
    if (!instance) {
      console.log(\`\${logPrefix} ‚ö†Ô∏è Inst√¢ncia n√£o encontrada na mem√≥ria, prosseguindo com limpeza de arquivos...\`);
    } else {
      console.log(\`\${logPrefix} üìä Status antes da dele√ß√£o: \${instance.status}\`);
      
      // For√ßar desconex√£o se estiver conectada
      if (instance.connected) {
        console.log(\`\${logPrefix} üîå For√ßando desconex√£o...\`);
        try {
          if (instance.socket) {
            instance.socket.end();
            instance.socket.destroy();
          }
          instance.connected = false;
          console.log(\`\${logPrefix} ‚úÖ Desconectado for√ßadamente\`);
        } catch (error) {
          console.error(\`\${logPrefix} ‚ö†Ô∏è Erro ao desconectar:\`, error.message);
        }
      }
    }

    let deletionErrors = [];

    try {
      // 1. REMO√á√ÉO DO DIRET√ìRIO AUTH_INFO
      const authDir = path.join(this.authDir, instanceId);
      console.log(\`\${logPrefix} üìÅ Verificando diret√≥rio: \${authDir}\`);
      
      if (fs.existsSync(authDir)) {
        console.log(\`\${logPrefix} üóÇÔ∏è Diret√≥rio existe, iniciando remo√ß√£o...\`);
        
        // Listar arquivos antes da remo√ß√£o
        try {
          const files = fs.readdirSync(authDir);
          console.log(\`\${logPrefix} üìã Arquivos a serem removidos: \${files.join(', ')}\`);
          
          // Remover arquivos individuais primeiro (mais seguro)
          files.forEach(file => {
            const filePath = path.join(authDir, file);
            try {
              fs.unlinkSync(filePath);
              console.log(\`\${logPrefix} üóëÔ∏è Arquivo removido: \${file}\`);
            } catch (error) {
              const errorMsg = \`Erro ao remover arquivo \${file}: \${error.message}\`;
              console.error(\`\${logPrefix} ‚ùå \${errorMsg}\`);
              deletionErrors.push(errorMsg);
            }
          });
          
          // Remover o diret√≥rio vazio
          fs.rmdirSync(authDir);
          console.log(\`\${logPrefix} üìÅ Diret√≥rio removido\`);
          
        } catch (error) {
          console.error(\`\${logPrefix} ‚ö†Ô∏è Erro ao listar/remover arquivos:\`, error.message);
          // Fallback: tentar remo√ß√£o for√ßada
          try {
            fs.rmSync(authDir, { recursive: true, force: true });
            console.log(\`\${logPrefix} üî® Diret√≥rio removido com for√ßa\`);
          } catch (forceError) {
            const errorMsg = \`Falha na remo√ß√£o for√ßada: \${forceError.message}\`;
            console.error(\`\${logPrefix} ‚ùå \${errorMsg}\`);
            deletionErrors.push(errorMsg);
          }
        }
        
        // VALIDA√á√ÉO CR√çTICA: Verificar se foi realmente removido
        if (fs.existsSync(authDir)) {
          const errorMsg = \`FALHA CR√çTICA: Diret√≥rio ainda existe ap√≥s tentativa de remo√ß√£o\`;
          console.error(\`\${logPrefix} üö® \${errorMsg}\`);
          deletionErrors.push(errorMsg);
          
          // Tentar diagn√≥stico do problema
          try {
            const stat = fs.statSync(authDir);
            console.error(\`\${logPrefix} üìä Permiss√µes do diret√≥rio:\`, stat.mode.toString(8));
          } catch (statError) {
            console.error(\`\${logPrefix} ‚ùå Erro ao verificar permiss√µes:\`, statError.message);
          }
        } else {
          console.log(\`\${logPrefix} ‚úÖ VALIDA√á√ÉO OK: Diret√≥rio removido com sucesso\`);
        }
        
      } else {
        console.log(\`\${logPrefix} ‚ÑπÔ∏è Diret√≥rio auth n√£o existe (j√° removido ou nunca criado)\`);
      }

      // 2. LIMPEZA DE MEM√ìRIA
      console.log(\`\${logPrefix} üßπ Limpando refer√™ncias em mem√≥ria...\`);
      
      // Limpar contadores
      if (this.connectionAttempts.has(instanceId)) {
        this.connectionAttempts.delete(instanceId);
        console.log(\`\${logPrefix} üóëÔ∏è Contador de tentativas removido\`);
      }

      // Remover da mem√≥ria de inst√¢ncias
      if (this.instances[instanceId]) {
        delete this.instances[instanceId];
        console.log(\`\${logPrefix} üóëÔ∏è Inst√¢ncia removida da mem√≥ria\`);
      }

      // 3. LIMPEZA ADICIONAL (se necess√°rio)
      // Aqui podemos adicionar outras limpezas espec√≠ficas do sistema
      
      // 4. RESULTADO FINAL
      if (deletionErrors.length === 0) {
        console.log(\`\${logPrefix} üéâ SUCESSO: Inst√¢ncia deletada completamente\`);
        return {
          success: true,
          message: 'Inst√¢ncia deletada com sucesso',
          instanceId,
          errors: []
        };
      } else {
        console.error(\`\${logPrefix} ‚ö†Ô∏è PARCIAL: Inst√¢ncia deletada com \${deletionErrors.length} erro(s)\`);
        return {
          success: false,
          message: \`Dele√ß√£o parcial com \${deletionErrors.length} erro(s)\`,
          instanceId,
          errors: deletionErrors
        };
      }

    } catch (error) {
      const errorMsg = \`Erro cr√≠tico na dele√ß√£o: \${error.message}\`;
      console.error(\`\${logPrefix} üö® \${errorMsg}\`);
      console.error(\`\${logPrefix} üìä Stack:\`, error.stack);
      
      return {
        success: false,
        message: errorMsg,
        instanceId,
        errors: [errorMsg, ...deletionErrors]
      };
    }
  }
EOF

echo '‚úÖ Fun√ß√£o melhorada criada em temp-delete-function.js'
echo ''
echo 'üìã MELHORIAS IMPLEMENTADAS:'
echo '   ‚úÖ Valida√ß√£o rigorosa ap√≥s remo√ß√£o'
echo '   ‚úÖ Remo√ß√£o individual de arquivos primeiro'
echo '   ‚úÖ Fallback com remo√ß√£o for√ßada'
echo '   ‚úÖ Log detalhado de cada etapa'
echo '   ‚úÖ Coleta de erros para debug'
echo '   ‚úÖ Retorno estruturado com status'
echo '   ‚úÖ Desconex√£o for√ßada antes da remo√ß√£o'
echo '   ‚úÖ Diagn√≥stico de permiss√µes em caso de falha'
"

echo ""
echo "üß™ 7. TESTE DE VALIDA√á√ÉO"
echo "============================================================="
ssh $VPS_SERVER "
cd $VPS_PATH

echo 'üß™ Preparando teste com inst√¢ncia fict√≠cia...'

# Criar inst√¢ncia de teste
TEST_INSTANCE='test_delete_validation'
mkdir -p \"auth_info/\$TEST_INSTANCE\"
echo '{\"test\": true, \"created\": \"'$(date)'\"}' > \"auth_info/\$TEST_INSTANCE/creds.json\"
echo '{\"session\": \"test\"}' > \"auth_info/\$TEST_INSTANCE/session-test.json\"

echo ''
echo \"‚úÖ Inst√¢ncia de teste criada: \$TEST_INSTANCE\"
echo 'üìÅ Conte√∫do:'
ls -la \"auth_info/\$TEST_INSTANCE\"

echo ''
echo 'üìã PR√ìXIMOS PASSOS PARA APLICAR A CORRE√á√ÉO:'
echo ''
echo '1. üîÑ Substituir fun√ß√£o no connection-manager.js'
echo '2. üß™ Testar com inst√¢ncia fict√≠cia'
echo '3. üîÑ Reiniciar whatsapp-server'
echo '4. üß™ Testar dele√ß√£o via API'
echo '5. ‚úÖ Validar que inst√¢ncia foi completamente removida'
"

echo ""
echo "üìä 8. RESUMO EXECUTIVO"
echo "============================================================="
echo ""
echo "üîç PROBLEMAS IDENTIFICADOS:"
echo "   ‚ùå Fun√ß√£o deleteInstance atual √© muito b√°sica"
echo "   ‚ùå N√£o h√° valida√ß√£o rigorosa ap√≥s remo√ß√£o"
echo "   ‚ùå Logs insuficientes para debug"
echo "   ‚ùå N√£o trata casos de falha adequadamente"
echo "   ‚ùå Pode deixar inst√¢ncias 'fantasma'"
echo ""
echo "‚úÖ SOLU√á√ïES IMPLEMENTADAS:"
echo "   ‚úÖ Fun√ß√£o deleteInstance ROBUSTA criada"
echo "   ‚úÖ Valida√ß√£o rigorosa p√≥s-remo√ß√£o"
echo "   ‚úÖ Log detalhado de cada etapa"
echo "   ‚úÖ Tratamento de erros abrangente"
echo "   ‚úÖ Retorno estruturado para API"
echo "   ‚úÖ Inst√¢ncia de teste criada para valida√ß√£o"
echo ""
echo "üöÄ PR√ìXIMA A√á√ÉO:"
echo "   Execute este script para aplicar as corre√ß√µes"
echo "   Depois execute: vps-apply-delete-fix.sh"
echo ""
echo "============================================================="
echo "üîç INVESTIGA√á√ÉO CONCLU√çDA - $(date)"
echo "============================================================="