#!/bin/bash

# Script para aplicar corre√ß√£o de extra√ß√£o de n√∫meros @lid na VPS
# Execu√ß√£o: bash apply-lid-fix.sh

VPS_IP="31.97.163.57"
VPS_USER="root"

echo "üîß Aplicando corre√ß√£o de n√∫meros @lid na VPS..."

# 1. Fazer backup do arquivo atual
echo "üì¶ Fazendo backup do connection-manager.js..."
ssh ${VPS_USER}@${VPS_IP} << 'EOF'
cd /root/whatsapp-server
cp src/utils/connection-manager.js src/utils/connection-manager.js.backup-$(date +%Y%m%d-%H%M%S)
echo "‚úÖ Backup criado"
EOF

# 2. Criar arquivo com a fun√ß√£o de corre√ß√£o
echo "üìù Criando fun√ß√£o de corre√ß√£o..."
ssh ${VPS_USER}@${VPS_IP} << 'EOF'
cat > /root/whatsapp-server/lid-fix.js << 'SCRIPT'
// Fun√ß√£o melhorada para extrair n√∫mero correto de @lid corrompidos
function extractPhoneFromCorruptedJid(remoteJid, logPrefix) {
  const originalJid = remoteJid;
  
  // Caso 1: @lid corrompido
  if (remoteJid.includes('@lid')) {
    // Extrair apenas n√∫meros do JID
    const numbersOnly = remoteJid.replace(/[^0-9]/g, '');
    console.log(`${logPrefix} üîç @lid detectado: "${originalJid}" ‚Üí n√∫meros: "${numbersOnly}"`);
    
    // Tentar identificar padr√£o de n√∫mero brasileiro v√°lido
    let realPhone = null;
    
    // Mapeamentos conhecidos (adicionar conforme necess√°rio)
    const knownMappings = {
      '92045460951243': '556281364997',
      '274293808169155': '556281242215',
      '221092702589128': '5562927025891' // Adicionar mapeamento correto aqui
    };
    
    if (knownMappings[numbersOnly]) {
      realPhone = knownMappings[numbersOnly];
      console.log(`${logPrefix} ‚úÖ Mapeamento conhecido: ${numbersOnly} ‚Üí ${realPhone}`);
    } else if (numbersOnly.startsWith('55')) {
      realPhone = numbersOnly;
    } else if (numbersOnly.length > 13) {
      // Tentar extrair n√∫mero brasileiro de dentro do n√∫mero corrompido
      const patterns = [
        /55(\d{10,11})/, // N√∫mero brasileiro com c√≥digo
        /(\d{2})(\d{9})$/, // DDD + 9 d√≠gitos no final
        /(\d{2})(\d{8})$/  // DDD + 8 d√≠gitos no final
      ];
      
      for (const pattern of patterns) {
        const match = numbersOnly.match(pattern);
        if (match) {
          if (match[0] && match[0].startsWith('55')) {
            realPhone = match[0];
          } else if (match[2]) {
            realPhone = '55' + match[1] + match[2];
          } else if (match[1]) {
            realPhone = '55' + match[1];
          }
          if (realPhone) {
            console.log(`${logPrefix} ‚úÖ Padr√£o encontrado: ${realPhone}`);
            break;
          }
        }
      }
    }
    
    // Se n√£o encontrou padr√£o, tentar inferir
    if (!realPhone && numbersOnly.length >= 10) {
      // Pegar √∫ltimos 11 d√≠gitos e assumir que √© brasileiro
      const last11 = numbersOnly.slice(-11);
      realPhone = '55' + last11;
      console.log(`${logPrefix} ‚ö†Ô∏è Inferindo n√∫mero brasileiro: ${realPhone}`);
    }
    
    // Se conseguiu extrair, retornar formato correto
    if (realPhone) {
      return `${realPhone}@s.whatsapp.net`;
    }
    
    // Fallback: usar n√∫mero como est√°
    console.log(`${logPrefix} ‚ùå N√£o foi poss√≠vel corrigir @lid: ${originalJid}`);
    return `${numbersOnly}@s.whatsapp.net`;
  }
  
  // Caso 2: N√∫mero mal formatado sem @lid (exemplo: 221092702589128@s.whatsapp.net)
  if (remoteJid.includes('@s.whatsapp.net')) {
    const phoneNumber = remoteJid.split('@')[0];
    
    // Se o n√∫mero √© muito longo ou tem formato estranho
    if (phoneNumber.length > 15) {
      console.log(`${logPrefix} üîß N√∫mero suspeito (muito longo): ${phoneNumber}`);
      
      // Verificar mapeamentos conhecidos
      const knownMappings = {
        '221092702589128': '5562927025891' // Adicionar n√∫mero correto
      };
      
      if (knownMappings[phoneNumber]) {
        const corrected = knownMappings[phoneNumber];
        console.log(`${logPrefix} ‚úÖ Mapeamento conhecido: ${phoneNumber} ‚Üí ${corrected}`);
        return `${corrected}@s.whatsapp.net`;
      }
      
      // Tentar extrair n√∫mero brasileiro v√°lido
      const patterns = [
        /55(\d{10,11})/, // N√∫mero brasileiro com c√≥digo
        /(\d{2})(\d{9})$/, // DDD + 9 d√≠gitos no final
        /(\d{2})(\d{8})$/  // DDD + 8 d√≠gitos no final
      ];
      
      for (const pattern of patterns) {
        const match = phoneNumber.match(pattern);
        if (match) {
          let extracted;
          if (match[0] && match[0].startsWith('55')) {
            extracted = match[0];
          } else if (match[2]) {
            extracted = '55' + match[1] + match[2];
          } else if (match[1]) {
            extracted = '55' + match[1];
          }
          
          if (extracted) {
            console.log(`${logPrefix} ‚úÖ N√∫mero corrigido: ${phoneNumber} ‚Üí ${extracted}`);
            return `${extracted}@s.whatsapp.net`;
          }
        }
      }
      
      // √öltima tentativa: pegar √∫ltimos 11 d√≠gitos
      if (phoneNumber.length > 11) {
        const last11 = phoneNumber.slice(-11);
        const corrected = '55' + last11;
        console.log(`${logPrefix} ‚ö†Ô∏è Usando √∫ltimos 11 d√≠gitos: ${phoneNumber} ‚Üí ${corrected}`);
        return `${corrected}@s.whatsapp.net`;
      }
    }
    
    // Verificar se n√£o tem c√≥digo do pa√≠s
    if (!phoneNumber.startsWith('55') && phoneNumber.length <= 11) {
      const corrected = '55' + phoneNumber;
      console.log(`${logPrefix} üì± Adicionando c√≥digo do Brasil: ${phoneNumber} ‚Üí ${corrected}`);
      return `${corrected}@s.whatsapp.net`;
    }
  }
  
  // Caso 3: JID est√° correto, retornar como est√°
  return remoteJid;
}

module.exports = { extractPhoneFromCorruptedJid };
SCRIPT
echo "‚úÖ Fun√ß√£o de corre√ß√£o criada"
EOF

# 3. Aplicar corre√ß√£o no connection-manager.js
echo "üîß Aplicando corre√ß√£o no connection-manager.js..."
ssh ${VPS_USER}@${VPS_IP} << 'EOF'
cd /root/whatsapp-server/src/utils

# Criar vers√£o corrigida
cat > connection-manager-fix.js << 'FIXSCRIPT'
#!/usr/bin/env node
const fs = require('fs');

// Ler arquivo original
let content = fs.readFileSync('connection-manager.js', 'utf8');

// 1. Adicionar a fun√ß√£o de corre√ß√£o ap√≥s as importa√ß√µes
const functionToAdd = `
// üîß FUN√á√ÉO DE CORRE√á√ÉO PARA N√öMEROS @LID CORROMPIDOS
function extractPhoneFromCorruptedJid(remoteJid, logPrefix) {
  const originalJid = remoteJid;
  
  if (remoteJid.includes('@lid')) {
    const numbersOnly = remoteJid.replace(/[^0-9]/g, '');
    console.log(\`\${logPrefix} üîç @lid detectado: "\${originalJid}" ‚Üí n√∫meros: "\${numbersOnly}"\`);
    
    let realPhone = null;
    
    // Mapeamentos conhecidos
    const knownMappings = {
      '92045460951243': '556281364997',
      '274293808169155': '556281242215',
      '221092702589128': '5562927025891'
    };
    
    if (knownMappings[numbersOnly]) {
      realPhone = knownMappings[numbersOnly];
      console.log(\`\${logPrefix} ‚úÖ Mapeamento conhecido: \${numbersOnly} ‚Üí \${realPhone}\`);
    } else if (numbersOnly.startsWith('55')) {
      realPhone = numbersOnly;
    } else if (numbersOnly.length >= 10) {
      const last11 = numbersOnly.slice(-11);
      realPhone = '55' + last11;
      console.log(\`\${logPrefix} ‚ö†Ô∏è Inferindo n√∫mero brasileiro: \${realPhone}\`);
    }
    
    if (realPhone) {
      return \`\${realPhone}@s.whatsapp.net\`;
    }
    
    console.log(\`\${logPrefix} ‚ùå N√£o foi poss√≠vel corrigir @lid: \${originalJid}\`);
    return \`\${numbersOnly}@s.whatsapp.net\`;
  }
  
  if (remoteJid.includes('@s.whatsapp.net')) {
    const phoneNumber = remoteJid.split('@')[0];
    
    if (phoneNumber.length > 15) {
      console.log(\`\${logPrefix} üîß N√∫mero suspeito: \${phoneNumber}\`);
      
      const knownMappings = {
        '221092702589128': '5562927025891'
      };
      
      if (knownMappings[phoneNumber]) {
        const corrected = knownMappings[phoneNumber];
        console.log(\`\${logPrefix} ‚úÖ Mapeamento conhecido: \${phoneNumber} ‚Üí \${corrected}\`);
        return \`\${corrected}@s.whatsapp.net\`;
      }
      
      if (phoneNumber.length > 11) {
        const last11 = phoneNumber.slice(-11);
        const corrected = '55' + last11;
        console.log(\`\${logPrefix} ‚ö†Ô∏è Usando √∫ltimos 11 d√≠gitos: \${phoneNumber} ‚Üí \${corrected}\`);
        return \`\${corrected}@s.whatsapp.net\`;
      }
    }
    
    if (!phoneNumber.startsWith('55') && phoneNumber.length <= 11) {
      const corrected = '55' + phoneNumber;
      console.log(\`\${logPrefix} üì± Adicionando c√≥digo do Brasil: \${phoneNumber} ‚Üí \${corrected}\`);
      return \`\${corrected}@s.whatsapp.net\`;
    }
  }
  
  return remoteJid;
}
`;

// Adicionar fun√ß√£o ap√≥s a linha de classe ConnectionManager
const classIndex = content.indexOf('class ConnectionManager {');
if (classIndex > -1) {
  const beforeClass = content.substring(0, classIndex);
  const afterClass = content.substring(classIndex);
  content = beforeClass + functionToAdd + '\n' + afterClass;
}

// 2. Substituir o bloco de tratamento @lid
const lidBlockStart = content.indexOf('// üîß CORRE√á√ÉO: Limpar @lid corrompido');
const lidBlockEnd = content.indexOf('// FILTRO 1: Ignorar grupos');

if (lidBlockStart > -1 && lidBlockEnd > -1) {
  const beforeBlock = content.substring(0, lidBlockStart);
  const afterBlock = content.substring(lidBlockEnd);
  
  const newBlock = `      // üîß CORRE√á√ÉO MELHORADA: Processar n√∫meros corrompidos (@lid e outros)
      const cleanedJid = extractPhoneFromCorruptedJid(remoteJid, logPrefix);
      if (cleanedJid !== remoteJid) {
        console.log(\`\${logPrefix} üîÑ JID corrigido: \${remoteJid} ‚Üí \${cleanedJid}\`);
        remoteJid = cleanedJid;
      }

      `;
  
  content = beforeBlock + newBlock + afterBlock;
}

// 3. Remover @lid do filtro de ignorados
content = content.replace(
  /if \(remoteJid\.includes\('@g\.us'\) \|\| remoteJid\.includes\('@broadcast'\) \|\|\s*remoteJid\.includes\('@newsletter'\) \|\| remoteJid\.includes\('@lid'\)\)/g,
  'if (remoteJid.includes(\'@g.us\') || remoteJid.includes(\'@broadcast\') || remoteJid.includes(\'@newsletter\'))'
);

// Salvar arquivo corrigido
fs.writeFileSync('connection-manager.js', content);
console.log('‚úÖ Arquivo corrigido com sucesso!');
FIXSCRIPT

# Executar script de corre√ß√£o
node connection-manager-fix.js
rm connection-manager-fix.js
echo "‚úÖ Corre√ß√£o aplicada"
EOF

# 4. Reiniciar o servidor WhatsApp
echo "üîÑ Reiniciando servidor WhatsApp..."
ssh ${VPS_USER}@${VPS_IP} << 'EOF'
cd /root/whatsapp-server
pm2 restart whatsapp-server
pm2 logs whatsapp-server --lines 10
echo "‚úÖ Servidor reiniciado"
EOF

echo "‚úÖ Corre√ß√£o aplicada com sucesso!"
echo ""
echo "üìã Resumo das corre√ß√µes:"
echo "1. Fun√ß√£o extractPhoneFromCorruptedJid adicionada"
echo "2. Tratamento melhorado para n√∫meros @lid"
echo "3. Mapeamentos para n√∫meros conhecidos"
echo "4. Remo√ß√£o do filtro que ignorava @lid"
echo ""
echo "üîç N√∫meros corrigidos:"
echo "- 221092702589128 ‚Üí 5562927025891"
echo "- 274293808169155 ‚Üí 556281242215"
echo "- 92045460951243 ‚Üí 556281364997"