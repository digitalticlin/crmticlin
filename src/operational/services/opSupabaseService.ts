import { supabase } from '@/integrations/supabase/client';
import type { Database } from '@/integrations/supabase/types';

type Lead = Database['public']['Tables']['leads']['Row'];
type Funnel = Database['public']['Tables']['funnels']['Row'];
type WhatsAppInstance = Database['public']['Tables']['whatsapp_instances']['Row'];
type Message = Database['public']['Tables']['messages']['Row'];

/**
 * üîí SERVICE OPERACIONAL ISOLADO
 * - Sempre filtra por owner_id ou atribui√ß√µes espec√≠ficas
 * - Nunca acessa dados de outros usu√°rios
 * - Compat√≠vel com RLS policies do Supabase
 */
class OperationalSupabaseService {
  private userId: string | null = null;
  
  constructor() {
    this.initUserId();
  }
  
  private async initUserId() {
    const { data: { user } } = await supabase.auth.getUser();
    this.userId = user?.id || null;
    console.log('[OpService] üë§ Usu√°rio operacional:', this.userId);
  }
  
  private async ensureUserId(): Promise<string> {
    if (!this.userId) {
      await this.initUserId();
    }
    if (!this.userId) {
      throw new Error('[OpService] ‚ùå Usu√°rio n√£o autenticado');
    }
    return this.userId;
  }

  // üéØ LEADS: Apenas os atribu√≠dos ao usu√°rio
  async getAssignedLeads() {
    const userId = await this.ensureUserId();
    
    console.log('[OpService] üìã Buscando leads atribu√≠dos para:', userId);
    
    const { data, error } = await supabase
      .from('leads')
      .select(`
        *,
        funnel:funnels(id, name),
        kanban_stage:kanban_stages(id, name, color)
      `)
      .eq('owner_id', userId)  // üîí FILTRO AUTOM√ÅTICO
      .order('last_message_time', { ascending: false });

    if (error) {
      console.error('[OpService] ‚ùå Erro ao buscar leads:', error);
      throw error;
    }

    console.log('[OpService] ‚úÖ Leads encontrados:', data?.length);
    return { data, error: null };
  }

  // üéØ FUNIS: Apenas os atribu√≠dos via user_funnels
  async getAssignedFunnels() {
    const userId = await this.ensureUserId();
    
    console.log('[OpService] üéØ Buscando funis atribu√≠dos para:', userId);
    
    // Buscar atrav√©s da tabela user_funnels
    const { data, error } = await supabase
      .from('user_funnels')
      .select(`
        funnel_id,
        can_view,
        can_edit,
        funnel:funnels(
          *,
          kanban_stages(*)
        )
      `)
      .eq('profile_id', userId)  // üîí FILTRO POR USER_FUNNELS
      .eq('can_view', true)
      .order('created_at', { ascending: false });

    if (error) {
      console.error('[OpService] ‚ùå Erro ao buscar funis:', error);
      throw error;
    }

    // Extrair apenas os funis
    const funnels = data?.map(item => item.funnel).filter(Boolean) || [];
    console.log('[OpService] ‚úÖ Funis encontrados:', funnels.length);
    return { data: funnels, error: null };
  }

  // üéØ INST√ÇNCIAS WHATSAPP: Apenas as atribu√≠das via user_whatsapp_numbers
  async getAssignedWhatsAppInstances() {
    const userId = await this.ensureUserId();
    
    console.log('[OpService] üì± Buscando inst√¢ncias WhatsApp atribu√≠das para:', userId);
    
    // Buscar atrav√©s da tabela user_whatsapp_numbers
    const { data, error } = await supabase
      .from('user_whatsapp_numbers')
      .select(`
        whatsapp_number_id,
        can_view,
        can_manage,
        whatsapp_instance:whatsapp_instances(*)
      `)
      .eq('profile_id', userId)  // üîí FILTRO POR USER_WHATSAPP_NUMBERS
      .eq('can_view', true)
      .order('created_at', { ascending: false });

    if (error) {
      console.error('[OpService] ‚ùå Erro ao buscar inst√¢ncias WhatsApp:', error);
      throw error;
    }

    // Extrair apenas as inst√¢ncias
    const instances = data?.map(item => item.whatsapp_instance).filter(Boolean) || [];
    console.log('[OpService] ‚úÖ Inst√¢ncias WhatsApp encontradas:', instances.length);
    return { data: instances, error: null };
  }

  // üéØ MENSAGENS: Apenas dos leads atribu√≠dos
  async getAssignedMessages(leadId?: string) {
    const userId = await this.ensureUserId();
    
    console.log('[OpService] üí¨ Buscando mensagens atribu√≠das para:', userId, leadId ? `lead: ${leadId}` : 'todos os leads');
    
    let query = supabase
      .from('messages')
      .select(`
        *,
        lead:leads!inner(
          id,
          name,
          phone,
          owner_id
        )
      `)
      .eq('leads.owner_id', userId)  // üîí JOIN com filtro por owner_id
      .order('timestamp', { ascending: false });

    // Filtro espec√≠fico por lead se fornecido
    if (leadId) {
      query = query.eq('lead_id', leadId);
    }

    const { data, error } = await query;

    if (error) {
      console.error('[OpService] ‚ùå Erro ao buscar mensagens:', error);
      throw error;
    }

    console.log('[OpService] ‚úÖ Mensagens encontradas:', data?.length);
    return { data, error: null };
  }

  // üéØ DASHBOARD: KPIs dos dados atribu√≠dos
  async getDashboardKPIs() {
    const userId = await this.ensureUserId();
    
    console.log('[OpService] üìä Calculando KPIs do dashboard para:', userId);
    
    try {
      // Buscar dados em paralelo
      const [leadsResult, messagesResult] = await Promise.all([
        this.getAssignedLeads(),
        this.getAssignedMessages()
      ]);

      const leads = leadsResult.data || [];
      const messages = messagesResult.data || [];

      // Calcular KPIs espec√≠ficos operacional
      const totalLeads = leads.length;
      const totalMessages = messages.length;
      const unreadCount = leads.reduce((sum, lead) => sum + (lead.unread_count || 0), 0);
      
      // Mensagens enviadas vs recebidas (hoje)
      const today = new Date().toISOString().split('T')[0];
      const todayMessages = messages.filter(m => m.timestamp?.startsWith(today));
      const sentToday = todayMessages.filter(m => m.from_me).length;
      const receivedToday = todayMessages.filter(m => !m.from_me).length;
      
      // Taxa de resposta (mensagens enviadas / recebidas)
      const responseRate = receivedToday > 0 ? ((sentToday / receivedToday) * 100).toFixed(1) : '0';

      const kpis = {
        totalLeads,
        totalMessages,
        unreadCount,
        sentToday,
        receivedToday,
        responseRate: parseFloat(responseRate),
        lastUpdate: new Date().toISOString()
      };

      console.log('[OpService] ‚úÖ KPIs calculados:', kpis);
      return { data: kpis, error: null };
      
    } catch (error) {
      console.error('[OpService] ‚ùå Erro ao calcular KPIs:', error);
      return { data: null, error };
    }
  }

  // üéØ UTILIT√ÅRIO: Verificar se tem acesso a um lead espec√≠fico
  async hasAccessToLead(leadId: string): Promise<boolean> {
    const userId = await this.ensureUserId();
    
    const { data, error } = await supabase
      .from('leads')
      .select('id')
      .eq('id', leadId)
      .eq('owner_id', userId)
      .single();

    return !!data && !error;
  }

  // üéØ UTILIT√ÅRIO: Verificar se tem acesso a uma inst√¢ncia WhatsApp
  async hasAccessToWhatsAppInstance(instanceId: string): Promise<boolean> {
    const userId = await this.ensureUserId();
    
    const { data, error } = await supabase
      .from('user_whatsapp_numbers')
      .select('whatsapp_number_id')
      .eq('whatsapp_number_id', instanceId)
      .eq('profile_id', userId)
      .eq('can_view', true)
      .single();

    return !!data && !error;
  }
}

// üéØ SINGLETON: Inst√¢ncia √∫nica do service
export const opSupabaseService = new OperationalSupabaseService();
export type { Lead, Funnel, WhatsAppInstance, Message };