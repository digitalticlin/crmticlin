import { supabase } from "@/integrations/supabase/client";
import { SendMessageParams, SendMessageResult, MessagingServiceConfig } from '../types/messaging';

/**
 * ‚úÖ SERVI√áO LIMPO DE MESSAGING - ISOLADO E SIMPLIFICADO
 * Respons√°vel por enviar mensagens via Edge Function whatsapp_messaging_service
 * Conecta com VPS 31.97.163.57:3001
 */
export class MessagingService {
  private static config: MessagingServiceConfig = {
    edgeFunctionName: 'whatsapp_messaging_service',
    timeout: 30000,
    retries: 1
  };

  /**
   * ‚úÖ FUN√á√ÉO PRINCIPAL: Enviar mensagem via Edge Function
   */
  static async sendMessage(params: SendMessageParams): Promise<SendMessageResult> {
    try {
      console.log('[Messaging Service] üì§ Iniciando envio de mensagem:', {
        instanceId: params.instanceId,
        phone: params.phone?.substring(0, 4) + '****',
        messageLength: params.message?.length,
        mediaType: params.mediaType || 'text',
        hasMediaUrl: !!params.mediaUrl
      });

      // ‚úÖ VALIDA√á√ÉO R√ÅPIDA DE PAR√ÇMETROS
      if (!params.instanceId || !params.phone || !params.message) {
        return {
          success: false,
          error: 'Par√¢metros obrigat√≥rios: instanceId, phone, message'
        };
      }

      // ‚úÖ PREPARAR DADOS PARA EDGE FUNCTION
      const cleanPhone = params.phone.replace(/\D/g, ''); // Remover caracteres n√£o num√©ricos
      const cleanMessage = params.message.trim();

      if (cleanPhone.length < 10) {
        return {
          success: false,
          error: 'N√∫mero de telefone inv√°lido'
        };
      }

      if (cleanMessage.length === 0) {
        return {
          success: false,
          error: 'Mensagem n√£o pode estar vazia'
        };
      }

      console.log('[Messaging Service] üöÄ Chamando Edge Function:', {
        edgeFunction: this.config.edgeFunctionName,
        instanceId: params.instanceId,
        phone: cleanPhone.substring(0, 4) + '****',
        messageLength: cleanMessage.length,
        mediaType: params.mediaType || 'text'
      });

      // ‚úÖ CHAMAR EDGE FUNCTION COM TIMEOUT E M√çDIA
      const { data, error } = await supabase.functions.invoke(
        this.config.edgeFunctionName, 
        {
          body: {
            action: 'send_message',
            instanceId: params.instanceId,
            phone: cleanPhone,
            message: cleanMessage,
            mediaType: params.mediaType || 'text',  // ‚úÖ NOVO: TIPO DE M√çDIA
            mediaUrl: params.mediaUrl || null       // ‚úÖ NOVO: URL DE M√çDIA
          }
        }
      );

      // ‚úÖ TRATAMENTO DE ERRO DA EDGE FUNCTION
      if (error) {
        console.error('[Messaging Service] ‚ùå Erro na Edge Function:', error);
        return {
          success: false,
          error: error.message || 'Erro na comunica√ß√£o com o servidor'
        };
      }

      // ‚úÖ VERIFICA√á√ÉO DE RESPOSTA
      if (!data) {
        console.error('[Messaging Service] ‚ùå Resposta vazia da Edge Function');
        return {
          success: false,
          error: 'Resposta vazia do servidor'
        };
      }

      if (!data.success) {
        console.error('[Messaging Service] ‚ùå Edge Function retornou erro:', data);
        return {
          success: false,
          error: data.error || 'Erro desconhecido no envio'
        };
      }

      console.log('[Messaging Service] ‚úÖ Mensagem enviada com sucesso:', {
        success: data.success,
        method: data.method,
        messageId: data.data?.messageId,
        vpsInstanceId: data.vpsInstanceId,
        user: data.user
      });

      // ‚úÖ RESPOSTA PADRONIZADA DE SUCESSO
      return {
        success: true,
        messageId: data.data?.messageId || 'unknown',
        timestamp: data.data?.timestamp || new Date().toISOString()
      };

    } catch (error: any) {
      console.error('[Messaging Service] ‚ùå Erro cr√≠tico no envio:', error);
      
      return {
        success: false,
        error: error.message || 'Erro cr√≠tico ao enviar mensagem'
      };
    }
  }

  /**
   * ‚úÖ VALIDAR SE PAR√ÇMETROS EST√ÉO CORRETOS
   */
  static validateParams(params: SendMessageParams): boolean {
    return !!(
      params.instanceId && 
      params.phone && 
      params.message &&
      params.phone.replace(/\D/g, '').length >= 10 &&
      params.message.trim().length > 0
    );
  }
} 