
import { supabase } from "@/integrations/supabase/client";
import { toast } from "sonner";

interface AsyncStatusResult {
  success: boolean;
  instance_exists: boolean;
  status_updated: boolean;
  current_status?: string;
  error?: string;
}

export class AsyncStatusService {
  
  static async syncInstanceStatus(instanceId: string): Promise<AsyncStatusResult> {
    try {
      console.log('[Async Status] üîÑ Sincronizando status para:', instanceId);
      
      const { data, error } = await supabase.functions.invoke('whatsapp_instance_manager', {
        body: {
          action: 'sync_instance_status',
          instanceId: instanceId
        }
      });

      if (error) {
        throw new Error(`Erro na edge function: ${error.message}`);
      }

      if (!data.success) {
        throw new Error(data.error || 'Erro ao sincronizar status');
      }

      console.log('[Async Status] ‚úÖ Status sincronizado:', data);
      
      return {
        success: true,
        instance_exists: true,
        status_updated: data.updated,
        current_status: data.status
      };

    } catch (error: any) {
      console.error('[Async Status] ‚ùå Erro na sincroniza√ß√£o:', error);
      return {
        success: false,
        instance_exists: false,
        status_updated: false,
        error: error.message
      };
    }
  }

  static async checkVPSInstanceExists(instanceId: string): Promise<boolean> {
    try {
      console.log('[Async Status] üîç Verificando exist√™ncia na VPS:', instanceId);
      
      const { data, error } = await supabase.functions.invoke('whatsapp_instance_manager', {
        body: {
          action: 'check_vps_status',
          instanceId: instanceId
        }
      });

      if (error) {
        console.error('[Async Status] ‚ùå Erro ao verificar VPS:', error);
        return false;
      }

      const exists = data?.exists_in_vps || false;
      console.log('[Async Status] üì° Inst√¢ncia existe na VPS:', exists);
      
      return exists;

    } catch (error: any) {
      console.error('[Async Status] ‚ùå Erro na verifica√ß√£o VPS:', error);
      return false;
    }
  }

  static async startPollingForInstance(instanceId: string, maxAttempts: number = 10): Promise<boolean> {
    console.log(`[Async Status] ‚è∞ Iniciando polling para ${instanceId} (m√°ximo ${maxAttempts} tentativas)`);
    
    for (let attempt = 1; attempt <= maxAttempts; attempt++) {
      console.log(`[Async Status] üîÑ Polling tentativa ${attempt}/${maxAttempts}`);
      
      try {
        const result = await this.syncInstanceStatus(instanceId);
        
        if (result.success && result.status_updated) {
          console.log(`[Async Status] ‚úÖ Status atualizado na tentativa ${attempt}`);
          toast.success(`Status da inst√¢ncia sincronizado!`);
          return true;
        }
        
        if (result.current_status === 'ready' || result.current_status === 'waiting_qr') {
          console.log(`[Async Status] ‚úÖ Inst√¢ncia est√° pronta na tentativa ${attempt}`);
          return true;
        }
        
      } catch (error) {
        console.log(`[Async Status] ‚ö†Ô∏è Erro na tentativa ${attempt}:`, error);
      }
      
      // Aguardar antes da pr√≥xima tentativa (com backoff exponencial)
      if (attempt < maxAttempts) {
        const delay = Math.min(2000 * Math.pow(1.5, attempt - 1), 10000); // Max 10s
        console.log(`[Async Status] ‚è≥ Aguardando ${delay}ms antes da pr√≥xima tentativa`);
        await new Promise(resolve => setTimeout(resolve, delay));
      }
    }
    
    console.log(`[Async Status] ‚ùå Polling falhou ap√≥s ${maxAttempts} tentativas`);
    toast.warning(`N√£o foi poss√≠vel sincronizar o status ap√≥s ${maxAttempts} tentativas`);
    return false;
  }

  static async recoverPendingInstances(): Promise<{ recovered: number; errors: string[] }> {
    try {
      console.log('[Async Status] üîß Iniciando recupera√ß√£o de inst√¢ncias pendentes');
      
      // Buscar inst√¢ncias com status 'vps_pending' ou 'initializing'
      const { data: pendingInstances, error } = await supabase
        .from('whatsapp_instances')
        .select('*')
        .in('connection_status', ['vps_pending', 'initializing'])
        .eq('connection_type', 'web');

      if (error) {
        throw new Error(`Erro ao buscar inst√¢ncias pendentes: ${error.message}`);
      }

      if (!pendingInstances || pendingInstances.length === 0) {
        console.log('[Async Status] ‚ÑπÔ∏è Nenhuma inst√¢ncia pendente encontrada');
        return { recovered: 0, errors: [] };
      }

      console.log(`[Async Status] üìã Encontradas ${pendingInstances.length} inst√¢ncias pendentes`);
      
      let recovered = 0;
      const errors: string[] = [];

      // Verificar cada inst√¢ncia pendente
      for (const instance of pendingInstances) {
        try {
          console.log(`[Async Status] üîÑ Recuperando ${instance.instance_name}`);
          
          const result = await this.syncInstanceStatus(instance.id);
          
          if (result.success && result.status_updated) {
            recovered++;
            console.log(`[Async Status] ‚úÖ ${instance.instance_name} recuperada`);
          } else {
            errors.push(`${instance.instance_name}: ${result.error || 'Falha na sincroniza√ß√£o'}`);
          }
          
        } catch (instanceError: any) {
          errors.push(`${instance.instance_name}: ${instanceError.message}`);
        }
      }

      console.log(`[Async Status] üìä Recupera√ß√£o conclu√≠da: ${recovered} recuperadas, ${errors.length} erros`);
      
      if (recovered > 0) {
        toast.success(`${recovered} inst√¢ncias recuperadas com sucesso!`);
      }
      
      if (errors.length > 0) {
        console.warn('[Async Status] ‚ö†Ô∏è Erros na recupera√ß√£o:', errors);
      }

      return { recovered, errors };

    } catch (error: any) {
      console.error('[Async Status] ‚ùå Erro na recupera√ß√£o:', error);
      return { recovered: 0, errors: [error.message] };
    }
  }

  static async schedulePeriodicSync(intervalMs: number = 120000): Promise<() => void> {
    console.log(`[Async Status] ‚è∞ Agendando sincroniza√ß√£o peri√≥dica a cada ${intervalMs}ms`);
    
    const intervalId = setInterval(async () => {
      try {
        await this.recoverPendingInstances();
      } catch (error) {
        console.error('[Async Status] ‚ùå Erro na sincroniza√ß√£o peri√≥dica:', error);
      }
    }, intervalMs);

    // Retornar fun√ß√£o para parar o agendamento
    return () => {
      console.log('[Async Status] üõë Parando sincroniza√ß√£o peri√≥dica');
      clearInterval(intervalId);
    };
  }
}
