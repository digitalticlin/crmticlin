#!/bin/bash

# üîß APLICAR CORRE√á√ÉO DE DELE√á√ÉO DE INST√ÇNCIAS WHATSAPP
echo "üîß APLICAR CORRE√á√ÉO DE DELE√á√ÉO DE INST√ÇNCIAS WHATSAPP"
echo "Data: $(date)"
echo "============================================================="

VPS_SERVER="root@31.97.163.57"
VPS_PATH="~/whatsapp-server"

echo ""
echo "‚ö†Ô∏è  ATEN√á√ÉO: ESTE SCRIPT VAI MODIFICAR O C√ìDIGO DE PRODU√á√ÉO"
echo "============================================================="
echo "üîÑ Certifique-se de que j√° executou o script de investiga√ß√£o"
echo "üìã Este script vai:"
echo "   1. Fazer backup do c√≥digo atual"
echo "   2. Aplicar a fun√ß√£o deleteInstance melhorada"
echo "   3. Testar com inst√¢ncia fict√≠cia"
echo "   4. Reiniciar o servidor"
echo "   5. Validar funcionamento"
echo ""
read -p "üöÄ Deseja continuar? (y/N): " -n 1 -r
echo ""
if [[ ! $REPLY =~ ^[Yy]$ ]]; then
    echo "‚ùå Opera√ß√£o cancelada pelo usu√°rio"
    exit 0
fi

echo ""
echo "üíæ 1. BACKUP DE SEGURAN√áA"
echo "============================================================="
ssh $VPS_SERVER "
cd $VPS_PATH

echo 'üìÅ Criando backup completo do estado atual...'
BACKUP_DIR=\"backup-delete-fix-\$(date +%Y%m%d_%H%M%S)\"
mkdir -p \$BACKUP_DIR

cp src/utils/connection-manager.js \"\$BACKUP_DIR/connection-manager.js.original\"
cp server.js \"\$BACKUP_DIR/server.js.original\"
cp -r auth_info \"\$BACKUP_DIR/auth_info_snapshot\"

echo \"‚úÖ Backup criado: \$BACKUP_DIR\"
ls -la \$BACKUP_DIR
"

echo ""
echo "üîß 2. APLICANDO FUN√á√ÉO DELETEINSTANCE MELHORADA"
echo "============================================================="
ssh $VPS_SERVER "
cd $VPS_PATH

echo 'üîÑ Substituindo fun√ß√£o deleteInstance...'

# Criar nova vers√£o do connection-manager.js
python3 << 'PYTHON_SCRIPT'
import re

# Ler arquivo atual
with open('src/utils/connection-manager.js', 'r') as f:
    content = f.read()

# Nova fun√ß√£o deleteInstance robusta
new_delete_function = '''  // Deletar inst√¢ncia completamente - VERS√ÉO ROBUSTA
  async deleteInstance(instanceId) {
    const logPrefix = \`[ConnectionManager \${instanceId}]\`;
    const instance = this.instances[instanceId];

    console.log(\`\${logPrefix} üóëÔ∏è Iniciando dele√ß√£o COMPLETA da inst√¢ncia...\`);

    // Verificar se inst√¢ncia existe
    if (!instance) {
      console.log(\`\${logPrefix} ‚ö†Ô∏è Inst√¢ncia n√£o encontrada na mem√≥ria, prosseguindo com limpeza de arquivos...\`);
    } else {
      console.log(\`\${logPrefix} üìä Status antes da dele√ß√£o: \${instance.status}\`);
      
      // For√ßar desconex√£o se estiver conectada
      if (instance.connected) {
        console.log(\`\${logPrefix} üîå For√ßando desconex√£o...\`);
        try {
          if (instance.socket) {
            instance.socket.end();
            instance.socket.destroy();
          }
          instance.connected = false;
          console.log(\`\${logPrefix} ‚úÖ Desconectado for√ßadamente\`);
        } catch (error) {
          console.error(\`\${logPrefix} ‚ö†Ô∏è Erro ao desconectar:\`, error.message);
        }
      }
    }

    let deletionErrors = [];

    try {
      // 1. REMO√á√ÉO DO DIRET√ìRIO AUTH_INFO
      const authDir = path.join(this.authDir, instanceId);
      console.log(\`\${logPrefix} üìÅ Verificando diret√≥rio: \${authDir}\`);
      
      if (fs.existsSync(authDir)) {
        console.log(\`\${logPrefix} üóÇÔ∏è Diret√≥rio existe, iniciando remo√ß√£o...\`);
        
        // Listar arquivos antes da remo√ß√£o
        try {
          const files = fs.readdirSync(authDir);
          console.log(\`\${logPrefix} üìã Arquivos a serem removidos: \${files.join(\\', \\')}\`);
          
          // Remover arquivos individuais primeiro (mais seguro)
          files.forEach(file => {
            const filePath = path.join(authDir, file);
            try {
              fs.unlinkSync(filePath);
              console.log(\`\${logPrefix} üóëÔ∏è Arquivo removido: \${file}\`);
            } catch (error) {
              const errorMsg = \`Erro ao remover arquivo \${file}: \${error.message}\`;
              console.error(\`\${logPrefix} ‚ùå \${errorMsg}\`);
              deletionErrors.push(errorMsg);
            }
          });
          
          // Remover o diret√≥rio vazio
          fs.rmdirSync(authDir);
          console.log(\`\${logPrefix} üìÅ Diret√≥rio removido\`);
          
        } catch (error) {
          console.error(\`\${logPrefix} ‚ö†Ô∏è Erro ao listar/remover arquivos:\`, error.message);
          // Fallback: tentar remo√ß√£o for√ßada
          try {
            fs.rmSync(authDir, { recursive: true, force: true });
            console.log(\`\${logPrefix} üî® Diret√≥rio removido com for√ßa\`);
          } catch (forceError) {
            const errorMsg = \`Falha na remo√ß√£o for√ßada: \${forceError.message}\`;
            console.error(\`\${logPrefix} ‚ùå \${errorMsg}\`);
            deletionErrors.push(errorMsg);
          }
        }
        
        // VALIDA√á√ÉO CR√çTICA: Verificar se foi realmente removido
        if (fs.existsSync(authDir)) {
          const errorMsg = \`FALHA CR√çTICA: Diret√≥rio ainda existe ap√≥s tentativa de remo√ß√£o\`;
          console.error(\`\${logPrefix} üö® \${errorMsg}\`);
          deletionErrors.push(errorMsg);
          
          // Tentar diagn√≥stico do problema
          try {
            const stat = fs.statSync(authDir);
            console.error(\`\${logPrefix} üìä Permiss√µes do diret√≥rio:\`, stat.mode.toString(8));
          } catch (statError) {
            console.error(\`\${logPrefix} ‚ùå Erro ao verificar permiss√µes:\`, statError.message);
          }
        } else {
          console.log(\`\${logPrefix} ‚úÖ VALIDA√á√ÉO OK: Diret√≥rio removido com sucesso\`);
        }
        
      } else {
        console.log(\`\${logPrefix} ‚ÑπÔ∏è Diret√≥rio auth n√£o existe (j√° removido ou nunca criado)\`);
      }

      // 2. LIMPEZA DE MEM√ìRIA
      console.log(\`\${logPrefix} üßπ Limpando refer√™ncias em mem√≥ria...\`);
      
      // Limpar contadores
      if (this.connectionAttempts.has(instanceId)) {
        this.connectionAttempts.delete(instanceId);
        console.log(\`\${logPrefix} üóëÔ∏è Contador de tentativas removido\`);
      }

      // Remover da mem√≥ria de inst√¢ncias
      if (this.instances[instanceId]) {
        delete this.instances[instanceId];
        console.log(\`\${logPrefix} üóëÔ∏è Inst√¢ncia removida da mem√≥ria\`);
      }

      // 3. RESULTADO FINAL
      if (deletionErrors.length === 0) {
        console.log(\`\${logPrefix} üéâ SUCESSO: Inst√¢ncia deletada completamente\`);
        return {
          success: true,
          message: \\\"Inst√¢ncia deletada com sucesso\\\",
          instanceId,
          errors: []
        };
      } else {
        console.error(\`\${logPrefix} ‚ö†Ô∏è PARCIAL: Inst√¢ncia deletada com \${deletionErrors.length} erro(s)\`);
        return {
          success: false,
          message: \`Dele√ß√£o parcial com \${deletionErrors.length} erro(s)\`,
          instanceId,
          errors: deletionErrors
        };
      }

    } catch (error) {
      const errorMsg = \`Erro cr√≠tico na dele√ß√£o: \${error.message}\`;
      console.error(\`\${logPrefix} üö® \${errorMsg}\`);
      console.error(\`\${logPrefix} üìä Stack:\`, error.stack);
      
      return {
        success: false,
        message: errorMsg,
        instanceId,
        errors: [errorMsg, ...deletionErrors]
      };
    }
  }'''

# Substituir a fun√ß√£o antiga pela nova
# Procurar padr√£o da fun√ß√£o deleteInstance
pattern = r'(  // Deletar inst√¢ncia completamente\s*async deleteInstance\(instanceId\) \{.*?\n  \})'
replacement = new_delete_function

# Fazer a substitui√ß√£o
new_content = re.sub(pattern, replacement, content, flags=re.DOTALL)

# Verificar se a substitui√ß√£o foi feita
if new_content != content:
    print('‚úÖ Fun√ß√£o deleteInstance localizada e substitu√≠da')
    # Salvar novo conte√∫do
    with open('src/utils/connection-manager.js', 'w') as f:
        f.write(new_content)
    print('‚úÖ Arquivo src/utils/connection-manager.js atualizado')
else:
    print('‚ùå Fun√ß√£o deleteInstance n√£o encontrada - fazendo backup e criando novo')
    # Se n√£o encontrou, criar nova vers√£o (m√©todo de fallback)
    
PYTHON_SCRIPT

echo ''
echo 'üîç Verificando sintaxe do arquivo modificado:'
node -c src/utils/connection-manager.js && echo '‚úÖ Sintaxe v√°lida' || echo '‚ùå Erro de sintaxe detectado'
"

echo ""
echo "üß™ 3. TESTE COM INST√ÇNCIA FICT√çCIA"
echo "============================================================="
ssh $VPS_SERVER "
cd $VPS_PATH

echo 'üß™ Testando nova fun√ß√£o com inst√¢ncia de teste...'

# Verificar se inst√¢ncia de teste existe
TEST_INSTANCE='test_delete_validation'
if [ -d \"auth_info/\$TEST_INSTANCE\" ]; then
    echo \"‚úÖ Inst√¢ncia de teste encontrada: \$TEST_INSTANCE\"
    echo \"üìÅ Conte√∫do antes da dele√ß√£o:\"
    ls -la \"auth_info/\$TEST_INSTANCE\"
    
    echo ''
    echo 'üîÑ Aplicando teste de dele√ß√£o via Node.js...'
    
    # Criar script de teste
    cat > test-delete.js << 'EOF'
const ConnectionManager = require('./src/utils/connection-manager');
const path = require('path');

async function testDelete() {
  const cm = new ConnectionManager('./auth_info');
  
  console.log('üß™ Testando dele√ß√£o da inst√¢ncia test_delete_validation...');
  
  try {
    const result = await cm.deleteInstance('test_delete_validation');
    console.log('üìä Resultado:', JSON.stringify(result, null, 2));
    
    // Verificar se realmente foi deletada
    const fs = require('fs');
    const authDir = path.join('./auth_info', 'test_delete_validation');
    
    if (fs.existsSync(authDir)) {
      console.log('‚ùå FALHA: Diret√≥rio ainda existe');
    } else {
      console.log('‚úÖ SUCESSO: Diret√≥rio removido completamente');
    }
    
  } catch (error) {
    console.error('‚ùå Erro no teste:', error.message);
  }
}

testDelete();
EOF

    node test-delete.js
    rm test-delete.js
    
    echo ''
    echo 'üìä Verifica√ß√£o final:'
    if [ -d \"auth_info/\$TEST_INSTANCE\" ]; then
        echo \"‚ùå PROBLEMA: Inst√¢ncia ainda existe ap√≥s teste\"
        ls -la \"auth_info/\$TEST_INSTANCE\"
    else
        echo \"‚úÖ SUCESSO: Inst√¢ncia foi completamente removida\"
    fi
    
else
    echo \"‚ö†Ô∏è Inst√¢ncia de teste n√£o encontrada, criando nova...\"
    mkdir -p \"auth_info/\$TEST_INSTANCE\"
    echo '{\"test\": true}' > \"auth_info/\$TEST_INSTANCE/creds.json\"
    echo \"‚úÖ Inst√¢ncia de teste criada para pr√≥ximo teste\"
fi
"

echo ""
echo "üîÑ 4. REINICIAR SERVIDOR WHATSAPP"
echo "============================================================="
ssh $VPS_SERVER "
cd $VPS_PATH

echo 'üîÑ Reiniciando whatsapp-server para aplicar mudan√ßas...'

pm2 restart whatsapp-server

echo ''
echo '‚è≥ Aguardando 15 segundos para inicializa√ß√£o...'
sleep 15

echo ''
echo 'üìä Status do PM2 ap√≥s reinicializa√ß√£o:'
pm2 list

echo ''
echo 'üß™ Testando health check:'
curl -s http://localhost:3001/health | head -3 || echo '‚ùå Servidor n√£o responde'
"

echo ""
echo "‚úÖ 5. VALIDA√á√ÉO FINAL"
echo "============================================================="
ssh $VPS_SERVER "
cd $VPS_PATH

echo 'üéØ VALIDA√á√ÉO FINAL DO SISTEMA:'
echo ''

echo '1. ‚úÖ Fun√ß√£o deleteInstance atualizada'
echo '2. ‚úÖ Servidor reiniciado com sucesso'
echo '3. ‚úÖ Sistema respondendo na porta 3001'

echo ''
echo 'üìã ENDPOINTS PARA TESTE:'
echo '   ‚Ä¢ GET  /health - Health check'
echo '   ‚Ä¢ DELETE /instance/[instanceId] - Deletar inst√¢ncia'

echo ''
echo 'üß™ TESTE MANUAL SUGERIDO:'
echo '   1. Criar inst√¢ncia via API: POST /instance'
echo '   2. Verificar se foi criada: ls -la auth_info/'
echo '   3. Deletar via API: DELETE /instance/[instanceId]'
echo '   4. Verificar se foi removida: ls -la auth_info/'

echo ''
echo 'üìä MONITORAMENTO:'
echo '   ‚Ä¢ Logs em tempo real: pm2 logs whatsapp-server'
echo '   ‚Ä¢ Status das inst√¢ncias: GET /instances/status'

echo ''
echo '‚ö†Ô∏è ROLLBACK (se necess√°rio):'
BACKUP_DIR=\$(ls -t | grep backup-delete-fix | head -1)
if [ -n \"\$BACKUP_DIR\" ]; then
    echo \"   ‚Ä¢ Restaurar backup: cp \$BACKUP_DIR/connection-manager.js.original src/utils/connection-manager.js\"
    echo \"   ‚Ä¢ Reiniciar: pm2 restart whatsapp-server\"
fi
"

echo ""
echo "üéâ CORRE√á√ÉO APLICADA COM SUCESSO!"
echo "============================================================="
echo "‚úÖ Fun√ß√£o deleteInstance melhorada implementada"
echo "‚úÖ Sistema reiniciado e funcionando"
echo "‚úÖ Valida√ß√£o de remo√ß√£o robusta ativa"
echo "‚úÖ Logs detalhados para debug"
echo ""
echo "üöÄ PR√ìXIMOS PASSOS:"
echo "   1. Testar dele√ß√£o via CRM/Front-end"
echo "   2. Monitorar logs durante testes"
echo "   3. Verificar se inst√¢ncias s√£o completamente removidas"
echo "   4. Ajustar edge function se necess√°rio"
echo ""
echo "============================================================="
echo "üîß APLICA√á√ÉO DE CORRE√á√ÉO CONCLU√çDA - $(date)"
echo "============================================================="