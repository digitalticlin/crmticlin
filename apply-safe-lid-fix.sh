#!/bin/bash

# APLICA√á√ÉO SEGURA DA CORRE√á√ÉO @LID
VPS_IP="31.97.163.57"
VPS_USER="root"

echo "üîß Aplicando corre√ß√£o SEGURA para @lid na VPS..."
echo "‚ö†Ô∏è Esta corre√ß√£o:"
echo "  - Mant√©m todas as fun√ß√µes existentes"
echo "  - Adiciona apenas mapeamento de n√∫meros @lid"
echo "  - Inclui sistema de logs para monitoramento"
echo "  - Usa fallback seguro para n√∫meros n√£o mapeados"
echo ""

# 1. BACKUP COMPLETO E VERIFICA√á√ÉO
echo "üì¶ Criando backup e verificando status..."
ssh ${VPS_USER}@${VPS_IP} << 'EOF'
cd /root/whatsapp-server

# Backup com timestamp
BACKUP_DIR="backup-lid-safe-$(date +%Y%m%d-%H%M%S)"
mkdir -p "$BACKUP_DIR"
cp -r src/ "$BACKUP_DIR/"
cp package.json "$BACKUP_DIR/"
echo "‚úÖ Backup criado em: $BACKUP_DIR"

# Status atual
echo "üìä Status atual das inst√¢ncias:"
pm2 list | grep whatsapp-server
echo ""
echo "üìú √öltimos logs:"
pm2 logs whatsapp-server --lines 5
EOF

# 2. APLICAR CORRE√á√ÉO SEGURA
echo "üîß Aplicando corre√ß√£o incremental e segura..."
ssh ${VPS_USER}@${VPS_IP} << 'EOF'
cd /root/whatsapp-server/src/utils

# Verificar arquivo
if [ ! -f "connection-manager.js" ]; then
  echo "‚ùå Arquivo connection-manager.js n√£o encontrado!"
  exit 1
fi

# Script de corre√ß√£o Node.js
cat > lid-safe-patch.js << 'PATCHSCRIPT'
const fs = require('fs');

console.log('üîß Aplicando patch seguro para @lid...');

// Ler arquivo
const file = 'connection-manager.js';
let content = fs.readFileSync(file, 'utf8');

// Verificar se j√° foi aplicado
if (content.includes('LID_SAFE_MAPPER')) {
  console.log('‚ö†Ô∏è Patch j√° aplicado. Saindo...');
  process.exit(0);
}

console.log('üìù Adicionando sistema de mapeamento @lid...');

// C√≥digo do mapeador @lid
const mapperCode = `
// üîß LID_SAFE_MAPPER - Sistema seguro de mapeamento @lid
const LID_SAFE_MAPPER = {
  // Mapeamentos conhecidos: [n√∫mero_corrompido] => [n√∫mero_correto]
  knownMappings: new Map([
    // IMPORTANTE: Adicionar mapeamentos corretos conforme necess√°rio
    ['274293808169155', '556299212484'], // Exemplo fornecido
    ['92045460951243', '556281364997'],   // Mapeamento conhecido
    ['221092702589128', '556299212484']   // Ajustar n√∫mero correto
  ]),
  
  // Fun√ß√£o principal de mapeamento
  mapLidPhone: function(remoteJid, logPrefix) {
    if (!remoteJid || !remoteJid.includes('@lid')) {
      return remoteJid; // N√£o √© @lid, retorna original
    }
    
    const originalJid = remoteJid;
    const corruptedNumber = remoteJid.replace('@lid', '');
    
    console.log(\`\${logPrefix} üîç [LID_SAFE] @lid detectado: "\${originalJid}"\`);
    console.log(\`\${logPrefix} üîç [LID_SAFE] N√∫mero corrompido extra√≠do: "\${corruptedNumber}"\`);
    
    // Buscar mapeamento conhecido
    if (this.knownMappings.has(corruptedNumber)) {
      const correctPhone = this.knownMappings.get(corruptedNumber);
      const correctJid = \`\${correctPhone}@s.whatsapp.net\`;
      
      console.log(\`\${logPrefix} ‚úÖ [LID_SAFE] Mapeamento encontrado:\`);
      console.log(\`\${logPrefix} ‚úÖ [LID_SAFE] \${corruptedNumber} ‚Üí \${correctPhone}\`);
      console.log(\`\${logPrefix} ‚úÖ [LID_SAFE] JID final: \${correctJid}\`);
      
      return correctJid;
    }
    
    // N√∫mero n√£o mapeado - LOG CR√çTICO para an√°lise
    console.log(\`\${logPrefix} üö® [LID_SAFE] N√öMERO @LID N√ÉO MAPEADO:\`);
    console.log(\`\${logPrefix} üö® [LID_SAFE] Original: \${originalJid}\`);
    console.log(\`\${logPrefix} üö® [LID_SAFE] Corrompido: \${corruptedNumber}\`);
    console.log(\`\${logPrefix} üö® [LID_SAFE] A√á√ÉO: Adicionar mapeamento manual!\`);
    
    // Fallback seguro - usar n√∫mero como est√° mas loggar
    const fallbackJid = \`\${corruptedNumber}@s.whatsapp.net\`;
    console.log(\`\${logPrefix} ‚ö†Ô∏è [LID_SAFE] Usando fallback: \${fallbackJid}\`);
    
    return fallbackJid;
  },
  
  // Fun√ß√£o para adicionar novos mapeamentos (uso futuro)
  addMapping: function(corruptedNumber, correctNumber) {
    this.knownMappings.set(corruptedNumber, correctNumber);
    console.log(\`[LID_SAFE] ‚ûï Mapeamento adicionado: \${corruptedNumber} ‚Üí \${correctNumber}\`);
  }
};
`;

// Inserir antes da classe ConnectionManager
const classIndex = content.indexOf('class ConnectionManager {');
if (classIndex === -1) {
  console.log('‚ùå Classe ConnectionManager n√£o encontrada!');
  process.exit(1);
}

const beforeClass = content.substring(0, classIndex);
const afterClass = content.substring(classIndex);
content = beforeClass + mapperCode + '\n' + afterClass;

console.log('‚úÖ Sistema de mapeamento adicionado');

// Encontrar onde est√° o processamento atual de @lid
const existingLidIndex = content.indexOf('if (remoteJid.includes(\'@lid\'))');
let lidProcessed = false;

if (existingLidIndex > -1) {
  console.log('üìù Substituindo processamento @lid existente...');
  
  // Encontrar in√≠cio da condi√ß√£o if
  let startIndex = existingLidIndex;
  while (startIndex > 0 && content[startIndex - 1] !== '\n') {
    startIndex--;
  }
  
  // Encontrar final do bloco
  let braceCount = 0;
  let endIndex = existingLidIndex;
  let foundOpenBrace = false;
  
  for (let i = existingLidIndex; i < content.length; i++) {
    if (content[i] === '{') {
      braceCount++;
      foundOpenBrace = true;
    } else if (content[i] === '}') {
      braceCount--;
      if (foundOpenBrace && braceCount === 0) {
        endIndex = i + 1;
        break;
      }
    }
  }
  
  // Substituir bloco antigo
  const beforeLid = content.substring(0, startIndex);
  const afterLid = content.substring(endIndex);
  
  const newLidCode = `      // üîß LID_SAFE_MAPPER - Corre√ß√£o segura aplicada
      const originalRemoteJid = remoteJid;
      remoteJid = LID_SAFE_MAPPER.mapLidPhone(remoteJid, logPrefix);
      
      if (remoteJid !== originalRemoteJid) {
        console.log(\`\${logPrefix} üîÑ [LID_SAFE] JID processado: \${originalRemoteJid} ‚Üí \${remoteJid}\`);
      }
`;
  
  content = beforeLid + newLidCode + afterLid;
  lidProcessed = true;
  console.log('‚úÖ Processamento @lid substitu√≠do');
}

// Se n√£o encontrou processamento @lid, adicionar no in√≠cio
if (!lidProcessed) {
  console.log('üìù Adicionando verifica√ß√£o @lid no in√≠cio...');
  
  const messageStartPattern = 'let remoteJid = message.key.remoteJid;';
  const messageIndex = content.indexOf(messageStartPattern);
  
  if (messageIndex > -1) {
    const insertPoint = content.indexOf('\n', messageIndex) + 1;
    const beforeInsert = content.substring(0, insertPoint);
    const afterInsert = content.substring(insertPoint);
    
    const lidCheck = `
      // üîß LID_SAFE_MAPPER - Verifica√ß√£o no in√≠cio
      remoteJid = LID_SAFE_MAPPER.mapLidPhone(remoteJid, logPrefix);
`;
    
    content = beforeInsert + lidCheck + afterInsert;
    console.log('‚úÖ Verifica√ß√£o @lid adicionada no in√≠cio');
  } else {
    console.log('‚ö†Ô∏è N√£o foi poss√≠vel encontrar ponto de inser√ß√£o');
  }
}

// Salvar arquivo
fs.writeFileSync(file, content);

console.log('‚úÖ Patch aplicado com sucesso!');
console.log('');
console.log('üìã RESUMO DA CORRE√á√ÉO:');
console.log('‚úÖ Sistema LID_SAFE_MAPPER adicionado');
console.log('‚úÖ Mapeamentos est√°ticos configurados');
console.log('‚úÖ Logs detalhados para monitoramento');
console.log('‚úÖ Fallback seguro para n√∫meros n√£o mapeados');
console.log('');
console.log('üîç MAPEAMENTOS ATIVOS:');
console.log('- 274293808169155 ‚Üí 556299212484');
console.log('- 92045460951243 ‚Üí 556281364997');
console.log('- 221092702589128 ‚Üí 556299212484');
PATCHSCRIPT

# Executar patch
node lid-safe-patch.js
PATCH_RESULT=$?

if [ $PATCH_RESULT -eq 0 ]; then
  echo "‚úÖ Patch aplicado com sucesso"
else
  echo "‚ùå Erro ao aplicar patch!"
  exit 1
fi

# Limpar arquivo tempor√°rio
rm lid-safe-patch.js

# Verificar se aplica√ß√£o funcionou
if grep -q "LID_SAFE_MAPPER" connection-manager.js; then
  echo "‚úÖ Corre√ß√£o confirmada no c√≥digo"
else
  echo "‚ùå Corre√ß√£o n√£o foi aplicada!"
  exit 1
fi
EOF

# 3. RESTART MONITORADO
echo ""
echo "üîÑ Reiniciando servidor com monitoramento..."
ssh ${VPS_USER}@${VPS_IP} << 'EOF'
cd /root/whatsapp-server

echo "üìä Status ANTES do restart:"
pm2 list | grep whatsapp-server

echo ""
echo "üîÑ Executando restart..."
pm2 restart whatsapp-server

echo ""
echo "‚è±Ô∏è Aguardando 15 segundos para estabiliza√ß√£o..."
sleep 15

echo ""
echo "üìä Status AP√ìS restart:"
pm2 list | grep whatsapp-server

echo ""
echo "üìú Logs mais recentes (√∫ltimas 20 linhas):"
pm2 logs whatsapp-server --lines 20
EOF

echo ""
echo "‚úÖ CORRE√á√ÉO APLICADA COM SUCESSO!"
echo ""
echo "üîç MONITORAMENTO CONT√çNUO:"
echo "Execute este comando para acompanhar os logs:"
echo "ssh root@31.97.163.57 'pm2 logs whatsapp-server --lines 50 | grep LID_SAFE'"
echo ""
echo "üìã PR√ìXIMOS PASSOS:"
echo "1. Monitorar logs por alguns minutos"
echo "2. Quando aparecer n√∫mero @lid n√£o mapeado, adicionar mapeamento"
echo "3. Verificar se inst√¢ncias continuam ativas"
echo ""
echo "üö® IMPORTANTE:"
echo "- Todos os n√∫meros @lid s√£o logados com [LID_SAFE]"
echo "- N√∫meros n√£o mapeados usam fallback seguro"
echo "- Sistema mant√©m todas fun√ß√µes existentes intactas"