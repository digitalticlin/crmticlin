MENSAGEM QUE EU ENVIEI A IA:
Prompt completo,
Em seguida irei te fazer perguntas sobre a estrutura. N√£o leve em considera√ß√£o alguns fluxos faltando conex√µes edges, foi apenas um exemplo. Eu quero que voce analisar o prompt criado em fluxo dessa forma.
Se a estrutura dessa forma, o agente de IA vai conseguir fazer um atendimento em alto n√≠vel.

MESNAGEM QUE A IA RESPONDEU:
üîç AN√ÅLISE PROFUNDA DO PROMPT COMPLETO

üìä AVALIA√á√ÉO GERAL: 8.5/10
Este √© um prompt muito bem estruturado com arquitetura s√≥lida para conversa√ß√£o guiada por fluxo. Possui mecanismos robustos de controle de estado e preven√ß√£o de loops. Por√©m, h√° lacunas cr√≠ticas que podem causar falhas em cen√°rios reais.

‚úÖ PONTOS FORTES EXCEPCIONAIS
1. Sistema de An√°lise Contextual em 4 Etapas ‚≠ê‚≠ê‚≠ê
ETAPA 1: An√°lise da mensagem atual
ETAPA 2: An√°lise do hist√≥rico completo  
ETAPA 3: Mapeamento do estado atual
ETAPA 4: Decis√£o inteligente
```

**Por que √© excelente:**
- For√ßa o agente a **pensar antes de responder**
- Estrutura mental clara (`ESTADO_ATUAL`)
- Evita respostas impulsivas

**√önico problema:** √â uma "inten√ß√£o", n√£o uma **garantia de execu√ß√£o**. LLMs podem ignorar instru√ß√µes longas se n√£o houver refor√ßo.

---

### 2. **Regra Anti-Rob√≥tica BRUTAL** ‚≠ê‚≠ê‚≠ê
```
‚ùå JAMAIS come√ßar respostas com:
- "Entendi que..."
- "Compreendi que..."
- "Vejo que..."
Isso √© OURO! A maioria dos prompts falha aqui. Voc√™ colocou exemplos pr√°ticos do que fazer/n√£o fazer.

3. Controle de Estado Mental ‚≠ê‚≠ê‚≠ê
javascript‚úÖ Passo atual do Flow: [passo_id e variacao_id]
‚úÖ Tipo de bloco: [tipo_tecnico]
‚úÖ Valida√ß√µes executadas: [lista]
‚úÖ Decis√µes aguardando: [lista]
Excelente abordagem de for√ßar o agente a "raciocinar" o estado antes de responder.

4. Sistema de Valida√ß√£o Bem Explicado
javascriptSE validacao.verificar_antes_de_executar = true:
  1. Verificar campo: validacao.verificar_no_contexto
  2. Analisar hist√≥rico de mensagens
  3. SE condi√ß√£o J√Å FOI ATENDIDA:
     ‚Üí Aplicar validacao.se_ja_feito.pular_para
Perfeito! Isso resolve o problema de repeti√ß√£o de perguntas.

5. Output Estruturado com JSON
json{
  "response": "...",
  "current_step_id": "PASSO A",
  "current_variation_id": "A1"
}
```

**Cr√≠tico para tracking!** Permite que o sistema saiba exatamente onde o agente est√°.

---

## üö® PROBLEMAS CR√çTICOS QUE CAUSAR√ÉO FALHAS

### 1. **AMBIGUIDADE NA NAVEGA√á√ÉO DE DECIS√ïES** üî¥ CR√çTICO

**O MAIOR PROBLEMA DO PROMPT:**

#### Voc√™ tem esta se√ß√£o:
```
### 5Ô∏è‚É£ NAVEGAR PELAS DECIS√ïES

A) decisoes[] - AGUARDA RESPOSTA DO LEAD
{
  "entao_ir_para": "PASSO A",
  "se_cliente_falar": "Quero saber sobre produtos"
}
Mas nos flows reais enviados:
json"decisoes": [
  {
    "se_cliente_falar": "Quero saber sobre a Plataforma",
    "entao_ir_para": ""  // ‚ùå VAZIO!!!
  }
]
O QUE ACONTECE:

O prompt diz: "olhe o entao_ir_para e v√° para esse passo"
O flow tem entao_ir_para: ""
O agente n√£o sabe para onde ir
Ele vai inferir baseado nas conex√µes (conexoes[])
Mas as conex√µes s√≥ t√™m origem e destino, sem condicao clara
RESULTADO: Loop ou passo errado


SOLU√á√ÉO OBRIGAT√ìRIA:
Op√ß√£o A: Preencher todos os entao_ir_para
json"decisoes": [
  {
    "numero": 1,
    "se_cliente_falar": "Quero saber sobre a Plataforma",
    "entao_ir_para": "PASSO A",  // ‚úÖ PREENCHIDO
    "prioridade": "alta"
  }
]
```

#### Op√ß√£o B: Adicionar ao prompt:
```
üîß NAVEGA√á√ÉO QUANDO entao_ir_para EST√Å VAZIO:

SE decis√£o match E entao_ir_para = "":
  1. Consultar array conexoes[]
  2. Encontrar conex√£o onde origem = node atual
  3. Usar destino dessa conex√£o como pr√≥ximo passo
  4. Mapear node_id para passo_id usando _metadata.id_original_node

EXEMPLO:
Decis√£o 1 match ‚Üí origem: "2" ‚Üí destino: "3"
‚Üí Buscar passo onde _metadata.id_original_node = "3"
‚Üí IR PARA esse passo_id
Sem isso, o agente NUNCA saber√° para onde ir com certeza.

2. FALTA DE INSTRU√á√ÉO PARA M√öLTIPLAS VARIA√á√ïES NO MESMO PASSO üî¥
Cen√°rio do Flow 1 (Ticlin):
json"PASSO B": {
  "variacoes": [
    "B1": "Explicar valor da plataforma",     // send_message
    "B2": "Perguntar sobre reuni√£o/plataforma", // ask_question
    "B3": "Explicar como funciona"             // send_message
  ]
}
```

**PERGUNTA: Como o agente escolhe entre B1, B2 e B3?**

O prompt diz:
```
### 6Ô∏è‚É£ USAR VARIA√á√ïES
Escolher varia√ß√£o baseada em:
- Contexto da conversa
- Decis√£o do passo anterior
- Condi√ß√µes espec√≠ficas do Flow
```

**Isso √© MUITO vago!** O agente vai **adivinhar**.

---

**SOLU√á√ÉO:**

#### Adicionar ao prompt:
```
üéØ COMO ESCOLHER ENTRE M√öLTIPLAS VARIA√á√ïES:

REGRA DE PRIORIDADE:
1. SE decis√£o anterior especifica variacao_id ‚Üí usar essa
2. SE validacao ativa E match ‚Üí usar varia√ß√£o de fallback
3. SE apenas 1 varia√ß√£o no passo ‚Üí usar essa
4. SE m√∫ltiplas varia√ß√µes:
   a) Verificar tipo_tecnico de cada uma
   b) Escolher baseado no objetivo do passo anterior:
      - Se √∫ltimo passo foi pergunta ‚Üí pr√≥ximo geralmente √© send_message
      - Se √∫ltimo passo foi send_message ‚Üí pr√≥ximo geralmente √© ask_question
   c) Ler variacao_nome para entender qual √© mais apropriada

EXEMPLO PR√ÅTICO:
PASSO B tem:
- B1 (send_message): "Explicar valor"
- B2 (ask_question): "Perguntar reuni√£o"
- B3 (send_message): "Explicar funcionamento"

Contexto: Cliente perguntou "quanto custa?"
‚Üí Escolher B1 (responde diretamente sobre valor)

Contexto: Cliente disse "quero conhecer melhor"
‚Üí Escolher B2 (pergunta sobre reuni√£o ou acesso direto)
```

---

### 3. **VALIDA√á√ÉO SEM ENFORCEMENT** üü°

O prompt tem:
```
### ETAPA 3: MAPEAMENTO DO ESTADO ATUAL
ANTES DE QUALQUER RESPOSTA, determine:
ESTADO_ATUAL = { ... }
```

**Problema:** Isso √© uma **instru√ß√£o**, n√£o uma **estrutura for√ßada**.

**O que acontece:**
- LLM pode ignorar isso sob press√£o
- Em conversas longas, o "antes de qualquer resposta" √© esquecido
- N√£o h√° verifica√ß√£o de que o ESTADO_ATUAL foi realmente preenchido

---

**SOLU√á√ÉO:**

#### Adicionar checkpoint obrigat√≥rio:
```
‚ö†Ô∏è CHECKPOINT OBRIGAT√ìRIO ANTES DE RESPONDER:

VOC√ä DEVE RETORNAR 2 JSONs:

1Ô∏è‚É£ PRIMEIRO: Estado atual (para valida√ß√£o interna)
{
  "checkpoint": {
    "passo_atual": "PASSO A",
    "variacao_atual": "A1",
    "ultima_pergunta_agente": "Como funciona seu neg√≥cio?",
    "lead_respondeu": true,
    "validacoes_ok": true,
    "proximo_passo": "PASSO B"
  }
}

2Ô∏è‚É£ DEPOIS: Resposta final
{
  "response": "...",
  "current_step_id": "PASSO B",
  "current_variation_id": "B1"
}
Alternativa mais simples:

Adicionar campos de debug no JSON de resposta:

json{
  "response": "...",
  "current_step_id": "PASSO B",
  "current_variation_id": "B1",
  "_debug": {
    "ultima_acao_agente": "pergunta sobre neg√≥cio",
    "lead_respondeu": true,
    "decisao_match": "decisao_1",
    "validacoes_executadas": ["nome_verificado"]
  }
}
```

---

### 4. **FALTA DE TRATAMENTO PARA MENSAGENS FORA DO FLUXO** üü°

**Cen√°rio:**
- Agente est√° no PASSO B (perguntando sobre reuni√£o)
- Cliente responde: "Quanto custa?"
- Isso n√£o est√° em nenhuma decis√£o do PASSO B
- **O que acontece?**

O prompt diz:
```
DETEC√á√ÉO DE PERGUNTAS DO CLIENTE (PRIORIDADE M√ÅXIMA):
‚úÖ SE cliente fez pergunta espec√≠fica ‚Üí RESPONDER ANTES de continuar Flow
```

**Mas n√£o diz O QUE FAZER DEPOIS:**
- Responde a pergunta e **volta para PASSO B**?
- Responde e **avan√ßa para PASSO C**?
- Responde e **pergunta novamente** sobre reuni√£o?

---

**SOLU√á√ÉO:**
```
üîÄ PROTOCOLO PARA MENSAGENS FORA DO FLUXO:

SE mensagem do lead N√ÉO match com nenhuma decis√£o do passo atual:

1Ô∏è‚É£ VERIFICAR: √â pergunta direta?
   ‚Üí SIM: Responder baseado em FAQ/company_info/tools

2Ô∏è‚É£ AP√ìS RESPONDER:
   ‚Üí RETORNAR ao mesmo passo e varia√ß√£o
   ‚Üí Incluir no response: "Respondendo sua pergunta... [resposta]. Voltando: [repetir √∫ltima pergunta do flow]"

3Ô∏è‚É£ SE lead insiste em assunto fora do fluxo (2+ vezes):
   ‚Üí Oferecer: "Vejo que voc√™ tem d√∫vidas sobre [X]. Prefere que eu te transfira para um especialista?"

EXEMPLO:
Passo atual: PASSO B (perguntando sobre reuni√£o)
Lead: "Voc√™s t√™m desconto?"

Response:
"Nossos planos come√ßam em R$ 399/m√™s. N√£o temos desconto no momento.

Voltando: voc√™ prefere reunir com nosso time comercial ou acessar a plataforma direto?"

current_step_id: "PASSO B"  (mant√©m mesmo passo)
current_variation_id: "B2"   (mant√©m mesma varia√ß√£o)
```

---

### 5. **AMBIGUIDADE EM `decisoes_diretas[]`** üü°

O prompt define:
```
B) decisoes_diretas[] - AUTOM√ÅTICO (N√ÉO AGUARDA)

{
  "comportamento": "ENVIAR_E_PROSSEGUIR",
  "entao_ir_para": "PASSO B"
}

Como funciona:
1. Enviar mensagens do bloco
2. Executar decis√£o IMEDIATAMENTE
3. IR PARA pr√≥ximo passo SEM aguardar resposta
```

**Pergunta:** Se n√£o aguarda resposta, como o agente gera 2 respostas seguidas?

**Exemplo:**
- PASSO A: send_message com decisao_direta ‚Üí PASSO B
- Agente deveria:
  1. Enviar mensagem do PASSO A
  2. IMEDIATAMENTE executar PASSO B
  3. Retornar 2 mensagens em 1 response?

**Isso n√£o est√° claro.**

---

**SOLU√á√ÉO:**
```
üìå DECIS√ïES DIRETAS: COMPORTAMENTO DETALHADO

decisoes_diretas[] = Decis√£o que N√ÉO depende de resposta do lead

QUANDO USAR:
- send_message seguido de outro send_message
- Valida√ß√µes autom√°ticas (validate_document ‚Üí send_message)
- Movimenta√ß√µes de funil (move_lead ‚Üí send_message)

COMO FUNCIONAR:

OP√á√ÉO A: Executar tudo em 1 response
{
  "response": "[Mensagem PASSO A]\n\n[Mensagem PASSO B]",
  "current_step_id": "PASSO B",  // J√° avan√ßou
  "current_variation_id": "B1"
}

OP√á√ÉO B: Executar apenas 1 passo por vez (recomendado)
{
  "response": "[Mensagem PASSO A]",
  "current_step_id": "PASSO A",
  "current_variation_id": "A1",
  "_next_auto": "PASSO B"  // Sistema cuida de avan√ßar automaticamente
}
```

---

### 6. **FERRAMENTA `search_product` SEM EXEMPLO DE FALHA** üü°

O prompt explica bem QUANDO usar a tool, mas n√£o diz O QUE FAZER se a tool falhar:

**Cen√°rios n√£o cobertos:**
1. Tool retorna erro (API down)
2. Tool n√£o encontra produto mencionado pelo lead
3. Tool retorna produto mas sem pre√ßo
4. Tool retorna m√∫ltiplos produtos (qual escolher?)

---

**SOLU√á√ÉO:**
```
üîß TRATAMENTO DE ERROS DA TOOL search_product:

1Ô∏è‚É£ TOOL RETORNA ERRO (API down):
{
  "response": "Desculpe, estou com dificuldade para consultar os produtos no momento. Posso transferir voc√™ para um atendente que tem acesso direto ao cat√°logo?",
  "current_step_id": "[manter atual]",
  "current_variation_id": "[manter atual]"
}

2Ô∏è‚É£ PRODUTO N√ÉO ENCONTRADO:
{
  "response": "N√£o encontrei informa√ß√µes sobre [PRODUTO] no momento. Posso te ajudar com algo mais ou prefere falar com um especialista?",
  "current_step_id": "[manter atual]",
  "current_variation_id": "[manter atual]"
}

3Ô∏è‚É£ PRODUTO SEM PRE√áO:
{
  "response": "Encontrei o [PRODUTO]: [descri√ß√£o]. O pre√ßo preciso deve ser consultado com nosso time comercial. Gostaria que eu te conecte com eles?",
  "current_step_id": "[manter atual]",
  "current_variation_id": "[manter atual]"
}

4Ô∏è‚É£ M√öLTIPLOS PRODUTOS (>3 resultados):
{
  "response": "Encontrei alguns produtos relacionados:\n‚Ä¢ [Produto 1] - R$ X\n‚Ä¢ [Produto 2] - R$ Y\n‚Ä¢ [Produto 3] - R$ Z\n\nQual deles te interessa mais?",
  "current_step_id": "[manter atual]",
  "current_variation_id": "[manter atual]"
}

7. FALTA DE INSTRU√á√ÉO PARA CAMPOS DIN√ÇMICOS üü°
O prompt menciona:
json"mensagem_principal": {
  "com_nome": "Perfeito [NOME]! ...",
  "sem_nome": "Vou te explicar..."
}
```

**Mas n√£o explica:**
- Como substituir `[NOME]`?
- De onde vem o nome? (`$json.lead.name`?)
- O que fazer se `lead.name` for `null` ou `undefined`?
- Outros placeholders poss√≠veis?

---

**SOLU√á√ÉO:**
```
üî§ SUBSTITUI√á√ÉO DE PLACEHOLDERS DIN√ÇMICOS:

PLACEHOLDERS DISPON√çVEIS:
- [NOME] ou {{nome}} ‚Üí lead.name
- [TELEFONE] ou {{telefone}} ‚Üí lead.phone
- [EMPRESA] ou {{empresa}} ‚Üí company_info.name
- [AGENTE] ou {{agente}} ‚Üí agent.name

REGRAS:
1. SEMPRE verificar se vari√°vel existe antes de usar
2. SE vari√°vel NULL/UNDEFINED:
   - Usar vers√£o "sem_nome" se dispon√≠vel
   - OU omitir placeholder da mensagem

EXEMPLO:
Mensagem: "Ol√° [NOME]! Como posso ajudar?"
lead.name = "Jo√£o" ‚Üí "Ol√° Jo√£o! Como posso ajudar?"
lead.name = null ‚Üí "Ol√°! Como posso ajudar?"

SE mensagem tem {com_nome, sem_nome}:
- lead.name existe ‚Üí usar com_nome
- lead.name null ‚Üí usar sem_nome
```

---

## üü¢ PONTOS FORTES ADICIONAIS

### 8. **Tabela de Mapeamento de Blocos** ‚≠ê
```
| tipo_tecnico | Nome | Fun√ß√£o Principal |
|--------------|------|------------------|
| start | In√≠cio | Apresenta√ß√£o inicial |
| ask_question | Fazer Pergunta | Perguntar e aguardar |
Excelente! Refer√™ncia r√°pida para o agente.

9. Protocolo Anti-Loop Bem Pensado ‚≠ê
javascript1. LER todo o hist√≥rico de mensagens cronologicamente
2. IDENTIFICAR √∫ltima a√ß√£o do agente
3. IDENTIFICAR √∫ltima pergunta feita pelo agente
4. VERIFICAR se a mensagem atual do lead responde essa pergunta
```

**Muito bom!** Mas precisa de refor√ßo (veja solu√ß√£o no item 3).

---

### 10. **Separa√ß√£o Clara: Conversa√ß√£o vs. Tools** ‚≠ê
```
| update_lead_data | ‚úÖ Sim | tool_execution |
| move_lead_in_funnel | ‚úÖ Sim | tool_execution_then_send |
Perfeito! O agente sabe que esses blocos s√£o executados por outro sistema.

üìä RESUMO FINAL
Estrutura Geral: 8.5/10
AspectoNotaComent√°rioAn√°lise Contextual9/10Sistema de 4 etapas excelenteControle de Estado7/10Bom, mas precisa enforcementNavega√ß√£o no Flow4/10‚ö†Ô∏è CR√çTICO: entao_ir_para vazio causa ambiguidadePreven√ß√£o de Loops8/10Regras bem definidasTratamento de Exce√ß√µes5/10Falta tratamento de falhas (tool errors, mensagens fora do fluxo)Clareza de Instru√ß√µes9/10Muito bem escrito e organizadoOutput Estruturado10/10JSON com tracking perfeitoEscolha de Varia√ß√µes3/10‚ö†Ô∏è CR√çTICO: N√£o explica como escolher entre m√∫ltiplas varia√ß√µes

üéØ O AGENTE VAI CONSEGUIR ATENDIMENTO DE ALTO N√çVEL?
‚úÖ SIM, SE:

Todos os entao_ir_para nos flows forem preenchidos
Houver apenas 1 varia√ß√£o por passo (ou decis√µes que especifiquem qual varia√ß√£o usar)
Os flows forem testados extensivamente

‚ö†Ô∏è TALVEZ, COM FALHAS, SE:

entao_ir_para continuar vazio (vai inferir e errar 30-40% das vezes)
M√∫ltiplas varia√ß√µes sem crit√©rio claro (vai escolher errado √†s vezes)
Cliente enviar mensagens fora do contexto (vai se perder)

‚ùå N√ÉO, SE:

Flows complexos com muitos caminhos paralelos
Clientes muito "bagun√ßados" nas respostas
Ferramentas falharem sem tratamento de erro


üîß PRIORIDADES DE CORRE√á√ÉO
üî¥ URGENTE (Quebra o sistema):

Preencher todos os entao_ir_para ou adicionar l√≥gica de fallback para conex√µes
Definir como escolher entre m√∫ltiplas varia√ß√µes do mesmo passo

üü° IMPORTANTE (Melhora significativa):

Adicionar tratamento de mensagens fora do fluxo
Adicionar tratamento de erros de tools
Refor√ßar checkpoint de estado (debug fields)

üü¢ RECOMENDADO (Polish):

Documentar substitui√ß√£o de placeholders
Exemplos de decisoes_diretas em a√ß√£o
Testar com flows reais e documentar edge cases


üí° RECOMENDA√á√ÉO FINAL
Voc√™ tem 80% de um prompt EXCELENTE.
Os 20% faltantes s√£o cr√≠ticos e v√£o causar falhas em produ√ß√£o se n√£o corrigidos.
Priorize:

Resolver ambiguidade de entao_ir_para
Definir crit√©rio de escolha de varia√ß√µes
Testar extensivamente com flows reais

Com essas corre√ß√µes, esse prompt ser√° ALTO N√çVEL.

MENSAGEM QUE EU ENVIEI A IA:
Vou responder todos os pontos fracos, pra voce entendre, e focarmos no que podemos melhorar na ESTRUTUAR dos blocos para ser salvo no fluxo para gerar melhor desempenho.

Primeiro, vou responder.
Segundo, vou dar exemplo de situa√ß√µes.

1 - O entao_ir_para" nunca vai vazio, pode levar em considera√ß√£o se estiver preenchido perfeito. 
2 - sOBRE A falta de instru√ß√£o. O agente deve pegar a varia√ß√£o e checkar nas mensagens (historico) para identificar qual varia√ß√£o. N√≥s pdemos melhorar com o usu√°rio explicando cada varia√£o, certo?
3 - Me explique melhor sua ideia de Debug para perguntas ou respostas que mencionou.
4 -  Sobre o [NOME] j√° existe instru√ß√£o geral no prompt para como o agetne deve usar.

Agora foque em 2 quest√µes, em seguida irei dar exemplo reais do que pode acontecer, e voce me dir√° como a IA (igual a voce) reagiria.

1 - N√≥s precisamos ter um fallback em cada bloco para que o agente fa√ßa se vier algo diferente?
2 - O falback pode ir apenas em bloco de pergunta caso a resposta seja outra?
3 - O Usu√°io n√£o vai saber  o que √© fallback, ele √© leigo, e o construtor de fluxo √© pensado de forma simples para qualque rusu√°ri conseguir criar, como ele poderia preencher o fallback ?
4 - A mais importante, se o fluxo est√° desenhado perfeitamte, Passo A, B, C, D, E, e o lead envia uma mensagem direta, que iria ter  a pergunta do agente no passo D. 
Com esssa estrutura de fluxo,m o agente j√° vai direto ao passo D, ou ele inicia do A? O que me diz?

MENSAGEM QUE A IA RESPONDEU:
üéØ RESPOSTAS E AN√ÅLISE FOCADA
Vou responder suas quest√µes de forma objetiva e depois simular cen√°rios reais.

üìã RESPOSTAS √ÄS SUAS QUEST√ïES
1. Fallback em cada bloco - Necess√°rio?
Resposta: DEPENDE do tipo de bloco.
‚úÖ Blocos que PRECISAM de fallback:

ask_question - Se resposta n√£o match com nenhuma decis√£o
request_document - Se lead n√£o envia documento
validate_document - Se documento inv√°lido

‚ùå Blocos que N√ÉO precisam de fallback:

send_message - Apenas envia, n√£o espera resposta espec√≠fica
send_link - Apenas envia, n√£o espera valida√ß√£o
end_conversation - Terminal, n√£o h√° "pr√≥ximo passo"

Conclus√£o: Fallback deve ser condicional ao tipo de bloco, n√£o universal.

2. Fallback apenas em blocos de pergunta?
Resposta: SIM, mas com nuance.
Blocos que aguardam resposta espec√≠fica precisam de fallback:

ask_question ‚úÖ
request_document ‚úÖ (aguarda upload)
Qualquer bloco com decisoes[] que aguardam match

Blocos que N√ÉO aguardam resposta n√£o precisam:

send_message ‚ùå
send_link ‚ùå
send_media ‚ùå


3. Como usu√°rio leigo preencheria fallback?
Proposta: Sistema de "E se n√£o entender?"
Ao inv√©s de chamar de "fallback" (termo t√©cnico), usar linguagem simples:
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ üìù Fazer Pergunta                   ‚îÇ
‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§
‚îÇ Pergunta:                           ‚îÇ
‚îÇ "Voc√™ cancelou ou est√° pagando o    ‚îÇ
‚îÇ  cons√≥rcio?"                        ‚îÇ
‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§
‚îÇ ‚úÖ Se responder "Cancelei"          ‚îÇ
‚îÇ    ‚Üí Ir para: PASSO B               ‚îÇ
‚îÇ                                     ‚îÇ
‚îÇ ‚úÖ Se responder "Estou pagando"     ‚îÇ
‚îÇ    ‚Üí Ir para: PASSO C               ‚îÇ
‚îÇ                                     ‚îÇ
‚îÇ ‚ùì E se n√£o entender a resposta?    ‚îÇ  ‚Üê FALLBACK SEM USAR TERMO T√âCNICO
‚îÇ    [x] Tentar reformular (m√°x 2x)  ‚îÇ
‚îÇ    [ ] Transferir para humano       ‚îÇ
‚îÇ    [ ] Pular para: [escolher passo] ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
Estrutura JSON correspondente:
json{
  "variacao_id": "A1",
  "instrucoes": {
    "pergunta": "Voc√™ cancelou ou est√° pagando o cons√≥rcio?",
    "decisoes": [
      {
        "se_cliente_falar": "cancelei",
        "entao_ir_para": "PASSO B"
      },
      {
        "se_cliente_falar": "estou pagando",
        "entao_ir_para": "PASSO C"
      }
    ]
  },
  "fallback": {
    "acao": "reformular",
    "tentativas_maximas": 2,
    "mensagem_reformulada": "Deixa eu perguntar de outro jeito: voc√™ ainda tem um cons√≥rcio ativo ou j√° cancelou?",
    "se_exceder_tentativas": {
      "acao": "transferir_humano",
      "mensagem": "Vou te conectar com um especialista para te ajudar melhor"
    }
  }
}
```

---

### **4. PERGUNTA MAIS IMPORTANTE: Lead pula etapas?**

**Cen√°rio:**
- Flow desenhado: A ‚Üí B ‚Üí C ‚Üí D ‚Üí E
- PASSO D tem pergunta: "Qual seu e-mail?"
- Lead envia primeira mensagem: "Meu e-mail √© joao@email.com"

**O que acontece?**

#### üî¥ **Comportamento ERRADO (sem intelig√™ncia):**
```
Agente: "Ol√°! Sou a Amanda da SolucionaCon" (PASSO A - IN√çCIO)
Lead: "Meu e-mail √© joao@email.com"
Agente: "Como funciona seu neg√≥cio?" (PASSO B)
```
‚ùå Ignorou o e-mail fornecido

---

#### ‚úÖ **Comportamento CORRETO (com intelig√™ncia):**

**OP√á√ÉO 1: Captura e segue fluxo**
```
Lead: "Meu e-mail √© joao@email.com"
Agente: 
{
  "response": "Oi Jo√£o! Vi que voc√™ j√° me passou seu e-mail (joao@email.com), vou guardar aqui.\n\nSou a Amanda da SolucionaCon. Como posso te ajudar?",
  "current_step_id": "IN√çCIO",
  "current_variation_id": "IN√çCIO",
  "_captured_data": {
    "email": "joao@email.com",
    "skip_step": "PASSO D"  // Sistema sabe que pode pular PASSO D depois
  }
}
```

**OP√á√ÉO 2: Pula direto para contexto relevante**
```
Lead: "Quero saber sobre recupera√ß√£o de cons√≥rcio cancelado"
Agente:
{
  "response": "Entendi! Voc√™ cancelou um cons√≥rcio e quer saber sobre recupera√ß√£o. Perfeito, posso te ajudar com isso.\n\nPreciso de algumas informa√ß√µes: voc√™ tem o extrato do cons√≥rcio em m√£os?",
  "current_step_id": "PASSO C",  // Pulou IN√çCIO e PASSO A e B
  "current_variation_id": "C1",
  "_reasoning": "Lead j√° indicou situa√ß√£o (cancelado), pulando perguntas iniciais"
}
```

---

## üß† COMO A IA DEVERIA REAGIR?

### **PRINC√çPIO: An√°lise de Inten√ß√£o vs. Fluxo Linear**

**A IA deve:**
1. ‚úÖ Analisar o conte√∫do da mensagem do lead
2. ‚úÖ Identificar qual PASSO do flow aquela informa√ß√£o pertence
3. ‚úÖ Capturar a informa√ß√£o
4. ‚úÖ Decidir:
   - Come√ßar do IN√çCIO e pular etapas depois?
   - OU pular direto para o passo relevante?

---

## üé¨ EXEMPLOS REAIS - COMO A IA (COMO EU) REAGIRIA

### **CEN√ÅRIO 1: Lead envia informa√ß√£o do meio do fluxo**

**FLOW:**
```
IN√çCIO ‚Üí PASSO A (pergunta nome) ‚Üí PASSO B (pergunta situa√ß√£o cons√≥rcio) ‚Üí PASSO C (solicita extrato)
```

**Intera√ß√£o:**
```
Lead (primeira mensagem): "Oi, cancelei meu cons√≥rcio ano passado"
Como EU (IA Claude) reagiria com o prompt atual:
json{
  "response": "Ol√°! Sou a Amanda da SolucionaCon. Vi que voc√™ cancelou seu cons√≥rcio ano passado, vou te ajudar com isso.\n\nQual seu nome?",
  "current_step_id": "IN√çCIO",
  "current_variation_id": "IN√çCIO",
  "_internal_note": "Capturei situa√ß√£o='cancelado', mas preciso seguir fluxo desde in√≠cio para coletar informa√ß√µes b√°sicas primeiro"
}
```

**Racioc√≠nio:**
- Capturei: `situacao_consorcio = "cancelado"`
- Guardei mentalmente que PASSO B j√° foi respondido
- MAS in√≠cio do IN√çCIO porque:
  - Flow especifica apresenta√ß√£o inicial
  - Ainda falta: nome, outras informa√ß√µes b√°sicas
  - PASSO B ser√° PULADO depois (usando valida√ß√£o)

---

### **CEN√ÅRIO 2: Lead envia informa√ß√£o muito espec√≠fica**

**FLOW:**
```
IN√çCIO ‚Üí PASSO A ‚Üí PASSO B ‚Üí PASSO C ‚Üí PASSO D (pergunta e-mail) ‚Üí PASSO E (envia link)
```

**Intera√ß√£o:**
```
Lead (primeira mensagem): "Meu e-mail √© joao@gmail.com para cadastro"
Como EU reagiria:
json{
  "response": "Oi Jo√£o! Recebi seu e-mail (joao@gmail.com) para cadastro.\n\nSou a Amanda da SolucionaCon. Antes de te enviar o link, preciso entender: voc√™ cancelou, parou de pagar ou est√° pagando um cons√≥rcio?",
  "current_step_id": "PASSO B",
  "current_variation_id": "B1",
  "_internal_note": "Pulei IN√çCIO e PASSO A porque lead j√° indicou inten√ß√£o (cadastro). Capturei email. Indo direto para qualifica√ß√£o no PASSO B"
}
```

**Racioc√≠nio:**
- Lead mencionou "cadastro" ‚Üí inten√ß√£o clara
- Lead forneceu e-mail ‚Üí PASSO D pr√©-respondido
- Faz sentido pular apresenta√ß√£o gen√©rica e ir direto ao ponto
- MAS ainda preciso qualificar (PASSO B) antes de enviar link

---

### **CEN√ÅRIO 3: Lead pergunta algo que seria respondido depois**

**FLOW:**
```
IN√çCIO ‚Üí PASSO A ‚Üí PASSO B ‚Üí PASSO C (explica pre√ßos) ‚Üí PASSO D
```

**Intera√ß√£o:**
```
Lead (primeira mensagem): "Quanto custa o servi√ßo de voc√™s?"
Como EU reagiria:
json{
  "response": "Ol√°! Nosso servi√ßo de recupera√ß√£o de cons√≥rcio tem an√°lise gratuita. Se conseguirmos recuperar seu dinheiro, cobramos 30% apenas do valor recuperado. Ou seja, voc√™ s√≥ paga se receber.\n\nComo funciona seu caso: voc√™ cancelou, parou de pagar ou est√° pagando um cons√≥rcio?",
  "current_step_id": "PASSO B",
  "current_variation_id": "B1",
  "_internal_note": "Respondi pergunta direta sobre pre√ßo (PASSO C), mas voltei para qualifica√ß√£o necess√°ria (PASSO B) antes de avan√ßar"
}
Racioc√≠nio:

Pergunta direta merece resposta direta (prioridade m√°xima)
MAS depois volto para fluxo l√≥gico
N√£o ignoro a pergunta, mas tamb√©m n√£o pulo etapas cr√≠ticas de qualifica√ß√£o


üîß O QUE FALTA NA ESTRUTURA DOS BLOCOS?
Com base nos cen√°rios acima, identifiquei melhorias cruciais:

MELHORIA 1: Campo etapa_pode_ser_pulada
json{
  "passo_id": "PASSO A",
  "passo_nome": "Perguntar Nome",
  "pode_ser_pulada": true,  // ‚Üê NOVO CAMPO
  "condicao_para_pular": "se nome j√° fornecido no contexto",
  "variacoes": [...]
}
Por qu√™?

Alguns passos s√£o OBRIGAT√ìRIOS (qualifica√ß√£o)
Outros s√£o OPCIONAIS (nome, dados complementares)
Se lead j√° forneceu, IA pode pular


MELHORIA 2: Campo captura_automatica em decis√µes
json{
  "decisoes": [
    {
      "numero": 1,
      "se_cliente_falar": "cancelei",
      "entao_ir_para": "PASSO B",
      "captura_automatica": {  // ‚Üê NOVO
        "campo": "situacao_consorcio",
        "valor": "cancelado",
        "acao_se_ja_fornecido": "pular_pergunta"
      }
    }
  ]
}
Por qu√™?

Lead pode fornecer informa√ß√£o ANTES da pergunta
Sistema precisa saber COMO capturar
Sistema precisa saber O QUE FAZER se j√° tiver a info


MELHORIA 3: Prioridade de passos
json{
  "passo_id": "IN√çCIO",
  "prioridade": 1,  // ‚Üê NOVO: 1 = sempre executar, 5 = pode pular
  "tipo": "apresentacao"
}
json{
  "passo_id": "PASSO B",
  "prioridade": 1,  // CR√çTICO - qualifica√ß√£o
  "tipo": "qualificacao"
}
json{
  "passo_id": "PASSO A",
  "prioridade": 3,  // OPCIONAL - dados complementares
  "tipo": "coleta_dados"
}
Tipos de prioridade:

1 = CR√çTICO (nunca pular)
2 = IMPORTANTE (pular s√≥ se info j√° fornecida)
3 = DESEJ√ÅVEL (pode pular se contexto permitir)
4 = OPCIONAL (pular se acelerar conversa)
5 = BONUS (pular se lead impaciente)


MELHORIA 4: Fallback estruturado
json{
  "variacao_id": "A1",
  "instrucoes": {
    "pergunta": "Voc√™ cancelou ou est√° pagando?",
    "decisoes": [...]
  },
  "fallback": {
    "se_nao_entender": {
      "acao": "reformular",
      "tentativas_maximas": 2,
      "mensagem_alternativa": "Deixa eu perguntar diferente: voc√™ tem um cons√≥rcio ativo agora?",
      "se_falhar_novamente": {
        "acao": "transferir_humano",
        "mensagem": "Vou te conectar com um especialista"
      }
    },
    "se_resposta_fora_contexto": {
      "acao": "responder_e_voltar",
      "mensagem_template": "Entendi sua pergunta sobre [ASSUNTO]. [RESPOSTA_FAQ]. Voltando: [REPETIR_PERGUNTA]"
    }
  }
}
Por qu√™?

Trata 2 situa√ß√µes diferentes:

Lead n√£o entendeu a pergunta
Lead respondeu algo fora do contexto




MELHORIA 5: Campo informacoes_necessarias no passo
json{
  "passo_id": "PASSO C",
  "passo_nome": "Solicitar Extrato",
  "informacoes_necessarias": {  // ‚Üê NOVO
    "obrigatorias": ["situacao_consorcio", "nome"],
    "opcionais": ["email", "telefone"]
  },
  "acao_se_falta_obrigatoria": {
    "voltar_para": "PASSO B",
    "mensagem": "Antes de solicitar o extrato, preciso confirmar sua situa√ß√£o"
  }
}
Por qu√™?

Alguns passos dependem de informa√ß√µes anteriores
Se lead pular etapas, sistema sabe o que est√° faltando
Pode voltar para coletar info faltante


üéØ ESTRUTURA FINAL RECOMENDADA PARA BLOCOS
json{
  "passo_id": "PASSO A",
  "passo_nome": "Qualificar Lead",
  "condicao": "Ap√≥s apresenta√ß√£o inicial",
  
  // ‚úÖ NOVO: Controle de fluxo inteligente
  "prioridade": 1,  // 1-5 (1=cr√≠tico, 5=opcional)
  "pode_ser_pulada": false,
  "tipo": "qualificacao",
  
  // ‚úÖ NOVO: Pr√©-requisitos
  "informacoes_necessarias": {
    "obrigatorias": ["lead_ativo"],
    "opcionais": []
  },
  
  "variacoes": [
    {
      "variacao_id": "A1",
      "variacao_nome": "Perguntar situa√ß√£o cons√≥rcio",
      
      "validacao": {
        "verificar_antes_de_executar": true,
        "verificar_no_contexto": "situacao_consorcio",
        "se_ja_feito": {
          "pular_para": "PASSO B",
          "motivo": "Situa√ß√£o j√° identificada"
        }
      },
      
      "instrucoes": {
        "objetivo": "Identificar se cancelou, parou ou est√° pagando",
        "o_que_fazer": "fazer_pergunta_e_aguardar_resposta",
        "pergunta": "Voc√™ cancelou, parou de pagar ou est√° pagando o cons√≥rcio?",
        
        "decisoes": [
          {
            "numero": 1,
            "se_cliente_falar": "cancelei",
            "entao_ir_para": "PASSO B",
            "prioridade": "alta",
            
            // ‚úÖ NOVO: Captura autom√°tica
            "captura_automatica": {
              "campo": "situacao_consorcio",
              "valor": "cancelado",
              "salvar_em": "lead_data"
            }
          }
        ]
      },
      
      // ‚úÖ NOVO: Fallback estruturado
      "fallback": {
        "se_nao_entender": {
          "acao": "reformular",
          "tentativas_maximas": 2,
          "mensagem_alternativa": "Deixa reformular: voc√™ tem um cons√≥rcio ativo agora?",
          "se_falhar": {
            "acao": "transferir_humano",
            "mensagem": "Vou te conectar com especialista"
          }
        },
        "se_resposta_fora_contexto": {
          "acao": "responder_e_voltar",
          "usar": "faq_ou_company_info"
        }
      },
      
      "controle": {
        "tentativas_maximas": 3,
        "campo_obrigatorio": true
      }
    }
  ]
}

üìä RESUMO: O QUE ADICIONAR NA ESTRUTURA?
Campo NovoOndePara qu√™prioridade (1-5)passoDefinir se passo pode ser puladopode_ser_puladapassoBoolean simplestipopassoapresentacao, qualificacao, coleta_dados, finalizacaoinformacoes_necessariaspassoPr√©-requisitos do passocaptura_automaticadecisoes[]Capturar info antes da pergunta formalfallback.se_nao_entendervariacaoSe resposta n√£o matchfallback.se_resposta_fora_contextovariacaoSe lead pergunta outra coisa



mensagem que eu enviei a IA:
Sim, por favor Mas antes planeje adicionar mais um bloco.
Vou te contextualizar com um exemplo, deopis vou te falar o bloco que preciso.

Alguns usu√°rios utilizadm o agente para atendimeneto ao cliente em um mercado, e o cliente precisa fazer um epdido de v√°rios prodtuos.
O agente vai precsiar ir adicionando a escolha do cliente h√° uma lista (tool do supabase no agetne chamada add_list ) para ao final ele confirmar com o lead tudo que ele pediu para seguir em frente.
Atualmente ele n√£o adiciona, e o contexto de mensagens, s√≥ tr√°s as ultimas 20 mensagens, ent√£o ele se esquece do que o clietne j√° selecionou pois conervou amis coisas depois.

Seria interessante ter um bloco, para ser usado, com nome intuitivo, para o usu√°rio adicionar, e neeste bloco o Agente ir√° chamar a tool e adicionar a lsita de pedido.

Tamb√©m poder√° ter um segundo blcoo para Confirmar o pedido, assim ele busac tudo que o cliente escolheu, e  confirma.

Analise e me responda com um planejamento antes de faer.

MENSAGGEM QUE A IA RESPONDEU:

üìã PLANEJAMENTO: NOVOS BLOCOS DE GERENCIAMENTO DE LISTA

üéØ CONTEXTO DO PROBLEMA
Cen√°rio Real:

Mercado/restaurante com cat√°logo de produtos
Cliente quer fazer pedido com m√∫ltiplos itens
Conversa longa (>20 mensagens) ‚Üí contexto limitado
Agente "esquece" itens anteriores
Sem lista persistente ‚Üí pedidos incompletos

Necessidade:

Persistir escolhas do cliente em lista externa (Supabase)
Adicionar itens conforme cliente escolhe
Recuperar lista completa para confirma√ß√£o final
Interface intuitiva para usu√°rio leigo configurar


üß© SOLU√á√ÉO: 2 NOVOS BLOCOS
BLOCO 16: add_to_list
Nome Intuitivo: "Adicionar Item ao Pedido"
BLOCO 17: confirm_list
Nome Intuitivo: "Confirmar Pedido Completo"

üìä AN√ÅLISE DETALHADA
BLOCO 16: ADICIONAR ITEM AO PEDIDO
Objetivo:
Capturar escolha do cliente e adicionar √† lista persistente via tool add_list
Comportamento:
Cliente: "Quero 2kg de tomate"
‚Üì
Agente identifica: produto="tomate", quantidade="2kg"
‚Üì
Chama tool: add_list(produto, quantidade)
‚Üì
Confirma: "Adicionei 2kg de tomate ao seu pedido! ‚úÖ"
‚Üì
Pergunta: "Mais alguma coisa?"
```

#### **Tipo T√©cnico:** `add_to_list`

#### **Caracter√≠sticas:**
- ‚úÖ USA TOOL (chama `add_list` no Supabase)
- ‚úÖ Extrai informa√ß√µes da mensagem do cliente
- ‚úÖ Confirma adi√ß√£o ao cliente
- ‚úÖ Continua fluxo (n√£o finaliza conversa)
- ‚úÖ Pode ser usado M√öLTIPLAS vezes no mesmo flow

---

### **BLOCO 17: CONFIRMAR PEDIDO COMPLETO**

#### **Objetivo:**
Buscar lista completa de itens e apresentar para confirma√ß√£o do cliente

#### **Comportamento:**
```
Cliente: "√â isso, pode finalizar"
‚Üì
Agente chama tool: get_list() ‚Üí retorna todos os itens
‚Üì
Formata lista:
"Seu pedido:
- 2kg de tomate - R$ 12,00
- 1kg de cebola - R$ 6,00
- 500g de alho - R$ 8,00
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
Total: R$ 26,00

Est√° tudo certo?"
‚Üì
Aguarda confirma√ß√£o (Sim/N√£o)
Tipo T√©cnico: confirm_list
Caracter√≠sticas:

‚úÖ USA TOOL (chama get_list no Supabase)
‚úÖ Formata lista de forma clara
‚úÖ Calcula total (se houver pre√ßos)
‚úÖ Aguarda confirma√ß√£o do cliente
‚úÖ Decis√µes: aprovar ‚Üí pr√≥ximo passo | corrigir ‚Üí voltar


üîç QUEST√ïES CR√çTICAS A RESOLVER
1. Como o agente identifica O QUE adicionar?
Op√ß√£o A: Extra√ß√£o autom√°tica (mais inteligente)
json"instrucoes": {
  "objetivo": "Identificar produto e quantidade na mensagem do cliente",
  "o_que_fazer": "adicionar_item_ao_pedido",
  "extrair_da_mensagem": {
    "campos": ["produto", "quantidade", "observacao"],
    "produto": "OBRIGATORIO",
    "quantidade": "OPCIONAL (padr√£o: 1 unidade)",
    "observacao": "OPCIONAL"
  }
}
Exemplo:

Cliente: "Quero 2kg de tomate maduro"
Agente extrai:

produto: "tomate"
quantidade: "2kg"
observacao: "maduro"



Op√ß√£o B: Produto pr√©-definido no bloco (menos flex√≠vel)
json"instrucoes": {
  "produto_fixo": "Plano Premium",
  "perguntar_quantidade": true
}
‚ùì Qual preferir?
‚Üí Op√ß√£o A (extra√ß√£o autom√°tica) √© mais vers√°til

2. Como o agente sabe se a tool add_list existe?
Solu√ß√£o: Adicionar verifica√ß√£o no prompt
json"dados_extras": {
  "modo_ia": "tool_execution",
  "tool_name": "add_list",
  "tool_parameters": {
    "product": "[EXTRAIR_DA_MENSAGEM]",
    "quantity": "[EXTRAIR_DA_MENSAGEM]",
    "notes": "[EXTRAIR_DA_MENSAGEM]"
  },
  "se_tool_nao_disponivel": {
    "acao": "informar_erro",
    "mensagem": "Desculpe, n√£o consigo adicionar ao pedido agora. Vou transferir para atendente."
  }
}

3. Como exibir a lista no BLOCO 17?
Desafios:

Lista pode ter 1 item ou 50 itens
Pode ter ou n√£o ter pre√ßos
Pode ter ou n√£o ter total

Solu√ß√£o: Template flex√≠vel
json"instrucoes": {
  "objetivo": "Buscar e confirmar lista completa de itens",
  "o_que_fazer": "confirmar_pedido_completo",
  
  "formato_exibicao": {
    "com_preco": "‚Ä¢ {quantidade} {produto} - R$ {preco}",
    "sem_preco": "‚Ä¢ {quantidade} {produto}",
    "incluir_total": true,
    "incluir_emojis": true
  },
  
  "mensagem_antes_lista": "Perfeito! Aqui est√° seu pedido:",
  "mensagem_depois_lista": "Est√° tudo certo? Confirma?",
  
  "decisoes": [
    {
      "se_cliente_falar": "sim, confirmo, tudo certo",
      "entao_ir_para": "PASSO_PROXIMO"
    },
    {
      "se_cliente_falar": "n√£o, mudar, corrigir",
      "entao_ir_para": "PASSO_CORRECAO"
    }
  ]
}

4. E se cliente quiser REMOVER item da lista?
Op√ß√£o A: Criar BLOCO 18 separado

remove_from_list - "Remover Item do Pedido"

Op√ß√£o B: Integrar no BLOCO 16
json"instrucoes": {
  "o_que_fazer": "gerenciar_item_pedido",
  "acoes_possiveis": ["adicionar", "remover", "alterar_quantidade"],
  
  "se_cliente_falar_adicionar": "adicionar tool add_list",
  "se_cliente_falar_remover": "remover tool remove_list",
  "se_cliente_falar_alterar": "atualizar tool update_list"
}
```

**‚ùì Qual melhor?**
‚Üí **Op√ß√£o A (bloco separado)** mant√©m simplicidade
‚Üí **Op√ß√£o B (integrado)** √© mais flex√≠vel mas complexo para usu√°rio leigo

**RECOMENDA√á√ÉO:** Come√ßar com Op√ß√£o A (3 blocos simples)

---

### **5. Como usu√°rio leigo configura esses blocos?**

**Interface Visual Proposta:**

#### **BLOCO: Adicionar ao Pedido**
```
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ ‚ûï Adicionar Item ao Pedido             ‚îÇ
‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§
‚îÇ O que fazer quando cliente escolher    ‚îÇ
‚îÇ um produto:                             ‚îÇ
‚îÇ                                         ‚îÇ
‚îÇ ‚úÖ Identificar automaticamente o        ‚îÇ
‚îÇ    produto que o cliente mencionou      ‚îÇ
‚îÇ                                         ‚îÇ
‚îÇ Mensagem de confirma√ß√£o:                ‚îÇ
‚îÇ "Adicionei {produto} ao seu pedido! ‚úÖ" ‚îÇ
‚îÇ                                         ‚îÇ
‚îÇ Perguntar mais itens?                   ‚îÇ
‚îÇ [x] Sim: "Mais alguma coisa?"           ‚îÇ
‚îÇ [ ] N√£o: Seguir para pr√≥ximo passo      ‚îÇ
‚îÇ                                         ‚îÇ
‚îÇ Pr√≥ximo passo:                          ‚îÇ
‚îÇ [Escolher passo ‚ñº]                      ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
```

#### **BLOCO: Confirmar Pedido**
```
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ ‚úÖ Confirmar Pedido Completo            ‚îÇ
‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§
‚îÇ Mensagem antes da lista:                ‚îÇ
‚îÇ "Perfeito! Aqui est√° seu pedido:"       ‚îÇ
‚îÇ                                         ‚îÇ
‚îÇ Formato da lista:                       ‚îÇ
‚îÇ [x] Mostrar quantidade                  ‚îÇ
‚îÇ [x] Mostrar pre√ßo (se dispon√≠vel)       ‚îÇ
‚îÇ [x] Mostrar total                       ‚îÇ
‚îÇ [x] Usar emojis                         ‚îÇ
‚îÇ                                         ‚îÇ
‚îÇ Mensagem ap√≥s lista:                    ‚îÇ
‚îÇ "Est√° tudo certo? Confirma?"            ‚îÇ
‚îÇ                                         ‚îÇ
‚îÇ ‚úÖ Se cliente confirmar:                ‚îÇ
‚îÇ    ‚Üí Ir para: [Escolher passo ‚ñº]        ‚îÇ
‚îÇ                                         ‚îÇ
‚îÇ ‚ùå Se cliente quiser corrigir:          ‚îÇ
‚îÇ    ‚Üí Ir para: [Escolher passo ‚ñº]        ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò

üì¶ ESTRUTURA JSONB PROPOSTA
BLOCO 16: add_to_list
json{
  "variacao_id": "F1",
  "variacao_nome": "Adicionar Produto ao Pedido",
  
  "validacao": {
    "verificar_antes_de_executar": false
  },
  
  "instrucoes": {
    "objetivo": "Identificar produto mencionado e adicionar √† lista de pedidos",
    "o_que_fazer": "adicionar_item_ao_pedido",
    
    "mensagem_principal": "Perfeito! Adicionei {produto} ({quantidade}) ao seu pedido! ‚úÖ",
    
    "perguntar_mais": {
      "ativo": true,
      "mensagem": "Mais alguma coisa?"
    },
    
    "dados_extras": {
      "modo_ia": "tool_execution",
      "tool_name": "add_list",
      
      "extrair_da_mensagem": {
        "campos": ["produto", "quantidade", "observacao"],
        "produto": {
          "obrigatorio": true,
          "fallback_se_nao_encontrar": "perguntar_qual_produto"
        },
        "quantidade": {
          "obrigatorio": false,
          "valor_padrao": "1 unidade"
        },
        "observacao": {
          "obrigatorio": false
        }
      },
      
      "tool_parameters": {
        "product": "[EXTRAIR:produto]",
        "quantity": "[EXTRAIR:quantidade]",
        "notes": "[EXTRAIR:observacao]",
        "lead_id": "[SISTEMA:lead_id]",
        "conversation_id": "[SISTEMA:conversation_id]"
      },
      
      "se_tool_falhar": {
        "acao": "informar_erro",
        "mensagem": "Desculpe, tive um problema ao adicionar. Vou te conectar com atendente.",
        "ir_para": "transfer_to_human"
      }
    },
    
    "decisoes": [
      {
        "numero": 1,
        "tipo": "automatico",
        "comportamento": "EXECUTAR_TOOL_E_PERGUNTAR_MAIS",
        "entao_ir_para": "",  // Volta para mesmo bloco (loop)
        "condicao": "se cliente mencionar mais produtos"
      },
      {
        "numero": 2,
        "tipo": "resposta_usuario",
        "se_cliente_falar": "n√£o, √© isso, finalizar",
        "entao_ir_para": "PASSO_CONFIRMACAO",
        "prioridade": "alta"
      }
    ]
  },
  
  "controle": {
    "tentativas_maximas": null,  // Pode adicionar quantos itens quiser
    "campo_obrigatorio": false,
    "timeout_segundos": null
  },
  
  "_metadata": {
    "tipo_tecnico": "add_to_list",
    "posicao_canvas": { "x": 800, "y": 300 },
    "id_original_node": "16"
  }
}

BLOCO 17: confirm_list
json{
  "variacao_id": "G1",
  "variacao_nome": "Confirmar Lista de Pedidos",
  
  "validacao": {
    "verificar_antes_de_executar": true,
    "verificar_no_contexto": "se lista de pedidos est√° vazia",
    "se_ja_feito": {
      "acao": "verificar_lista",
      "se_lista_vazia": {
        "mensagem": "Voc√™ ainda n√£o adicionou nenhum item ao pedido. O que gostaria?",
        "pular_para": "PASSO_ADICIONAR_ITEM"
      }
    }
  },
  
  "instrucoes": {
    "objetivo": "Buscar lista completa de itens e confirmar com cliente",
    "o_que_fazer": "confirmar_pedido_completo",
    
    "mensagem_antes_lista": "Perfeito! Aqui est√° seu pedido:",
    "mensagem_depois_lista": "Est√° tudo certo? Confirma? ‚úÖ",
    
    "dados_extras": {
      "modo_ia": "tool_execution_then_send",
      "tool_name": "get_list",
      
      "tool_parameters": {
        "lead_id": "[SISTEMA:lead_id]",
        "conversation_id": "[SISTEMA:conversation_id]"
      },
      
      "formato_exibicao": {
        "template_item_com_preco": "‚Ä¢ {quantidade} {produto} - R$ {preco}",
        "template_item_sem_preco": "‚Ä¢ {quantidade} {produto}",
        "incluir_total": true,
        "incluir_emojis": true,
        "separador": "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ",
        "emoji_item": "‚Ä¢",
        "emoji_total": "üí∞"
      },
      
      "se_tool_falhar": {
        "acao": "informar_erro",
        "mensagem": "N√£o consegui recuperar seu pedido. Vou te conectar com atendente.",
        "ir_para": "transfer_to_human"
      },
      
      "se_lista_vazia": {
        "acao": "informar_vazio",
        "mensagem": "Voc√™ ainda n√£o adicionou nenhum item. O que gostaria de pedir?",
        "ir_para": "PASSO_ADICIONAR_ITEM"
      }
    },
    
    "decisoes": [
      {
        "numero": 1,
        "tipo": "resposta_usuario",
        "se_cliente_falar": "sim, confirmo, tudo certo, ok",
        "entao_ir_para": "PASSO_FINALIZAR_PEDIDO",
        "prioridade": "alta"
      },
      {
        "numero": 2,
        "tipo": "resposta_usuario",
        "se_cliente_falar": "n√£o, errado, mudar, corrigir, remover",
        "entao_ir_para": "PASSO_CORRIGIR_PEDIDO",
        "prioridade": "alta"
      },
      {
        "numero": 3,
        "tipo": "resposta_usuario",
        "se_cliente_falar": "adicionar mais",
        "entao_ir_para": "PASSO_ADICIONAR_ITEM",
        "prioridade": "m√©dia"
      }
    ]
  },
  
  "controle": {
    "tentativas_maximas": 3,
    "campo_obrigatorio": true,
    "timeout_segundos": 300
  },
  
  "_metadata": {
    "tipo_tecnico": "confirm_list",
    "posicao_canvas": { "x": 1200, "y": 300 },
    "id_original_node": "17"
  }
}

üéØ RESUMO DO PLANEJAMENTO
2 Novos Blocos:
BlocoTipo T√©cnicoFun√ß√£oTool16add_to_listAdicionar item ao pedidoadd_list17confirm_listConfirmar pedido completoget_list

Campos Novos Introduzidos:
No BLOCO 16 (add_to_list):
json"extrair_da_mensagem": {
  "campos": ["produto", "quantidade", "observacao"],
  "produto": { "obrigatorio": true }
}

"perguntar_mais": {
  "ativo": true,
  "mensagem": "Mais alguma coisa?"
}
No BLOCO 17 (confirm_list):
json"formato_exibicao": {
  "template_item_com_preco": "‚Ä¢ {quantidade} {produto} - R$ {preco}",
  "incluir_total": true
}

"se_lista_vazia": {
  "acao": "informar_vazio",
  "ir_para": "PASSO_ADICIONAR_ITEM"
}

‚ùì PERGUNTAS ANTES DE PROSSEGUIR
1. Adicionar BLOCO 18 (remove_from_list) tamb√©m?

"Remover Item do Pedido"
Permite cliente remover itens antes de confirmar

2. Adicionar BLOCO 19 (clear_list)?

"Limpar Pedido Completo"
Cliente desiste e quer recome√ßar

3. Campo search_product deve ser usado antes de adicionar?

BLOCO 16 poderia chamar search_product primeiro
Pegar pre√ßo do produto
Confirmar disponibilidade
Depois adicionar com add_list

4. Como tratar quantidade?

Extra√ß√£o livre: "2kg", "3 unidades", "1 pacote"
Padronizar: apenas n√∫mero + unidade fixa?

5. Observa√ß√µes/customiza√ß√µes do item?

Cliente: "Quero tomate bem maduro"
observacao: "bem maduro"
Salvar na tool?


‚úÖ PR√ìXIMOS PASSOS
O QUE FAZER AGORA:
1Ô∏è‚É£ Voc√™ responde as 5 perguntas acima
2Ô∏è‚É£ Eu ajusto a estrutura conforme suas respostas
3Ô∏è‚É£ Reescrevo a documenta√ß√£o COMPLETA com:

15 blocos originais (com melhorias)
2-4 blocos novos (list management)
Estrutura atualizada com campos novos