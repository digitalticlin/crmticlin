ERROR:  42601: mismatched parentheses at or near ")"
QUERY:  
DECLARE
    v_message_id UUID;
    v_lead_id UUID;
    v_instance_id UUID;
    v_user_id UUID;
    v_clean_phone TEXT;
    v_message_text TEXT;
    v_media_type_enum media_type;
    v_edge_result jsonb;
    v_formatted_name TEXT;
    v_first_stage_id UUID;
    v_funnel_id UUID;
    v_owner_id UUID;
    v_http_status INT;
    v_http_response TEXT;
BEGIN
    RAISE NOTICE '[RPC] üöÄ INICIO: media_type=%, base64_size=%', p_media_type, COALESCE(length(p_base64_data), 0);

    -- üßπ LIMPAR TELEFONE
    v_clean_phone := regexp_replace(p_phone, '[^0-9]', '', 'g');

    -- üìû FORMATAR NOME DO LEAD
    IF length(v_clean_phone) = 13 AND v_clean_phone ~ '^55\d{11}$' THEN
        v_formatted_name := '+55 (' || substring(v_clean_phone from 3 for 2) || ') ' ||
                           substring(v_clean_phone from 5 for 5) || '-' ||
                           substring(v_clean_phone from 10 for 4);
    ELSIF length(v_clean_phone) = 12 AND v_clean_phone ~ '^55\d{10}$' THEN
        v_formatted_name := '+55 (' || substring(v_clean_phone from 3 for 2) || ') ' ||
                           substring(v_clean_phone from 5 for 4) || '-' ||
                           substring(v_clean_phone from 9 for 4);
    ELSE
        v_formatted_name := '+' || v_clean_phone;
    END IF;

    -- TEXTO DA MENSAGEM
    CASE LOWER(COALESCE(p_media_type, 'text'))
        WHEN 'text' THEN
            v_message_text := COALESCE(NULLIF(TRIM(p_message_text), ''), 'Mensagem vazia');
        WHEN 'image' THEN
            v_message_text := 'üì∑ Imagem';
        WHEN 'video' THEN
            v_message_text := 'üé• V√≠deo';
        WHEN 'audio' THEN
            v_message_text := 'üéµ √Åudio';
        WHEN 'document' THEN
            v_message_text := 'üìÑ Documento';
        WHEN 'sticker' THEN
            v_message_text := 'üòä Sticker';
        ELSE
            v_message_text := COALESCE(NULLIF(TRIM(p_message_text), ''), 'üìé M√≠dia');
    END CASE;

    v_media_type_enum := COALESCE(p_media_type, 'text')::media_type;

    -- BUSCAR INST√ÇNCIA
    SELECT id, created_by_user_id INTO v_instance_id, v_user_id
    FROM public.whatsapp_instances
    WHERE instance_name = p_vps_instance_id;

    IF v_user_id IS NULL OR v_instance_id IS NULL THEN
        RETURN jsonb_build_object()::text
        );
    END IF;

    -- BUSCAR OU CRIAR LEAD
    SELECT id INTO v_lead_id
    FROM public.leads
    WHERE phone = v_clean_phone AND created_by_user_id = v_user_id
    LIMIT 1;

    IF v_lead_id IS NULL THEN
        v_owner_id := v_user_id;

        SELECT id INTO v_funnel_id
        FROM public.funnels
        WHERE created_by_user_id = v_user_id
        ORDER BY created_at ASC LIMIT 1;

        IF v_funnel_id IS NOT NULL THEN
            SELECT id INTO v_first_stage_id
            FROM public.kanban_stages
            WHERE funnel_id = v_funnel_id
            ORDER BY order_position ASC LIMIT 1;
        END IF;

        INSERT INTO public.leads (
            name, phone, profile_pic_url, whatsapp_number_id,
            created_by_user_id, import_source, funnel_id,
            kanban_stage_id, owner_id, last_message, last_message_time
        ) VALUES (
            v_formatted_name, v_clean_phone, p_profile_pic_url, v_instance_id,
            v_user_id, 'webhook', v_funnel_id,
            v_first_stage_id, v_owner_id, v_message_text, NOW()
        )
        RETURNING id INTO v_lead_id;
    ELSE
        UPDATE public.leads
        SET
            last_message = v_message_text,
            last_message_time = NOW(),
            profile_pic_url = COALESCE(p_profile_pic_url, profile_pic_url)
        WHERE id = v_lead_id;
    END IF;

    -- INSERIR MENSAGEM
    INSERT INTO public.messages (
        text, from_me, created_by_user_id, lead_id,
        media_type, media_url, external_message_id,
        whatsapp_number_id, source_edge, import_source,
        timestamp, status
    ) VALUES (
        v_message_text, p_from_me, v_user_id, v_lead_id,
        v_media_type_enum, NULL, p_external_message_id,
        v_instance_id, p_source_edge, 'webhook',
        NOW(), CASE WHEN p_from_me THEN 'sent'::message_status ELSE 'received'::message_status END
    )
    RETURNING id INTO v_message_id;

    RAISE NOTICE '[RPC] ‚úÖ Mensagem salva: %', v_message_id;

    -- üöÄ PROCESSAR M√çDIA SE NECESS√ÅRIO
    IF p_media_type != 'text' AND p_base64_data IS NOT NULL THEN
        RAISE NOTICE '[RPC] üì§ Processando m√≠dia: tipo=%, base64_size=%', p_media_type, length(p_base64_data);

        BEGIN
            -- üîç DEBUG: Log dos par√¢metros antes da chamada
            RAISE NOTICE '[RPC] üåê Chamando webhook_storage_upload com:';
            RAISE NOTICE '[RPC] üìä message_id: %', v_message_id;
            RAISE NOTICE '[RPC] üìÇ file_path: %', 'webhook/' || v_instance_id || '/' || v_message_id || '.' || COALESCE(split_part(p_mime_type, '/', 2), 'jpg');
            RAISE NOTICE '[RPC] üìÅ content_type: %', p_mime_type;
            RAISE NOTICE '[RPC] üì¶ base64_preview: %...', substring(p_base64_data, 1, 50);

            -- CHAMAR EDGE DE UPLOAD
            SELECT http_post(
                'https://rhjgagzstjzynvrakdyj.supabase.co/functions/v1/webhook_storage_upload',
                jsonb_build_object()::text, 'jpg'),
                    'base64_data', p_base64_data,
                    'content_type', p_mime_type
                ),
                '{"Content-Type": "application/json"}'::jsonb
            ) INTO v_edge_result;

            -- üîç DEBUG: Log da resposta
            RAISE NOTICE '[RPC] üìä Edge resultado completo: %', v_edge_result;
            RAISE NOTICE '[RPC] üîç Status HTTP: %', (v_edge_result->>'status_code')::int;
            RAISE NOTICE '[RPC] üìÑ Body resposta: %', v_edge_result->>'body';

        EXCEPTION WHEN OTHERS THEN
            RAISE NOTICE '[RPC] ‚ùå Erro no upload: %', SQLERRM;
            RAISE NOTICE '[RPC] üîç Erro DETAIL: %', SQLSTATE;
        END;
    ELSE
        RAISE NOTICE '[RPC] ‚è≠Ô∏è Sem m√≠dia para processar (media_type=%, base64_null=%)', p_media_type, (p_base64_data IS NULL);
    END IF;

    RETURN jsonb_build_object()::text
    );

EXCEPTION
    WHEN OTHERS THEN
        RAISE NOTICE '[RPC] ‚ùå ERRO GERAL: %', SQLERRM;
        RETURN jsonb_build_object()::text;
END;
CONTEXT:  SQL statement "CREATE OR REPLACE FUNCTION public.save_received_message_webhook(
            p_vps_instance_id text,
            p_phone text,
            p_message_text text,
            p_from_me boolean,
            p_media_type text DEFAULT 'text',
            p_media_url text DEFAULT NULL,
            p_external_message_id text DEFAULT NULL,
            p_contact_name text DEFAULT NULL,
            p_profile_pic_url text DEFAULT NULL,
            p_base64_data text DEFAULT NULL,
            p_mime_type text DEFAULT NULL,
            p_file_name text DEFAULT NULL,
            p_whatsapp_number_id uuid DEFAULT NULL,
            p_source_edge text DEFAULT NULL
        )
        RETURNS jsonb
        LANGUAGE plpgsql
        SECURITY DEFINER
        AS $function$
DECLARE
    v_message_id UUID;
    v_lead_id UUID;
    v_instance_id UUID;
    v_user_id UUID;
    v_clean_phone TEXT;
    v_message_text TEXT;
    v_media_type_enum media_type;
    v_edge_result jsonb;
    v_formatted_name TEXT;
    v_first_stage_id UUID;
    v_funnel_id UUID;
    v_owner_id UUID;
    v_http_status INT;
    v_http_response TEXT;
BEGIN
    RAISE NOTICE '[RPC] üöÄ INICIO: media_type=%, base64_size=%', p_media_type, COALESCE(length(p_base64_data), 0);

    -- üßπ LIMPAR TELEFONE
    v_clean_phone := regexp_replace(p_phone, '[^0-9]', '', 'g');

    -- üìû FORMATAR NOME DO LEAD
    IF length(v_clean_phone) = 13 AND v_clean_phone ~ '^55\d{11}$' THEN
        v_formatted_name := '+55 (' || substring(v_clean_phone from 3 for 2) || ') ' ||
                           substring(v_clean_phone from 5 for 5) || '-' ||
                           substring(v_clean_phone from 10 for 4);
    ELSIF length(v_clean_phone) = 12 AND v_clean_phone ~ '^55\d{10}$' THEN
        v_formatted_name := '+55 (' || substring(v_clean_phone from 3 for 2) || ') ' ||
                           substring(v_clean_phone from 5 for 4) || '-' ||
                           substring(v_clean_phone from 9 for 4);
    ELSE
        v_formatted_name := '+' || v_clean_phone;
    END IF;

    -- TEXTO DA MENSAGEM
    CASE LOWER(COALESCE(p_media_type, 'text'))
        WHEN 'text' THEN
            v_message_text := COALESCE(NULLIF(TRIM(p_message_text), ''), 'Mensagem vazia');
        WHEN 'image' THEN
            v_message_text := 'üì∑ Imagem';
        WHEN 'video' THEN
            v_message_text := 'üé• V√≠deo';
        WHEN 'audio' THEN
            v_message_text := 'üéµ √Åudio';
        WHEN 'document' THEN
            v_message_text := 'üìÑ Documento';
        WHEN 'sticker' THEN
            v_message_text := 'üòä Sticker';
        ELSE
            v_message_text := COALESCE(NULLIF(TRIM(p_message_text), ''), 'üìé M√≠dia');
    END CASE;

    v_media_type_enum := COALESCE(p_media_type, 'text')::media_type;

    -- BUSCAR INST√ÇNCIA
    SELECT id, created_by_user_id INTO v_instance_id, v_user_id
    FROM public.whatsapp_instances
    WHERE instance_name = p_vps_instance_id;

    IF v_user_id IS NULL OR v_instance_id IS NULL THEN
        RETURN jsonb_build_object()::text
        );
    END IF;

    -- BUSCAR OU CRIAR LEAD
    SELECT id INTO v_lead_id
    FROM public.leads
    WHERE phone = v_clean_phone AND created_by_user_id = v_user_id
    LIMIT 1;

    IF v_lead_id IS NULL THEN
        v_owner_id := v_user_id;

        SELECT id INTO v_funnel_id
        FROM public.funnels
        WHERE created_by_user_id = v_user_id
        ORDER BY created_at ASC LIMIT 1;

        IF v_funnel_id IS NOT NULL THEN
            SELECT id INTO v_first_stage_id
            FROM public.kanban_stages
            WHERE funnel_id = v_funnel_id
            ORDER BY order_position ASC LIMIT 1;
        END IF;

        INSERT INTO public.leads (
            name, phone, profile_pic_url, whatsapp_number_id,
            created_by_user_id, import_source, funnel_id,
            kanban_stage_id, owner_id, last_message, last_message_time
        ) VALUES (
            v_formatted_name, v_clean_phone, p_profile_pic_url, v_instance_id,
            v_user_id, 'webhook', v_funnel_id,
            v_first_stage_id, v_owner_id, v_message_text, NOW()
        )
        RETURNING id INTO v_lead_id;
    ELSE
        UPDATE public.leads
        SET
            last_message = v_message_text,
            last_message_time = NOW(),
            profile_pic_url = COALESCE(p_profile_pic_url, profile_pic_url)
        WHERE id = v_lead_id;
    END IF;

    -- INSERIR MENSAGEM
    INSERT INTO public.messages (
        text, from_me, created_by_user_id, lead_id,
        media_type, media_url, external_message_id,
        whatsapp_number_id, source_edge, import_source,
        timestamp, status
    ) VALUES (
        v_message_text, p_from_me, v_user_id, v_lead_id,
        v_media_type_enum, NULL, p_external_message_id,
        v_instance_id, p_source_edge, 'webhook',
        NOW(), CASE WHEN p_from_me THEN 'sent'::message_status ELSE 'received'::message_status END
    )
    RETURNING id INTO v_message_id;

    RAISE NOTICE '[RPC] ‚úÖ Mensagem salva: %', v_message_id;

    -- üöÄ PROCESSAR M√çDIA SE NECESS√ÅRIO
    IF p_media_type != 'text' AND p_base64_data IS NOT NULL THEN
        RAISE NOTICE '[RPC] üì§ Processando m√≠dia: tipo=%, base64_size=%', p_media_type, length(p_base64_data);

        BEGIN
            -- üîç DEBUG: Log dos par√¢metros antes da chamada
            RAISE NOTICE '[RPC] üåê Chamando webhook_storage_upload com:';
            RAISE NOTICE '[RPC] üìä message_id: %', v_message_id;
            RAISE NOTICE '[RPC] üìÇ file_path: %', 'webhook/' || v_instance_id || '/' || v_message_id || '.' || COALESCE(split_part(p_mime_type, '/', 2), 'jpg');
            RAISE NOTICE '[RPC] üìÅ content_type: %', p_mime_type;
            RAISE NOTICE '[RPC] üì¶ base64_preview: %...', substring(p_base64_data, 1, 50);

            -- CHAMAR EDGE DE UPLOAD
            SELECT http_post(
                'https://rhjgagzstjzynvrakdyj.supabase.co/functions/v1/webhook_storage_upload',
                jsonb_build_object()::text, 'jpg'),
                    'base64_data', p_base64_data,
                    'content_type', p_mime_type
                ),
                '{"Content-Type": "application/json"}'::jsonb
            ) INTO v_edge_result;

            -- üîç DEBUG: Log da resposta
            RAISE NOTICE '[RPC] üìä Edge resultado completo: %', v_edge_result;
            RAISE NOTICE '[RPC] üîç Status HTTP: %', (v_edge_result->>'status_code')::int;
            RAISE NOTICE '[RPC] üìÑ Body resposta: %', v_edge_result->>'body';

        EXCEPTION WHEN OTHERS THEN
            RAISE NOTICE '[RPC] ‚ùå Erro no upload: %', SQLERRM;
            RAISE NOTICE '[RPC] üîç Erro DETAIL: %', SQLSTATE;
        END;
    ELSE
        RAISE NOTICE '[RPC] ‚è≠Ô∏è Sem m√≠dia para processar (media_type=%, base64_null=%)', p_media_type, (p_base64_data IS NULL);
    END IF;

    RETURN jsonb_build_object()::text
    );

EXCEPTION
    WHEN OTHERS THEN
        RAISE NOTICE '[RPC] ‚ùå ERRO GERAL: %', SQLERRM;
        RETURN jsonb_build_object()::text;
END;
$function$;"
PL/pgSQL function inline_code_block line 29 at EXECUTE