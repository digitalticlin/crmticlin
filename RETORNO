[
  {
    "function_code": "CREATE OR REPLACE FUNCTION public.save_received_message_webhook(p_vps_instance_id text, p_phone text, p_message_text text, p_from_me boolean, p_media_type text DEFAULT 'text'::text, p_media_url text DEFAULT NULL::text, p_external_message_id text DEFAULT NULL::text, p_contact_name text DEFAULT NULL::text, p_profile_pic_url text DEFAULT NULL::text, p_base64_data text DEFAULT NULL::text, p_mime_type text DEFAULT NULL::text, p_file_name text DEFAULT NULL::text, p_whatsapp_number_id uuid DEFAULT NULL::uuid, p_source_edge text DEFAULT NULL::text, p_instance_funnel_id uuid DEFAULT NULL::uuid)\n RETURNS jsonb\n LANGUAGE plpgsql\n SECURITY DEFINER\nAS $function$\r\nDECLARE\r\n    v_instance_id uuid;\r\n    v_user_id uuid;\r\n    v_lead_id uuid;\r\n    v_clean_phone text;\r\n    v_formatted_name text;\r\n    v_message_id uuid;\r\n    v_funnel_id uuid;\r\n    v_first_stage_id uuid;\r\n    v_owner_id uuid;\r\n    v_media_type_enum media_type;\r\n    v_should_call_edge boolean := false;\r\n    v_edge_url text;\r\n    v_service_role_key text;\r\n    v_edge_result jsonb;\r\n    v_file_extension text;\r\n    v_message_text text;\r\nBEGIN\r\n    -- üéØ TEXTO DA MENSAGEM\r\n    CASE LOWER(COALESCE(p_media_type, 'text'))\r\n        WHEN 'text' THEN\r\n            v_message_text := COALESCE(NULLIF(TRIM(p_message_text), ''), 'Mensagem vazia');\r\n        WHEN 'image' THEN\r\n            v_message_text := 'üì∑ Imagem';\r\n        WHEN 'video' THEN\r\n            v_message_text := 'üé• V√≠deo';\r\n        WHEN 'audio' THEN\r\n            v_message_text := 'üéµ √Åudio';\r\n        WHEN 'document' THEN\r\n            v_message_text := 'üìÑ Documento';\r\n        WHEN 'sticker' THEN\r\n            v_message_text := 'üòä Sticker';\r\n        ELSE\r\n            v_message_text := COALESCE(NULLIF(TRIM(p_message_text), ''), 'üìé M√≠dia');\r\n    END CASE;\r\n\r\n    -- üîç BUSCAR INST√ÇNCIA E USU√ÅRIO (TABELA CORRETA: whatsapp_instances)\r\n    SELECT id, created_by_user_id INTO v_instance_id, v_user_id\r\n    FROM public.whatsapp_instances\r\n    WHERE instance_name = p_vps_instance_id OR id = p_whatsapp_number_id\r\n    LIMIT 1;\r\n\r\n    IF v_instance_id IS NULL THEN\r\n        RETURN jsonb_build_object('success', false, 'error', 'Instance not found');\r\n    END IF;\r\n\r\n    -- üßπ Limpar telefone (apenas n√∫meros)\r\n    v_clean_phone := regexp_replace(p_phone, '[^0-9]', '', 'g');\r\n\r\n    -- üìû Formatar nome (SEMPRE usar telefone formatado, nunca contact_name)\r\n    IF length(v_clean_phone) = 13 AND v_clean_phone ~ '^55\\d{11}' THEN\r\n        v_formatted_name := '+55 (' || substring(v_clean_phone from 3 for 2) || ') ' || substring(v_clean_phone from 5 for 5) || '-' || substring(v_clean_phone from 10 for 4);\r\n    ELSIF length(v_clean_phone) = 12 AND v_clean_phone ~ '^55\\d{10}' THEN\r\n        v_formatted_name := '+55 (' || substring(v_clean_phone from 3 for 2) || ') ' || substring(v_clean_phone from 5 for 4) || '-' || substring(v_clean_phone from 9 for 4);\r\n    ELSE\r\n        v_formatted_name := '+' || v_clean_phone;\r\n    END IF;\r\n\r\n    -- Converter media_type para enum\r\n    v_media_type_enum := CASE\r\n        WHEN p_media_type IN ('image', 'video', 'audio', 'document', 'text') THEN p_media_type::media_type\r\n        ELSE 'text'::media_type\r\n    END;\r\n\r\n    -- üîç BUSCAR OU CRIAR LEAD (lookup por created_by_user_id)\r\n    SELECT id INTO v_lead_id\r\n    FROM public.leads\r\n    WHERE phone = v_clean_phone\r\n      AND created_by_user_id = v_user_id\r\n    LIMIT 1;\r\n\r\n    IF v_lead_id IS NULL THEN\r\n        -- ‚úÖ Owner √© sempre o dono da inst√¢ncia\r\n        v_owner_id := v_user_id;\r\n\r\n        -- ‚úÖ BUSCAR FUNIL (tabela correta: funnels)\r\n        SELECT id INTO v_funnel_id\r\n        FROM public.funnels\r\n        WHERE created_by_user_id = v_user_id\r\n        ORDER BY created_at ASC\r\n        LIMIT 1;\r\n\r\n        IF v_funnel_id IS NOT NULL THEN\r\n            -- ‚úÖ BUSCAR PRIMEIRO STAGE (tabela correta: kanban_stages, coluna: order_position)\r\n            SELECT id INTO v_first_stage_id\r\n            FROM public.kanban_stages\r\n            WHERE funnel_id = v_funnel_id\r\n            ORDER BY order_position ASC\r\n            LIMIT 1;\r\n        END IF;\r\n\r\n        -- ‚úÖ INSERIR LEAD (colunas corretas)\r\n        INSERT INTO public.leads (\r\n            name,                   -- ‚úÖ Telefone formatado: +55 (11) 98765-4321\r\n            phone,                  -- ‚úÖ Telefone limpo: 5511987654321\r\n            profile_pic_url,\r\n            whatsapp_number_id,\r\n            created_by_user_id,\r\n            import_source,\r\n            funnel_id,\r\n            kanban_stage_id,        -- ‚úÖ CORRETO (n√£o current_stage_id)\r\n            owner_id,\r\n            country,                -- ‚úÖ Adicionar campo country\r\n            last_message,\r\n            last_message_time\r\n        ) VALUES (\r\n            v_formatted_name,       -- ‚úÖ Nome = telefone formatado\r\n            v_clean_phone,          -- ‚úÖ Phone = n√∫meros apenas\r\n            p_profile_pic_url,      -- üì∏ Base64 da foto de perfil\r\n            v_instance_id,\r\n            v_user_id,\r\n            'webhook',\r\n            v_funnel_id,\r\n            v_first_stage_id,\r\n            v_owner_id,\r\n            NULL,                   -- country\r\n            v_message_text,\r\n            NOW()\r\n        )\r\n        RETURNING id INTO v_lead_id;\r\n    ELSE\r\n        -- Atualizar lead existente\r\n        UPDATE public.leads\r\n        SET\r\n            last_message = v_message_text,\r\n            last_message_time = NOW(),\r\n            -- üì∏ S√≥ atualiza profile_pic se vier nova (n√£o NULL) E for diferente da atual\r\n            profile_pic_url = CASE\r\n                WHEN p_profile_pic_url IS NOT NULL\r\n                     AND (profile_pic_url IS NULL OR LEFT(p_profile_pic_url, 100) != LEFT(profile_pic_url, 100))\r\n                THEN p_profile_pic_url\r\n                ELSE profile_pic_url\r\n            END\r\n        WHERE id = v_lead_id;\r\n    END IF;\r\n\r\n    -- Inserir mensagem (media_url NULL - ser√° preenchida pela edge)\r\n    INSERT INTO public.messages (text, from_me, created_by_user_id, lead_id, media_type, media_url, external_message_id, whatsapp_number_id, source_edge, import_source, timestamp, status)\r\n    VALUES (v_message_text, p_from_me, v_user_id, v_lead_id, v_media_type_enum, NULL, p_external_message_id, v_instance_id, p_source_edge, 'webhook', NOW(), CASE WHEN p_from_me THEN 'sent'::message_status ELSE 'received'::message_status END)\r\n    RETURNING id INTO v_message_id;\r\n\r\n    -- ‚ö†Ô∏è CALCULAR EXTENS√ÉO **ANTES** DE CHAMAR EDGE\r\n    v_should_call_edge := (p_media_type != 'text' AND p_base64_data IS NOT NULL);\r\n\r\n    IF v_should_call_edge THEN\r\n        -- üéØ USAR HELPER FUNCTION\r\n        v_file_extension := get_file_extension_from_mime(p_mime_type, p_media_type);\r\n\r\n        -- Chamar edge de upload (comentado - upload √© feito pelo webhook diretamente)\r\n        -- O webhook chama webhook_storage_upload com extens√£o correta\r\n    ELSE\r\n        v_file_extension := NULL;\r\n    END IF;\r\n\r\n    RETURN jsonb_build_object('success', true, 'message_id', v_message_id, 'lead_id', v_lead_id, 'file_extension', v_file_extension);\r\nEXCEPTION\r\n    WHEN OTHERS THEN\r\n        RETURN jsonb_build_object('success', false, 'error', SQLERRM);\r\nEND;\r\n$function$\n"
  }
]


[
  {
    "trigger_name": "RI_ConstraintTrigger_a_17571",
    "function_name": "RI_FKey_noaction_del",
    "trigger_function_code": "CREATE OR REPLACE FUNCTION pg_catalog.\"RI_FKey_noaction_del\"()\n RETURNS trigger\n LANGUAGE internal\n PARALLEL SAFE STRICT\nAS $function$RI_FKey_noaction_del$function$\n"
  },
  {
    "trigger_name": "RI_ConstraintTrigger_a_17572",
    "function_name": "RI_FKey_noaction_upd",
    "trigger_function_code": "CREATE OR REPLACE FUNCTION pg_catalog.\"RI_FKey_noaction_upd\"()\n RETURNS trigger\n LANGUAGE internal\n PARALLEL SAFE STRICT\nAS $function$RI_FKey_noaction_upd$function$\n"
  },
  {
    "trigger_name": "RI_ConstraintTrigger_a_431939",
    "function_name": "RI_FKey_cascade_del",
    "trigger_function_code": "CREATE OR REPLACE FUNCTION pg_catalog.\"RI_FKey_cascade_del\"()\n RETURNS trigger\n LANGUAGE internal\n PARALLEL SAFE STRICT\nAS $function$RI_FKey_cascade_del$function$\n"
  },
  {
    "trigger_name": "RI_ConstraintTrigger_a_431940",
    "function_name": "RI_FKey_cascade_upd",
    "trigger_function_code": "CREATE OR REPLACE FUNCTION pg_catalog.\"RI_FKey_cascade_upd\"()\n RETURNS trigger\n LANGUAGE internal\n PARALLEL SAFE STRICT\nAS $function$RI_FKey_cascade_upd$function$\n"
  },
  {
    "trigger_name": "RI_ConstraintTrigger_a_779441",
    "function_name": "RI_FKey_cascade_del",
    "trigger_function_code": "CREATE OR REPLACE FUNCTION pg_catalog.\"RI_FKey_cascade_del\"()\n RETURNS trigger\n LANGUAGE internal\n PARALLEL SAFE STRICT\nAS $function$RI_FKey_cascade_del$function$\n"
  },
  {
    "trigger_name": "RI_ConstraintTrigger_a_779442",
    "function_name": "RI_FKey_noaction_upd",
    "trigger_function_code": "CREATE OR REPLACE FUNCTION pg_catalog.\"RI_FKey_noaction_upd\"()\n RETURNS trigger\n LANGUAGE internal\n PARALLEL SAFE STRICT\nAS $function$RI_FKey_noaction_upd$function$\n"
  },
  {
    "trigger_name": "RI_ConstraintTrigger_a_779461",
    "function_name": "RI_FKey_cascade_del",
    "trigger_function_code": "CREATE OR REPLACE FUNCTION pg_catalog.\"RI_FKey_cascade_del\"()\n RETURNS trigger\n LANGUAGE internal\n PARALLEL SAFE STRICT\nAS $function$RI_FKey_cascade_del$function$\n"
  },
  {
    "trigger_name": "RI_ConstraintTrigger_a_779462",
    "function_name": "RI_FKey_noaction_upd",
    "trigger_function_code": "CREATE OR REPLACE FUNCTION pg_catalog.\"RI_FKey_noaction_upd\"()\n RETURNS trigger\n LANGUAGE internal\n PARALLEL SAFE STRICT\nAS $function$RI_FKey_noaction_upd$function$\n"
  },
  {
    "trigger_name": "RI_ConstraintTrigger_a_779481",
    "function_name": "RI_FKey_cascade_del",
    "trigger_function_code": "CREATE OR REPLACE FUNCTION pg_catalog.\"RI_FKey_cascade_del\"()\n RETURNS trigger\n LANGUAGE internal\n PARALLEL SAFE STRICT\nAS $function$RI_FKey_cascade_del$function$\n"
  },
  {
    "trigger_name": "RI_ConstraintTrigger_a_779482",
    "function_name": "RI_FKey_noaction_upd",
    "trigger_function_code": "CREATE OR REPLACE FUNCTION pg_catalog.\"RI_FKey_noaction_upd\"()\n RETURNS trigger\n LANGUAGE internal\n PARALLEL SAFE STRICT\nAS $function$RI_FKey_noaction_upd$function$\n"
  },
  {
    "trigger_name": "RI_ConstraintTrigger_a_779491",
    "function_name": "RI_FKey_cascade_del",
    "trigger_function_code": "CREATE OR REPLACE FUNCTION pg_catalog.\"RI_FKey_cascade_del\"()\n RETURNS trigger\n LANGUAGE internal\n PARALLEL SAFE STRICT\nAS $function$RI_FKey_cascade_del$function$\n"
  },
  {
    "trigger_name": "RI_ConstraintTrigger_a_779492",
    "function_name": "RI_FKey_noaction_upd",
    "trigger_function_code": "CREATE OR REPLACE FUNCTION pg_catalog.\"RI_FKey_noaction_upd\"()\n RETURNS trigger\n LANGUAGE internal\n PARALLEL SAFE STRICT\nAS $function$RI_FKey_noaction_upd$function$\n"
  },
  {
    "trigger_name": "RI_ConstraintTrigger_c_423248",
    "function_name": "RI_FKey_check_ins",
    "trigger_function_code": "CREATE OR REPLACE FUNCTION pg_catalog.\"RI_FKey_check_ins\"()\n RETURNS trigger\n LANGUAGE internal\n PARALLEL SAFE STRICT\nAS $function$RI_FKey_check_ins$function$\n"
  },
  {
    "trigger_name": "RI_ConstraintTrigger_c_423249",
    "function_name": "RI_FKey_check_upd",
    "trigger_function_code": "CREATE OR REPLACE FUNCTION pg_catalog.\"RI_FKey_check_upd\"()\n RETURNS trigger\n LANGUAGE internal\n PARALLEL SAFE STRICT\nAS $function$RI_FKey_check_upd$function$\n"
  },
  {
    "trigger_name": "RI_ConstraintTrigger_c_431951",
    "function_name": "RI_FKey_check_ins",
    "trigger_function_code": "CREATE OR REPLACE FUNCTION pg_catalog.\"RI_FKey_check_ins\"()\n RETURNS trigger\n LANGUAGE internal\n PARALLEL SAFE STRICT\nAS $function$RI_FKey_check_ins$function$\n"
  },
  {
    "trigger_name": "RI_ConstraintTrigger_c_431952",
    "function_name": "RI_FKey_check_upd",
    "trigger_function_code": "CREATE OR REPLACE FUNCTION pg_catalog.\"RI_FKey_check_upd\"()\n RETURNS trigger\n LANGUAGE internal\n PARALLEL SAFE STRICT\nAS $function$RI_FKey_check_upd$function$\n"
  },
  {
    "trigger_name": "RI_ConstraintTrigger_c_484435",
    "function_name": "RI_FKey_check_ins",
    "trigger_function_code": "CREATE OR REPLACE FUNCTION pg_catalog.\"RI_FKey_check_ins\"()\n RETURNS trigger\n LANGUAGE internal\n PARALLEL SAFE STRICT\nAS $function$RI_FKey_check_ins$function$\n"
  },
  {
    "trigger_name": "RI_ConstraintTrigger_c_484436",
    "function_name": "RI_FKey_check_upd",
    "trigger_function_code": "CREATE OR REPLACE FUNCTION pg_catalog.\"RI_FKey_check_upd\"()\n RETURNS trigger\n LANGUAGE internal\n PARALLEL SAFE STRICT\nAS $function$RI_FKey_check_upd$function$\n"
  },
  {
    "trigger_name": "RI_ConstraintTrigger_c_691066",
    "function_name": "RI_FKey_check_ins",
    "trigger_function_code": "CREATE OR REPLACE FUNCTION pg_catalog.\"RI_FKey_check_ins\"()\n RETURNS trigger\n LANGUAGE internal\n PARALLEL SAFE STRICT\nAS $function$RI_FKey_check_ins$function$\n"
  },
  {
    "trigger_name": "RI_ConstraintTrigger_c_691067",
    "function_name": "RI_FKey_check_upd",
    "trigger_function_code": "CREATE OR REPLACE FUNCTION pg_catalog.\"RI_FKey_check_upd\"()\n RETURNS trigger\n LANGUAGE internal\n PARALLEL SAFE STRICT\nAS $function$RI_FKey_check_upd$function$\n"
  },
  {
    "trigger_name": "RI_ConstraintTrigger_c_779408",
    "function_name": "RI_FKey_check_ins",
    "trigger_function_code": "CREATE OR REPLACE FUNCTION pg_catalog.\"RI_FKey_check_ins\"()\n RETURNS trigger\n LANGUAGE internal\n PARALLEL SAFE STRICT\nAS $function$RI_FKey_check_ins$function$\n"
  },
  {
    "trigger_name": "RI_ConstraintTrigger_c_779409",
    "function_name": "RI_FKey_check_upd",
    "trigger_function_code": "CREATE OR REPLACE FUNCTION pg_catalog.\"RI_FKey_check_upd\"()\n RETURNS trigger\n LANGUAGE internal\n PARALLEL SAFE STRICT\nAS $function$RI_FKey_check_upd$function$\n"
  },
  {
    "trigger_name": "RI_ConstraintTrigger_c_779413",
    "function_name": "RI_FKey_check_ins",
    "trigger_function_code": "CREATE OR REPLACE FUNCTION pg_catalog.\"RI_FKey_check_ins\"()\n RETURNS trigger\n LANGUAGE internal\n PARALLEL SAFE STRICT\nAS $function$RI_FKey_check_ins$function$\n"
  },
  {
    "trigger_name": "RI_ConstraintTrigger_c_779414",
    "function_name": "RI_FKey_check_upd",
    "trigger_function_code": "CREATE OR REPLACE FUNCTION pg_catalog.\"RI_FKey_check_upd\"()\n RETURNS trigger\n LANGUAGE internal\n PARALLEL SAFE STRICT\nAS $function$RI_FKey_check_upd$function$\n"
  },
  {
    "trigger_name": "RI_ConstraintTrigger_c_779418",
    "function_name": "RI_FKey_check_ins",
    "trigger_function_code": "CREATE OR REPLACE FUNCTION pg_catalog.\"RI_FKey_check_ins\"()\n RETURNS trigger\n LANGUAGE internal\n PARALLEL SAFE STRICT\nAS $function$RI_FKey_check_ins$function$\n"
  },
  {
    "trigger_name": "RI_ConstraintTrigger_c_779419",
    "function_name": "RI_FKey_check_upd",
    "trigger_function_code": "CREATE OR REPLACE FUNCTION pg_catalog.\"RI_FKey_check_upd\"()\n RETURNS trigger\n LANGUAGE internal\n PARALLEL SAFE STRICT\nAS $function$RI_FKey_check_upd$function$\n"
  },
  {
    "trigger_name": "update_leads_updated_at",
    "function_name": "update_updated_at_column",
    "trigger_function_code": "CREATE OR REPLACE FUNCTION public.update_updated_at_column()\n RETURNS trigger\n LANGUAGE plpgsql\n SET search_path TO 'public'\nAS $function$\r\nBEGIN\r\n  NEW.updated_at = NOW();\r\n  RETURN NEW;\r\nEND;\r\n$function$\n"
  }
]


