#!/bin/bash

# ============================================================================
# CORRE√á√ÉO @LID - SCRIPT PASSO A PASSO PARA EXECU√á√ÉO MANUAL NA VPS
# ============================================================================
# Execute este script na VPS ap√≥s conectar com: ssh root@31.97.163.57
# 
# O que este script faz:
# 1. Cria backup de seguran√ßa
# 2. Adiciona sistema de extra√ß√£o real de n√∫meros @lid
# 3. Verifica sintaxe
# 4. Reinicia servidor com monitoramento
# ============================================================================

echo "üöÄ CORRE√á√ÉO @LID - EXTRA√á√ÉO REAL DE N√öMEROS"
echo "=========================================="
echo "Este script vai corrigir o problema de @lid extraindo o n√∫mero REAL da mensagem"
echo ""

# Ir para diret√≥rio correto
cd /root/whatsapp-server/src/utils
echo "‚úÖ ETAPA 1: Navegando para diret√≥rio connection-manager"
echo "üìç Diret√≥rio atual: $(pwd)"
echo ""

# Verificar se arquivo existe
if [ ! -f "connection-manager.js" ]; then
    echo "‚ùå ERRO: Arquivo connection-manager.js n√£o encontrado!"
    echo "üìç Arquivos no diret√≥rio:"
    ls -la
    exit 1
fi
echo "‚úÖ ETAPA 2: Arquivo connection-manager.js encontrado"
echo "üìä Tamanho: $(wc -l < connection-manager.js) linhas"
echo ""

# Criar backup com timestamp
TIMESTAMP=$(date +%Y%m%d-%H%M%S)
BACKUP_FILE="connection-manager.js.backup-lid-fix-$TIMESTAMP"
cp connection-manager.js "$BACKUP_FILE"
echo "‚úÖ ETAPA 3: Backup criado - $BACKUP_FILE"
echo ""

# Verificar sintaxe atual
echo "üîç ETAPA 4: Verificando sintaxe atual..."
node -c connection-manager.js
if [ $? -ne 0 ]; then
    echo "‚ùå ERRO: Arquivo atual tem erro de sintaxe!"
    exit 1
fi
echo "‚úÖ ETAPA 4: Sintaxe atual OK"
echo ""

# Verificar se corre√ß√£o j√° foi aplicada
if grep -q "REAL_LID_NUMBER_EXTRACTOR" connection-manager.js; then
    echo "‚ö†Ô∏è AVISO: Corre√ß√£o parece j√° ter sido aplicada"
    echo "Deseja continuar mesmo assim? (s/N)"
    read -r response
    if [[ "$response" != "s" && "$response" != "S" ]]; then
        echo "‚ùå Opera√ß√£o cancelada pelo usu√°rio"
        exit 0
    fi
fi

echo "üîß ETAPA 5: Adicionando sistema de extra√ß√£o real..."

# Encontrar linha da classe ConnectionManager
CLASS_LINE=$(grep -n "class ConnectionManager" connection-manager.js | cut -d: -f1)
if [ -z "$CLASS_LINE" ]; then
    echo "‚ùå ERRO: Classe ConnectionManager n√£o encontrada!"
    exit 1
fi
echo "üìç Classe ConnectionManager encontrada na linha $CLASS_LINE"

# Criar sistema de extra√ß√£o
cat > real-lid-extractor.js << 'EOFEXTRACTOR'

// ============================================================================
// üîß REAL @LID EXTRACTOR - EXTRAI N√öMERO VERDADEIRO DA MENSAGEM
// ============================================================================
const REAL_LID_NUMBER_EXTRACTOR = {
  
  extractRealNumber: function(message, remoteJid, logPrefix = '') {
    // Ignorar grupos COMPLETAMENTE
    if (remoteJid && (remoteJid.includes('@g.us') || remoteJid.includes('@broadcast'))) {
      return remoteJid; // Grupos n√£o s√£o afetados
    }
    
    // Se n√£o √© @lid, passar direto
    if (!remoteJid || !remoteJid.includes('@lid')) {
      return remoteJid;
    }
    
    const originalLid = remoteJid;
    console.log(`${logPrefix} üîç [REAL_LID] @lid detectado: "${originalLid}"`);
    
    // ESTRAT√âGIA 1: Buscar em verifiedName (campo comum com n√∫mero real)
    if (message.verifiedName) {
      console.log(`${logPrefix} üîç [REAL_LID] Analisando verifiedName: "${message.verifiedName}"`);
      const phonePattern = /55\d{10,11}/;
      const match = message.verifiedName.match(phonePattern);
      if (match) {
        const realNumber = match[0] + '@s.whatsapp.net';
        console.log(`${logPrefix} ‚úÖ [REAL_LID] SUCESSO - N√∫mero extra√≠do de verifiedName: ${realNumber}`);
        return realNumber;
      }
    }
    
    // ESTRAT√âGIA 2: Buscar n√∫mero em pushName 
    if (message.pushName) {
      console.log(`${logPrefix} üîç [REAL_LID] Analisando pushName: "${message.pushName}"`);
      const phonePattern = /(\d{10,13})/;
      const match = message.pushName.match(phonePattern);
      if (match && match[1].length >= 10) {
        let phone = match[1];
        if (!phone.startsWith('55')) phone = '55' + phone;
        if (phone.match(/^55\d{2}\d{8,9}$/)) {
          const realNumber = phone + '@s.whatsapp.net';
          console.log(`${logPrefix} ‚úÖ [REAL_LID] SUCESSO - N√∫mero extra√≠do de pushName: ${realNumber}`);
          return realNumber;
        }
      }
    }
    
    // ESTRAT√âGIA 3: Buscar qualquer n√∫mero brasileiro na estrutura completa
    console.log(`${logPrefix} üîç [REAL_LID] Procurando na estrutura completa da mensagem...`);
    const messageStr = JSON.stringify(message);
    const phonePattern = /55\d{10,11}/g;
    const matches = messageStr.match(phonePattern);
    if (matches && matches[0]) {
      const realNumber = matches[0] + '@s.whatsapp.net';
      console.log(`${logPrefix} ‚úÖ [REAL_LID] SUCESSO - N√∫mero encontrado na estrutura: ${realNumber}`);
      return realNumber;
    }
    
    // ESTRAT√âGIA 4: Log detalhado para an√°lise manual
    console.log(`${logPrefix} üö® [REAL_LID] FALHA - N√£o conseguiu extrair n√∫mero real`);
    console.log(`${logPrefix} üö® [REAL_LID] @lid original: ${originalLid}`);
    console.log(`${logPrefix} üö® [REAL_LID] verifiedName: ${message.verifiedName || 'N/A'}`);
    console.log(`${logPrefix} üö® [REAL_LID] pushName: ${message.pushName || 'N/A'}`);
    console.log(`${logPrefix} üö® [REAL_LID] messageTimestamp: ${message.messageTimestamp || 'N/A'}`);
    console.log(`${logPrefix} üö® [REAL_LID] Campos da mensagem: ${Object.keys(message).join(', ')}`);
    
    // IMPORTANTE: Retornar null para ignorar mensagem @lid sem n√∫mero real
    console.log(`${logPrefix} ‚ö†Ô∏è [REAL_LID] IGNORANDO mensagem @lid sem n√∫mero real identificado`);
    return null;
  }
};

// ============================================================================
// FIM DO REAL LID EXTRACTOR
// ============================================================================

EOFEXTRACTOR

echo "‚úÖ Sistema de extra√ß√£o criado"

# Inserir sistema antes da classe
head -n $((CLASS_LINE - 1)) connection-manager.js > temp-new-file.js
cat real-lid-extractor.js >> temp-new-file.js
tail -n +${CLASS_LINE} connection-manager.js >> temp-new-file.js

# Substituir arquivo
mv temp-new-file.js connection-manager.js
rm real-lid-extractor.js

echo "‚úÖ ETAPA 5: Sistema de extra√ß√£o inserido antes da classe"
echo ""

echo "üîß ETAPA 6: Adicionando intercepta√ß√£o no processamento..."

# Encontrar linha do remoteJid
JID_LINE=$(grep -n "let remoteJid = message.key.remoteJid;" connection-manager.js | cut -d: -f1)
if [ -z "$JID_LINE" ]; then
    echo "‚ùå ERRO: Linha 'let remoteJid = message.key.remoteJid;' n√£o encontrada!"
    echo "Restaurando backup..."
    cp "$BACKUP_FILE" connection-manager.js
    exit 1
fi
echo "üìç RemoteJid encontrado na linha $JID_LINE"

# Adicionar intercepta√ß√£o ap√≥s essa linha
sed -i "${JID_LINE}a\\
\\
      // üîß INTERCEPTA√á√ÉO REAL @LID - EXTRAI N√öMERO VERDADEIRO\\
      const originalRemoteJid = remoteJid;\\
      remoteJid = REAL_LID_NUMBER_EXTRACTOR.extractRealNumber(message, remoteJid, logPrefix);\\
      \\
      // Se extra√ß√£o retornou null, ignorar mensagem @lid\\
      if (remoteJid === null) {\\
        console.log(\\\`\\\${logPrefix} üö´ [REAL_LID] IGNORANDO mensagem @lid sem n√∫mero real: \\\${originalRemoteJid}\\\`);\\
        return; // Sair da fun√ß√£o, n√£o processar esta mensagem\\
      }\\
      \\
      // Log se n√∫mero foi extra√≠do/corrigido\\
      if (originalRemoteJid !== remoteJid && originalRemoteJid.includes('@lid')) {\\
        console.log(\\\`\\\${logPrefix} ‚úÖ [REAL_LID] N√öMERO REAL EXTRA√çDO: \\\${originalRemoteJid} ‚Üí \\\${remoteJid}\\\`);\\
      }" connection-manager.js

echo "‚úÖ ETAPA 6: Intercepta√ß√£o adicionada"
echo ""

echo "üîç ETAPA 7: Verificando sintaxe ap√≥s modifica√ß√µes..."
node -c connection-manager.js
if [ $? -eq 0 ]; then
    echo "‚úÖ ETAPA 7: Sintaxe OK ap√≥s modifica√ß√µes"
else
    echo "‚ùå ERRO: Sintaxe inv√°lida ap√≥s modifica√ß√µes!"
    echo "Restaurando backup..."
    cp "$BACKUP_FILE" connection-manager.js
    echo "‚úÖ Backup restaurado"
    exit 1
fi
echo ""

echo "‚úÖ ETAPA 8: Confirmando que sistema foi adicionado..."
if grep -q "REAL_LID_NUMBER_EXTRACTOR" connection-manager.js; then
    echo "‚úÖ ETAPA 8: Sistema de extra√ß√£o confirmado no arquivo"
else
    echo "‚ùå ERRO: Sistema n√£o foi adicionado corretamente!"
    echo "Restaurando backup..."
    cp "$BACKUP_FILE" connection-manager.js
    exit 1
fi
echo ""

echo "üìä ETAPA 9: Verificando status atual do servidor..."
cd /root/whatsapp-server

# Status antes do restart
echo "üìä Status das inst√¢ncias ANTES do restart:"
pm2 list | grep whatsapp-server
echo ""

echo "üîÑ ETAPA 10: Reiniciando servidor WhatsApp..."
pm2 restart whatsapp-server

echo "‚è±Ô∏è Aguardando 20 segundos para estabiliza√ß√£o..."
sleep 20

echo "üìä ETAPA 11: Verificando status ap√≥s restart..."
pm2 list | grep whatsapp-server
echo ""

echo "üìú ETAPA 12: Verificando logs recentes..."
echo "√öltimas 15 linhas dos logs (filtrando webhooks para clareza):"
pm2 logs whatsapp-server --lines 30 | grep -v "Webhook LeadUpdate" | tail -15
echo ""

echo "üéâ CORRE√á√ÉO APLICADA COM SUCESSO!"
echo "=========================================="
echo ""
echo "üìã RESUMO DO QUE FOI FEITO:"
echo "‚úÖ Backup criado: $BACKUP_FILE"
echo "‚úÖ Sistema REAL_LID_NUMBER_EXTRACTOR adicionado"
echo "‚úÖ Intercepta√ß√£o de @lid configurada"
echo "‚úÖ Sintaxe verificada e OK"
echo "‚úÖ Servidor reiniciado"
echo ""
echo "üîç MONITORAMENTO:"
echo "Agora o sistema vai:"
echo "- Detectar mensagens @lid: [REAL_LID] @lid detectado"
echo "- Extrair n√∫mero real: [REAL_LID] SUCESSO - N√∫mero extra√≠do"
echo "- Ou ignorar se n√£o conseguir: [REAL_LID] IGNORANDO"
echo ""
echo "Para monitorar em tempo real:"
echo "pm2 logs whatsapp-server | grep REAL_LID"
echo ""
echo "‚úÖ IMPLEMENTA√á√ÉO COMPLETA!"