const fs = require('fs');

console.log('üîß Atualizando VPS para suporte a DataURL base64...');

try {
  const serverPath = '/root/whatsapp-server/server.js';
  
  // Backup antes da modifica√ß√£o
  const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
  const backupPath = `/root/whatsapp-server/server.js.backup-dataurl-${timestamp}`;
  fs.copyFileSync(serverPath, backupPath);
  console.log(`‚úÖ Backup criado: ${backupPath}`);

  let content = fs.readFileSync(serverPath, 'utf8');
  
  // Procurar pela se√ß√£o switch dos tipos de m√≠dia
  const switchPattern = /switch\s*\(\s*mediaType\.toLowerCase\(\s*\)\s*\)\s*\{[\s\S]*?default:[\s\S]*?\}/;
  
  if (!switchPattern.test(content)) {
    console.error('‚ùå Switch de mediaType n√£o encontrado!');
    process.exit(1);
  }

  // Novo switch com suporte a DataURL base64
  const newSwitch = `switch (mediaType.toLowerCase()) {
        case 'image':
          messageResult = await instance.socket.sendMessage(formattedPhone, {
            image: { url: mediaUrl },
            caption: message
          });
          break;
          
        case 'video':
          messageResult = await instance.socket.sendMessage(formattedPhone, {
            video: { url: mediaUrl },
            caption: message
          });
          break;
          
        case 'audio':
          messageResult = await instance.socket.sendMessage(formattedPhone, {
            audio: { url: mediaUrl },
            ptt: true
          });
          break;
          
        case 'document':
          messageResult = await instance.socket.sendMessage(formattedPhone, {
            document: { url: mediaUrl },
            fileName: message || 'documento.pdf',
            mimetype: 'application/pdf'
          });
          break;

        // ‚úÖ NOVO: SUPORTE A DATAURL BASE64
        case 'image_base64':
          console.log('üñºÔ∏è Processando imagem base64...');
          messageResult = await instance.socket.sendMessage(formattedPhone, {
            image: { url: mediaUrl }, // DataURL √© aceita pelo Baileys
            caption: message
          });
          break;
          
        case 'video_base64':
          console.log('üé• Processando v√≠deo base64...');
          messageResult = await instance.socket.sendMessage(formattedPhone, {
            video: { url: mediaUrl },
            caption: message
          });
          break;
          
        case 'audio_base64':
          console.log('üéµ Processando √°udio base64...');
          messageResult = await instance.socket.sendMessage(formattedPhone, {
            audio: { url: mediaUrl },
            ptt: true
          });
          break;
          
        case 'document_base64':
          console.log('üìÑ Processando documento base64...');
          messageResult = await instance.socket.sendMessage(formattedPhone, {
            document: { url: mediaUrl },
            fileName: message || 'documento',
            mimetype: 'application/octet-stream'
          });
          break;
          
        default:
          console.log('‚ö†Ô∏è  Tipo de m√≠dia n√£o reconhecido, enviando como texto');
          messageResult = await instance.socket.sendMessage(formattedPhone, { text: message });
      }`;

  // Substituir o switch antigo pelo novo
  content = content.replace(switchPattern, newSwitch);

  // Salvar arquivo modificado
  fs.writeFileSync(serverPath, content, 'utf8');
  console.log('üíæ Arquivo salvo com suporte a DataURL base64');

  // Verificar sintaxe
  try {
    require.resolve(serverPath);
    console.log('‚úÖ Verifica√ß√£o de sintaxe passou');
  } catch (err) {
    console.error('‚ùå Erro de sintaxe! Restaurando backup...');
    fs.copyFileSync(backupPath, serverPath);
    throw err;
  }

  console.log('üéâ VPS ATUALIZADA PARA SUPORTE A DATAURL!');
  console.log('üìã Novos tipos suportados:');
  console.log('   ‚úÖ image_base64 (DataURL de imagens)');
  console.log('   ‚úÖ video_base64 (DataURL de v√≠deos)');
  console.log('   ‚úÖ audio_base64 (DataURL de √°udios)');
  console.log('   ‚úÖ document_base64 (DataURL de documentos)');
  console.log('üîÑ Execute: pm2 restart whatsapp-server');

} catch (error) {
  console.error('‚ùå Erro:', error.message);
  process.exit(1);
} 