#!/bin/bash

# üöÄ FASE 2 - ATIVA√á√ÉO SEGURA PM2 CLUSTER + MONITORAMENTO
# Mudan√ßa de fork ‚Üí cluster com valida√ß√£o cont√≠nua

echo "üöÄ FASE 2 - ATIVA√á√ÉO PM2 CLUSTER"
echo "Data: $(date)"
echo "======================================================"

VPS_SERVER="root@vpswhatsapp"
VPS_PATH="~/whatsapp-server"

# ============================================================
# VERIFICA√á√ÉO PR√â-ATIVA√á√ÉO
# ============================================================

echo ""
echo "üîç PR√â-VERIFICA√á√ÉO ANTES DE ATIVAR CLUSTER"
echo "======================================================"

echo "üìä Verificando estado atual..."
ssh $VPS_SERVER "
echo 'Status do servidor atual:'
pm2 status
echo
echo 'Health check:'
curl -s http://localhost:3001/health | jq -r '.status' || echo 'Health check falhou'
echo
echo 'Inst√¢ncias WhatsApp ativas:'
curl -s http://localhost:3001/health | jq -r '.instances.active' || echo '0'
echo
echo 'Redis funcionando:'
redis-cli ping
echo
echo 'Mem√≥ria dispon√≠vel:'
free -h | grep Mem | awk '{print \$7}'
"

read -p "‚úã Sistema est√° est√°vel? Continuar com CLUSTER? (s/N): " -n 1 -r
echo
if [[ ! $REPLY =~ ^[Ss]$ ]]; then
    echo "‚ùå Fase 2 cancelada pelo usu√°rio"
    exit 1
fi

# ============================================================
# 1. BACKUP ANTES DA MUDAN√áA CR√çTICA
# ============================================================

echo ""
echo "üíæ 1. BACKUP DE SEGURAN√áA PRE-CLUSTER"
echo "======================================================"

TIMESTAMP=$(date +"%Y%m%d_%H%M%S")

ssh $VPS_SERVER "
echo 'üì¶ Criando backup pre-cluster...'
cd ~
tar -czf backup-pre-cluster-$TIMESTAMP.tar.gz whatsapp-server/ --exclude='node_modules' --exclude='auth_info'
echo '‚úÖ Backup pre-cluster criado: backup-pre-cluster-$TIMESTAMP.tar.gz'
ls -lh backup-pre-cluster-$TIMESTAMP.tar.gz
"

# ============================================================
# 2. ATIVA√á√ÉO MONITORADA DO CLUSTER
# ============================================================

echo ""
echo "üîÑ 2. ATIVA√á√ÉO PM2 CLUSTER (MONITORAMENTO ATIVO)"
echo "======================================================"

echo "‚ö†Ô∏è ATEN√á√ÉO: O servidor ter√° ~30-60 segundos de downtime!"
echo "üîÑ Iniciando mudan√ßa para cluster..."

ssh $VPS_SERVER "cd $VPS_PATH &&
echo 'üõë Parando aplica√ß√£o atual...'
pm2 stop all
pm2 delete all

echo 'üöÄ Iniciando em modo CLUSTER...'
pm2 start ecosystem.config.js

echo '‚è≥ Aguardando 30 segundos para estabiliza√ß√£o...'
sleep 30

echo 'üìä Status inicial do cluster:'
pm2 status
"

# ============================================================
# 3. VALIDA√á√ÉO CR√çTICA P√ìS-CLUSTER
# ============================================================

echo ""
echo "‚úÖ 3. VALIDA√á√ÉO CR√çTICA DO CLUSTER"
echo "======================================================"

echo "üîç Testando funcionalidades cr√≠ticas..."

# Teste 1: Health Check
echo "ü©∫ Teste 1: Health Check..."
ssh $VPS_SERVER "
for i in {1..5}; do
  echo \"Tentativa \$i/5:\"
  HEALTH=\$(curl -s http://localhost:3001/health 2>/dev/null)
  if echo \"\$HEALTH\" | grep -q '\"status\":\"ok\"'; then
    echo '‚úÖ Health OK'
    break
  else
    echo '‚ùå Health falhou, aguardando 10s...'
    sleep 10
  fi
done
"

# Teste 2: PM2 Cluster Status
echo ""
echo "‚öôÔ∏è Teste 2: Status do Cluster..."
ssh $VPS_SERVER "
echo 'PM2 Cluster Status:'
pm2 status

echo
echo 'Verificando se todas as inst√¢ncias est√£o online:'
ONLINE_COUNT=\$(pm2 jlist | jq '[.[] | select(.pm2_env.status == \"online\")] | length')
echo \"Inst√¢ncias online: \$ONLINE_COUNT/2\"

if [ \$ONLINE_COUNT -eq 2 ]; then
  echo '‚úÖ Todas as inst√¢ncias do cluster online'
else
  echo '‚ùå Nem todas as inst√¢ncias est√£o online!'
fi
"

# Teste 3: Inst√¢ncias WhatsApp
echo ""
echo "üì± Teste 3: Inst√¢ncias WhatsApp..."
ssh $VPS_SERVER "
echo 'Verificando inst√¢ncias WhatsApp:'
RESPONSE=\$(curl -s http://localhost:3001/health 2>/dev/null)
ACTIVE_INSTANCES=\$(echo \"\$RESPONSE\" | jq -r '.instances.active' 2>/dev/null || echo '0')
TOTAL_INSTANCES=\$(echo \"\$RESPONSE\" | jq -r '.instances.total' 2>/dev/null || echo '0')

echo \"Inst√¢ncias WhatsApp ativas: \$ACTIVE_INSTANCES/\$TOTAL_INSTANCES\"

if [ \$ACTIVE_INSTANCES -gt 5 ]; then
  echo '‚úÖ Inst√¢ncias WhatsApp funcionando'
else
  echo '‚ö†Ô∏è Poucas inst√¢ncias ativas, mas pode ser normal ap√≥s restart'
fi
"

# ============================================================
# 4. MONITORAMENTO CONT√çNUO (2 MINUTOS)
# ============================================================

echo ""
echo "üìä 4. MONITORAMENTO CONT√çNUO (2 MINUTOS)"
echo "======================================================"

echo "üîç Monitorando estabilidade do cluster..."
for i in {1..8}; do
    echo "üìä Verifica√ß√£o $i/8 ($(date +%H:%M:%S)):"
    
    ssh $VPS_SERVER "
    # Check PM2 status
    ONLINE=\$(pm2 jlist | jq '[.[] | select(.pm2_env.status == \"online\")] | length')
    echo \"  PM2 Online: \$ONLINE/2\"
    
    # Check health
    HEALTH=\$(curl -s http://localhost:3001/health 2>/dev/null | jq -r '.status' 2>/dev/null || echo 'fail')
    echo \"  Health: \$HEALTH\"
    
    # Check memory
    MEMORY=\$(pm2 jlist | jq -r '.[0].pm2_env.axm_monitor.\"Used Heap Size\".value' 2>/dev/null || echo '0')
    echo \"  Mem√≥ria: \$MEMORY\"
    
    # Check load
    LOAD=\$(uptime | awk -F'load average:' '{print \$2}' | awk '{print \$1}' | sed 's/,//')
    echo \"  Load: \$LOAD\"
    "
    
    if [ $i -lt 8 ]; then
        echo "  ‚è≥ Aguardando 15 segundos..."
        sleep 15
    fi
done

# ============================================================
# 5. RESULTADO FINAL E PR√ìXIMOS PASSOS
# ============================================================

echo ""
echo "üéØ 5. AN√ÅLISE FINAL DO CLUSTER"
echo "======================================================"

ssh $VPS_SERVER "
echo 'üìä Status Final:'
pm2 status

echo
echo 'üîç Informa√ß√µes detalhadas:'
pm2 info whatsapp-server

echo
echo 'üåê Teste final de conectividade:'
curl -s http://localhost:3001/health | jq '.' || curl -s http://localhost:3001/health

echo
echo 'üìà Estat√≠sticas do sistema:'
echo 'CPU:' \$(nproc) 'cores'
echo 'Load:' \$(uptime | awk -F'load average:' '{print \$2}')
echo 'Mem√≥ria livre:' \$(free -h | grep Mem | awk '{print \$7}')
echo 'Conex√µes ativas:' \$(netstat -an | grep :3001 | grep ESTABLISHED | wc -l)
"

# Verifica√ß√£o de sucesso
echo ""
echo "üèÅ VERIFICA√á√ÉO DE SUCESSO DA FASE 2"
echo "======================================================"

SUCCESS=true
echo "üîç Valida√ß√£o final..."

# Teste final de health
FINAL_HEALTH=$(ssh $VPS_SERVER "curl -s http://localhost:3001/health 2>/dev/null | jq -r '.status' 2>/dev/null")
if [ "$FINAL_HEALTH" = "ok" ]; then
    echo "‚úÖ Health check: OK"
else
    echo "‚ùå Health check: FALHA"
    SUCCESS=false
fi

# Teste final de PM2
PM2_ONLINE=$(ssh $VPS_SERVER "pm2 jlist | jq '[.[] | select(.pm2_env.status == \"online\")] | length'")
if [ "$PM2_ONLINE" = "2" ]; then
    echo "‚úÖ PM2 Cluster: OK (2/2 online)"
else
    echo "‚ùå PM2 Cluster: PROBLEMA ($PM2_ONLINE/2 online)"
    SUCCESS=false
fi

echo ""
if [ "$SUCCESS" = true ]; then
    echo "üéâ FASE 2 CONCLU√çDA COM SUCESSO!"
    echo "======================================================"
    echo "‚úÖ PM2 Cluster ativo (2 inst√¢ncias)"
    echo "‚úÖ Servidor respondendo normalmente"
    echo "‚úÖ Health check funcionando"
    echo "‚úÖ Sistema est√°vel"
    echo ""
    echo "üìä Capacidade aumentada:"
    echo "   - 2x mais processos"
    echo "   - Melhor uso do CPU"
    echo "   - Maior estabilidade"
    echo ""
    echo "üöÄ Pr√≥ximos passos:"
    echo "   1. Monitorar por algumas horas"
    echo "   2. Se tudo OK, executar Fase 3 (filas ativas)"
    echo "   3. Execute: ~/vps-implementation-phase3-queues.sh"
else
    echo "‚ö†Ô∏è FASE 2 COM PROBLEMAS!"
    echo "======================================================"
    echo "‚ùå Algum teste falhou"
    echo "üöë Op√ß√µes de recovery:"
    echo "   1. Aguardar mais tempo para estabiliza√ß√£o"
    echo "   2. Executar: ~/restore_emergency_[DATA].sh"
    echo "   3. Investigar logs: pm2 logs"
fi

echo ""
echo "üöë Backups dispon√≠veis:"
echo "   - ~/backup-pre-cluster-$TIMESTAMP.tar.gz"
echo "   - ~/restore_emergency_20250829_001112.sh"