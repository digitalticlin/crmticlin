-- ================================================================
-- üîç VERIFICAR ACESSO AO STORAGE SUPABASE
-- ================================================================

-- 1Ô∏è‚É£ Verificar se bucket existe e est√° acess√≠vel
SELECT
    'üóÇÔ∏è BUCKET STATUS' as check,
    id,
    name,
    public,
    created_at
FROM storage.buckets
WHERE name = 'whatsapp-media';

-- 2Ô∏è‚É£ Verificar objetos existentes no storage
SELECT
    'üìÅ OBJETOS NO STORAGE' as check,
    COUNT(*) as total_objects,
    COUNT(CASE WHEN name LIKE 'webhook/%' THEN 1 END) as webhook_objects
FROM storage.objects
WHERE bucket_id = 'whatsapp-media';

-- 3Ô∏è‚É£ Verificar √∫ltimos objetos criados
SELECT
    'üìÑ √öLTIMOS OBJETOS' as check,
    name,
    metadata,
    created_at
FROM storage.objects
WHERE bucket_id = 'whatsapp-media'
ORDER BY created_at DESC
LIMIT 5;

-- 4Ô∏è‚É£ Verificar pol√≠ticas de acesso (RLS)
SELECT
    'üîê POL√çTICAS RLS' as check,
    tablename,
    policyname,
    permissive,
    roles,
    cmd,
    qual
FROM pg_policies
WHERE tablename = 'objects'
AND schemaname = 'storage';

-- 5Ô∏è‚É£ Teste de cria√ß√£o de objeto simples
DO $$
DECLARE
    v_test_result JSONB;
    v_test_path TEXT := 'test/simple_test_' || extract(epoch from now())::text || '.txt';
    v_test_data BYTEA := 'Hello World Test'::BYTEA;
BEGIN
    BEGIN
        -- Tentar criar objeto de teste
        SELECT storage.objects.create(
            'whatsapp-media',
            v_test_path,
            v_test_data,
            'text/plain'
        ) INTO v_test_result;

        RAISE NOTICE '‚úÖ Teste de upload: SUCESSO - %', v_test_result;

        -- Limpar teste
        PERFORM storage.objects.delete('whatsapp-media', v_test_path);

    EXCEPTION
        WHEN OTHERS THEN
            RAISE NOTICE '‚ùå Teste de upload: FALHOU - %', SQLERRM;
    END;
END $$;