// CORRE√á√ÉO SEGURA PARA @LID - SEM QUEBRAR FUN√á√ïES EXISTENTES
// Esta corre√ß√£o ser√° aplicada de forma incremental e segura

// ESTRAT√âGIA:
// 1. Manter toda fun√ß√£o existente intacta
// 2. Adicionar apenas mapeamento de n√∫meros @lid corrompidos
// 3. Criar sistema de fallback para n√£o quebrar nada

// FUN√á√ÉO SEGURA PARA ADICIONAR AO connection-manager.js
function createLidMappingFunction() {
  return `
// üîß SISTEMA DE MAPEAMENTO @LID - ADICIONADO DE FORMA SEGURA
const lidNumberMap = new Map([
  // Mapeamentos conhecidos: [@lid_corrompido] => [numero_correto]
  ['274293808169155', '556299212484'], // Exemplo do log
  ['92045460951243', '556281364997'],   // Exemplo conhecido
  ['221092702589128', '556299212484']   // N√∫mero do exemplo (ajustar)
]);

// Fun√ß√£o de consulta ao banco para encontrar n√∫mero correto (FUTURO)
async function findCorrectPhoneForLid(corruptedNumber, instanceId) {
  try {
    // TODO: Implementar consulta ao banco de dados
    // SELECT phone FROM leads WHERE ... ORDER BY last_message_time DESC LIMIT 1
    return null; // Por enquanto retorna null
  } catch (error) {
    console.log('[LID_MAPPER] ‚ö†Ô∏è Erro ao consultar banco:', error.message);
    return null;
  }
}

// Fun√ß√£o principal de mapeamento @lid
function mapLidToCorrectPhone(remoteJid, logPrefix, instanceId) {
  if (!remoteJid || !remoteJid.includes('@lid')) {
    return remoteJid; // N√£o √© @lid, retorna original
  }
  
  const originalJid = remoteJid;
  const corruptedNumber = remoteJid.replace('@lid', '');
  
  console.log(\`\${logPrefix} üîç [LID_MAPPER] Processando @lid: "\${originalJid}" ‚Üí n√∫mero corrompido: "\${corruptedNumber}"\`);
  
  // ETAPA 1: Verificar mapeamento est√°tico
  if (lidNumberMap.has(corruptedNumber)) {
    const correctPhone = lidNumberMap.get(corruptedNumber);
    const correctJid = \`\${correctPhone}@s.whatsapp.net\`;
    console.log(\`\${logPrefix} ‚úÖ [LID_MAPPER] Mapeamento encontrado: \${corruptedNumber} ‚Üí \${correctPhone}\`);
    return correctJid;
  }
  
  // ETAPA 2: Log para an√°lise futura
  console.log(\`\${logPrefix} ‚ö†Ô∏è [LID_MAPPER] @lid desconhecido registrado: "\${corruptedNumber}" - NECESS√ÅRIO MAPEAMENTO MANUAL\`);
  
  // ETAPA 3: Fallback seguro - converter para formato padr√£o mas marcar como suspeito
  const fallbackJid = \`\${corruptedNumber}@s.whatsapp.net\`;
  console.log(\`\${logPrefix} üö® [LID_MAPPER] Usando fallback para @lid n√£o mapeado: \${fallbackJid}\`);
  
  return fallbackJid;
}
`;
}

// SCRIPT SEGURO DE APLICA√á√ÉO
function createSafeApplicationScript() {
  return `#!/bin/bash

# APLICA√á√ÉO SEGURA DA CORRE√á√ÉO @LID
VPS_IP="31.97.163.57"
VPS_USER="root"

echo "üîß Aplicando corre√ß√£o SEGURA para @lid na VPS..."

# 1. BACKUP COMPLETO
echo "üì¶ Criando backup completo..."
ssh \${VPS_USER}@\${VPS_IP} << 'EOF'
cd /root/whatsapp-server
# Backup com timestamp
BACKUP_DIR="backup-lid-fix-\$(date +%Y%m%d-%H%M%S)"
mkdir -p "\$BACKUP_DIR"
cp -r src/ "\$BACKUP_DIR/"
cp package.json "\$BACKUP_DIR/"
echo "‚úÖ Backup criado em: \$BACKUP_DIR"
EOF

# 2. VERIFICAR STATUS ATUAL
echo "üîç Verificando status das inst√¢ncias..."
ssh \${VPS_USER}@\${VPS_IP} << 'EOF'
cd /root/whatsapp-server
pm2 list
pm2 logs whatsapp-server --lines 3
EOF

# 3. APLICAR CORRE√á√ÉO INCREMENTAL
echo "üîß Aplicando corre√ß√£o incremental..."
ssh \${VPS_USER}@\${VPS_IP} << 'EOF'
cd /root/whatsapp-server/src/utils

# Verificar se arquivo existe
if [ ! -f "connection-manager.js" ]; then
  echo "‚ùå Arquivo connection-manager.js n√£o encontrado!"
  exit 1
fi

# Criar script de corre√ß√£o Node.js
cat > lid-fix-safe.js << 'NODESCRIPT'
const fs = require('fs');
const path = require('path');

console.log('üîß Iniciando corre√ß√£o segura para @lid...');

// Ler arquivo original
const originalFile = 'connection-manager.js';
let content = fs.readFileSync(originalFile, 'utf8');

// Verificar se j√° foi corrigido antes
if (content.includes('LID_MAPPER')) {
  console.log('‚ö†Ô∏è Corre√ß√£o j√° aplicada anteriormente. Pulando...');
  process.exit(0);
}

// Fun√ß√£o de mapeamento @lid
const lidMappingCode = \`
// üîß SISTEMA DE MAPEAMENTO @LID - CORRE√á√ÉO SEGURA
const lidNumberMap = new Map([
  ['274293808169155', '556299212484'], // Mapeamento do log fornecido
  ['92045460951243', '556281364997'],
  ['221092702589128', '556299212484']   // Ajustar conforme necess√°rio
]);

function mapLidToCorrectPhone(remoteJid, logPrefix, instanceId) {
  if (!remoteJid || !remoteJid.includes('@lid')) {
    return remoteJid;
  }
  
  const originalJid = remoteJid;
  const corruptedNumber = remoteJid.replace('@lid', '');
  
  console.log(\\\`\\\${logPrefix} üîç [LID_MAPPER] @lid detectado: "\\\${originalJid}" ‚Üí corrompido: "\\\${corruptedNumber}"\\\`);
  
  if (lidNumberMap.has(corruptedNumber)) {
    const correctPhone = lidNumberMap.get(corruptedNumber);
    const correctJid = \\\`\\\${correctPhone}@s.whatsapp.net\\\`;
    console.log(\\\`\\\${logPrefix} ‚úÖ [LID_MAPPER] Corrigido: \\\${corruptedNumber} ‚Üí \\\${correctPhone}\\\`);
    return correctJid;
  }
  
  console.log(\\\`\\\${logPrefix} ‚ö†Ô∏è [LID_MAPPER] @lid n√£o mapeado: "\\\${corruptedNumber}"\\\`);
  return \\\`\\\${corruptedNumber}@s.whatsapp.net\\\`;
}
\`;

// Inserir fun√ß√£o antes da classe ConnectionManager
const classIndex = content.indexOf('class ConnectionManager {');
if (classIndex > -1) {
  const beforeClass = content.substring(0, classIndex);
  const afterClass = content.substring(classIndex);
  content = beforeClass + lidMappingCode + '\\n' + afterClass;
  console.log('‚úÖ Fun√ß√£o de mapeamento adicionada');
} else {
  console.log('‚ùå N√£o foi poss√≠vel encontrar classe ConnectionManager');
  process.exit(1);
}

// Encontrar e substituir apenas a parte do @lid (CORRE√á√ÉO CIR√öRGICA)
const lidStart = content.indexOf('if (remoteJid.includes(\\'@lid\\'))');
if (lidStart > -1) {
  // Encontrar o final do bloco @lid
  let braceCount = 0;
  let endIndex = lidStart;
  let inBlock = false;
  
  for (let i = lidStart; i < content.length; i++) {
    if (content[i] === '{') {
      braceCount++;
      inBlock = true;
    } else if (content[i] === '}') {
      braceCount--;
      if (inBlock && braceCount === 0) {
        endIndex = i + 1;
        break;
      }
    }
  }
  
  // Substituir bloco @lid por chamada da nova fun√ß√£o
  const beforeLid = content.substring(0, lidStart);
  const afterLid = content.substring(endIndex);
  
  const newLidCode = \`// üîß CORRE√á√ÉO @LID SEGURA
      const originalRemoteJid = remoteJid;
      remoteJid = mapLidToCorrectPhone(remoteJid, logPrefix, instanceId);
      
      if (remoteJid !== originalRemoteJid) {
        console.log(\\\`\\\${logPrefix} üîÑ [LID_MAPPER] JID corrigido: \\\${originalRemoteJid} ‚Üí \\\${remoteJid}\\\`);
      }\`;
  
  content = beforeLid + newLidCode + afterLid;
  console.log('‚úÖ Bloco @lid substitu√≠do por corre√ß√£o segura');
} else {
  console.log('‚ö†Ô∏è Bloco @lid n√£o encontrado, adicionando verifica√ß√£o no in√≠cio do processamento');
  
  // Adicionar verifica√ß√£o no in√≠cio do processamento de mensagens
  const messageStart = content.indexOf('let remoteJid = message.key.remoteJid;');
  if (messageStart > -1) {
    const insertPoint = content.indexOf('\\n', messageStart) + 1;
    const beforeInsert = content.substring(0, insertPoint);
    const afterInsert = content.substring(insertPoint);
    
    const lidCheck = \`
      // üîß VERIFICA√á√ÉO @LID SEGURA
      remoteJid = mapLidToCorrectPhone(remoteJid, logPrefix, instanceId);
\`;
    
    content = beforeInsert + lidCheck + afterInsert;
    console.log('‚úÖ Verifica√ß√£o @lid adicionada no in√≠cio do processamento');
  }
}

// Salvar arquivo corrigido
fs.writeFileSync(originalFile, content);
console.log('‚úÖ Corre√ß√£o aplicada com sucesso!');
console.log('üìã Resumo:');
console.log('- Fun√ß√£o mapLidToCorrectPhone adicionada');
console.log('- Mapeamentos est√°ticos configurados');
console.log('- Sistema de logs para monitoramento');
NODESCRIPT

# Executar corre√ß√£o
node lid-fix-safe.js
rm lid-fix-safe.js

echo "‚úÖ Corre√ß√£o aplicada"
EOF

# 4. VERIFICAR SE APLICA√á√ÉO FOI BEM SUCEDIDA
echo "üîç Verificando se corre√ß√£o foi aplicada..."
ssh \${VPS_USER}@\${VPS_IP} << 'EOF'
cd /root/whatsapp-server/src/utils
if grep -q "LID_MAPPER" connection-manager.js; then
  echo "‚úÖ Corre√ß√£o confirmada no arquivo"
else
  echo "‚ùå Corre√ß√£o n√£o encontrada - PROBLEMA!"
fi
EOF

# 5. RESTART CONTROLADO COM MONITORAMENTO
echo "üîÑ Reiniciando com monitoramento..."
ssh \${VPS_USER}@\${VPS_IP} << 'EOF'
cd /root/whatsapp-server

echo "üìä Status ANTES do restart:"
pm2 list | grep whatsapp-server

echo "üîÑ Fazendo restart..."
pm2 restart whatsapp-server

echo "‚è±Ô∏è Aguardando 10 segundos..."
sleep 10

echo "üìä Status AP√ìS restart:"
pm2 list | grep whatsapp-server

echo "üìú Logs recentes:"
pm2 logs whatsapp-server --lines 15
EOF

echo "‚úÖ Corre√ß√£o aplicada e servidor reiniciado!"
echo ""
echo "üîç Monitorar pelos pr√≥ximos minutos:"
echo "ssh root@31.97.163.57 'pm2 logs whatsapp-server --lines 20'"`;
}

// Criar arquivo de aplica√ß√£o segura
module.exports = {
  lidMappingFunction: createLidMappingFunction(),
  applicationScript: createSafeApplicationScript()
};