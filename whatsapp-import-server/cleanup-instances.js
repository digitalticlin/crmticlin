const axios = require('axios');
const fs = require('fs');
const path = require('path');

// üßπ SCRIPT DE LIMPEZA DE INST√ÇNCIAS WHATSAPP
// Mant√©m apenas inst√¢ncias com n√∫mero conectado e remove as desconectadas

const SERVER_URL = 'http://localhost:3002';
const AUTH_DIR = path.join(__dirname, 'auth_info');

console.log('üßπ === INICIANDO LIMPEZA DE INST√ÇNCIAS WHATSAPP ===');
console.log('üìÅ Diret√≥rio de autentica√ß√£o:', AUTH_DIR);

async function obterStatusInstancias() {
  try {
    console.log('\nüìä Obtendo status atual das inst√¢ncias...');
    
    const response = await axios.get(`${SERVER_URL}/status`);
    const data = response.data;
    
    console.log(`üìà Status do servidor: ${data.status}`);
    console.log(`üî¢ Total de inst√¢ncias ativas: ${data.activeInstances}`);
    
    if (data.instances && data.instances.length > 0) {
      console.log('\nüìã Inst√¢ncias encontradas:');
      data.instances.forEach((inst, index) => {
        const status = inst.connected ? '‚úÖ CONECTADA' : '‚ùå DESCONECTADA';
        const phone = inst.phone ? `(${inst.phone})` : '(sem n√∫mero)';
        console.log(`  ${index + 1}. ${inst.instanceId} ${status} ${phone}`);
      });
    }
    
    return data.instances || [];
    
  } catch (error) {
    console.error('‚ùå Erro ao obter status das inst√¢ncias:', error.message);
    return [];
  }
}

async function deletarInstancia(instanceId) {
  try {
    console.log(`üóëÔ∏è Deletando inst√¢ncia: ${instanceId}`);
    
    // Tentar m√©todo DELETE primeiro
    try {
      await axios.delete(`${SERVER_URL}/instance/${instanceId}`);
      console.log(`‚úÖ Inst√¢ncia ${instanceId} deletada via DELETE`);
      return true;
    } catch (deleteError) {
      console.log(`‚ö†Ô∏è DELETE falhou, tentando POST...`);
    }
    
    // Tentar m√©todo POST como fallback
    try {
      await axios.post(`${SERVER_URL}/instance/delete`, { instanceId });
      console.log(`‚úÖ Inst√¢ncia ${instanceId} deletada via POST`);
      return true;
    } catch (postError) {
      console.log(`‚ùå Falha ao deletar ${instanceId}:`, postError.message);
      return false;
    }
    
  } catch (error) {
    console.error(`‚ùå Erro geral ao deletar ${instanceId}:`, error.message);
    return false;
  }
}

async function listarDiretoriosAuth() {
  try {
    console.log('\nüìÅ === AN√ÅLISE DOS DIRET√ìRIOS DE AUTENTICA√á√ÉO ===');
    
    if (!fs.existsSync(AUTH_DIR)) {
      console.log('‚ùå Diret√≥rio auth_info n√£o encontrado');
      return [];
    }
    
    const diretorios = fs.readdirSync(AUTH_DIR, { withFileTypes: true })
      .filter(dirent => dirent.isDirectory())
      .map(dirent => dirent.name);
    
    console.log(`üìä Total de diret√≥rios de autentica√ß√£o: ${diretorios.length}`);
    
    // Analisar cada diret√≥rio
    const analise = [];
    for (const dir of diretorios) {
      const dirPath = path.join(AUTH_DIR, dir);
      const arquivos = fs.readdirSync(dirPath);
      
      const info = {
        nome: dir,
        arquivos: arquivos.length,
        temCredentials: arquivos.includes('creds.json'),
        temKeys: arquivos.some(f => f.startsWith('keys-')),
        tamanhoTotal: 0
      };
      
      // Calcular tamanho total
      for (const arquivo of arquivos) {
        const filePath = path.join(dirPath, arquivo);
        const stats = fs.statSync(filePath);
        info.tamanhoTotal += stats.size;
      }
      
      analise.push(info);
    }
    
    // Mostrar estat√≠sticas
    console.log('\nüìà Estat√≠sticas dos diret√≥rios:');
    console.log(`   üìÅ Total: ${analise.length}`);
    console.log(`   üîë Com credentials: ${analise.filter(a => a.temCredentials).length}`);
    console.log(`   üóùÔ∏è Com keys: ${analise.filter(a => a.temKeys).length}`);
    
    // Mostrar primeiros 10 diret√≥rios
    console.log('\nüìã Primeiros 10 diret√≥rios:');
    analise.slice(0, 10).forEach((info, index) => {
      const creds = info.temCredentials ? '‚úÖ' : '‚ùå';
      const keys = info.temKeys ? '‚úÖ' : '‚ùå';
      const tamanho = (info.tamanhoTotal / 1024).toFixed(1);
      console.log(`  ${index + 1}. ${info.nome} | Creds: ${creds} | Keys: ${keys} | ${tamanho}KB`);
    });
    
    return analise;
    
  } catch (error) {
    console.error('‚ùå Erro ao analisar diret√≥rios:', error.message);
    return [];
  }
}

async function removerDiretoriosOrfaos(instanciasAtivas, diretoriosAuth) {
  try {
    console.log('\nüßπ === LIMPEZA DE DIRET√ìRIOS √ìRF√ÉOS ===');
    
    const nomesDiretorios = diretoriosAuth.map(d => d.nome);
    const nomesInstancias = instanciasAtivas.map(i => i.instanceId);
    
    // Encontrar diret√≥rios √≥rf√£os (sem inst√¢ncia ativa)
    const diretoriosOrfaos = nomesDiretorios.filter(dir => 
      !nomesInstancias.includes(dir)
    );
    
    console.log(`üìä Diret√≥rios √≥rf√£os encontrados: ${diretoriosOrfaos.length}`);
    
    if (diretoriosOrfaos.length === 0) {
      console.log('‚úÖ Nenhum diret√≥rio √≥rf√£o encontrado');
      return;
    }
    
    console.log('\nüìã Diret√≥rios que ser√£o removidos:');
    diretoriosOrfaos.forEach((dir, index) => {
      console.log(`  ${index + 1}. ${dir}`);
    });
    
    // Remover diret√≥rios √≥rf√£os
    let removidos = 0;
    for (const dir of diretoriosOrfaos) {
      try {
        const dirPath = path.join(AUTH_DIR, dir);
        fs.rmSync(dirPath, { recursive: true, force: true });
        console.log(`üóëÔ∏è Removido: ${dir}`);
        removidos++;
      } catch (error) {
        console.error(`‚ùå Erro ao remover ${dir}:`, error.message);
      }
    }
    
    console.log(`\n‚úÖ Limpeza conclu√≠da: ${removidos}/${diretoriosOrfaos.length} diret√≥rios removidos`);
    
  } catch (error) {
    console.error('‚ùå Erro na limpeza de diret√≥rios:', error.message);
  }
}

async function executarLimpeza() {
  try {
    console.log('üöÄ Iniciando processo de limpeza...');
    
    // 1. Obter status atual
    const instancias = await obterStatusInstancias();
    
    if (instancias.length === 0) {
      console.log('‚ÑπÔ∏è Nenhuma inst√¢ncia encontrada no servidor');
      return;
    }
    
    // 2. Separar conectadas e desconectadas
    const conectadas = instancias.filter(i => i.connected && i.phone);
    const desconectadas = instancias.filter(i => !i.connected || !i.phone);
    
    console.log(`\nüìä === RESUMO ===`);
    console.log(`‚úÖ Inst√¢ncias conectadas (manter): ${conectadas.length}`);
    console.log(`‚ùå Inst√¢ncias desconectadas (remover): ${desconectadas.length}`);
    
    if (conectadas.length > 0) {
      console.log('\n‚úÖ Inst√¢ncias que ser√£o MANTIDAS:');
      conectadas.forEach((inst, index) => {
        console.log(`  ${index + 1}. ${inst.instanceId} (${inst.phone})`);
      });
    }
    
    if (desconectadas.length > 0) {
      console.log('\n‚ùå Inst√¢ncias que ser√£o REMOVIDAS:');
      desconectadas.forEach((inst, index) => {
        console.log(`  ${index + 1}. ${inst.instanceId} (${inst.status})`);
      });
      
      // 3. Deletar inst√¢ncias desconectadas
      console.log('\nüóëÔ∏è Iniciando remo√ß√£o das inst√¢ncias desconectadas...');
      
      let removidas = 0;
      for (const inst of desconectadas) {
        const sucesso = await deletarInstancia(inst.instanceId);
        if (sucesso) removidas++;
        
        // Aguardar um pouco entre as remo√ß√µes
        await new Promise(resolve => setTimeout(resolve, 1000));
      }
      
      console.log(`\nüìä Remo√ß√£o conclu√≠da: ${removidas}/${desconectadas.length} inst√¢ncias removidas`);
    }
    
    // 4. Analisar diret√≥rios de autentica√ß√£o
    const diretoriosAuth = await listarDiretoriosAuth();
    
    // 5. Remover diret√≥rios √≥rf√£os
    await removerDiretoriosOrfaos(conectadas, diretoriosAuth);
    
    // 6. Status final
    console.log('\nüéâ === LIMPEZA CONCLU√çDA ===');
    console.log(`‚úÖ Inst√¢ncias mantidas: ${conectadas.length}`);
    console.log(`üóëÔ∏è Inst√¢ncias removidas: ${desconectadas.length}`);
    console.log(`üìÅ Diret√≥rios de auth analisados: ${diretoriosAuth.length}`);
    
    // Verificar status final
    setTimeout(async () => {
      console.log('\nüîç Verificando status final...');
      const instanciasFinal = await obterStatusInstancias();
      console.log(`üìä Inst√¢ncias restantes: ${instanciasFinal.length}`);
      
      if (instanciasFinal.length > 0) {
        console.log('‚úÖ Inst√¢ncias ativas:');
        instanciasFinal.forEach((inst, index) => {
          const status = inst.connected ? '‚úÖ CONECTADA' : '‚ùå DESCONECTADA';
          const phone = inst.phone ? `(${inst.phone})` : '(sem n√∫mero)';
          console.log(`  ${index + 1}. ${inst.instanceId} ${status} ${phone}`);
        });
      }
    }, 3000);
    
  } catch (error) {
    console.error('‚ùå Erro durante a limpeza:', error.message);
  }
}

// Executar limpeza
executarLimpeza(); 