// FIX: Corre√ß√£o completa para extra√ß√£o de n√∫meros @lid corrompidos
// Este arquivo deve ser aplicado no connection-manager.js da VPS

// PROBLEMA IDENTIFICADO:
// 1. N√∫meros est√£o chegando como: 221092702589128@s.whatsapp.net (mal formatado)
// 2. O @lid n√£o est√° sendo tratado corretamente
// 3. A fun√ß√£o est√° filtrando mensagens @lid em vez de processar

// SOLU√á√ÉO: Fun√ß√£o melhorada para extrair n√∫mero correto de @lid corrompidos
function extractPhoneFromCorruptedJid(remoteJid, logPrefix) {
  const originalJid = remoteJid;
  
  // Caso 1: @lid corrompido
  if (remoteJid.includes('@lid')) {
    // Extrair apenas n√∫meros do JID
    const numbersOnly = remoteJid.replace(/[^0-9]/g, '');
    console.log(`${logPrefix} üîç @lid detectado: "${originalJid}" ‚Üí n√∫meros: "${numbersOnly}"`);
    
    // Tentar identificar padr√£o de n√∫mero brasileiro v√°lido
    let realPhone = null;
    
    // Padr√£o 1: N√∫mero come√ßa com 55 (Brasil)
    if (numbersOnly.startsWith('55')) {
      realPhone = numbersOnly;
    }
    // Padr√£o 2: N√∫mero muito longo (poss√≠vel corrup√ß√£o)
    else if (numbersOnly.length > 13) {
      // Tentar extrair n√∫mero brasileiro de dentro do n√∫mero corrompido
      // Exemplo: 221092702589128 pode conter 1092702589 (n√∫mero real)
      
      // Buscar sequ√™ncia que parece n√∫mero brasileiro (11 d√≠gitos ap√≥s c√≥digo pa√≠s)
      const patterns = [
        /55(\d{2}\d{9})/, // Padr√£o brasileiro completo
        /55(\d{2}\d{8})/, // Padr√£o brasileiro antigo
        /(\d{2}\d{9})$/,  // √öltimos 11 d√≠gitos
        /(\d{2}\d{8})$/   // √öltimos 10 d√≠gitos
      ];
      
      for (const pattern of patterns) {
        const match = numbersOnly.match(pattern);
        if (match) {
          if (match[0].startsWith('55')) {
            realPhone = match[0];
          } else {
            realPhone = '55' + match[1];
          }
          console.log(`${logPrefix} ‚úÖ Padr√£o encontrado: ${realPhone}`);
          break;
        }
      }
    }
    
    // Se n√£o encontrou padr√£o, tentar inferir
    if (!realPhone && numbersOnly.length >= 10) {
      // Pegar √∫ltimos 11 d√≠gitos e assumir que √© brasileiro
      const last11 = numbersOnly.slice(-11);
      realPhone = '55' + last11;
      console.log(`${logPrefix} ‚ö†Ô∏è Inferindo n√∫mero brasileiro: ${realPhone}`);
    }
    
    // Se conseguiu extrair, retornar formato correto
    if (realPhone) {
      return `${realPhone}@s.whatsapp.net`;
    }
    
    // Fallback: usar n√∫mero como est√°
    console.log(`${logPrefix} ‚ùå N√£o foi poss√≠vel corrigir @lid: ${originalJid}`);
    return `${numbersOnly}@s.whatsapp.net`;
  }
  
  // Caso 2: N√∫mero mal formatado sem @lid
  // Exemplo: 221092702589128@s.whatsapp.net
  if (remoteJid.includes('@s.whatsapp.net')) {
    const phoneNumber = remoteJid.split('@')[0];
    
    // Se o n√∫mero √© muito longo ou tem formato estranho
    if (phoneNumber.length > 15 || !phoneNumber.startsWith('55')) {
      console.log(`${logPrefix} üîß N√∫mero suspeito: ${phoneNumber}`);
      
      // Tentar extrair n√∫mero brasileiro v√°lido
      // Exemplo: 221092702589128 ‚Üí 1092702589
      const patterns = [
        /55(\d{10,11})/, // N√∫mero brasileiro com c√≥digo
        /(\d{2})(\d{9})$/, // DDD + 9 d√≠gitos no final
        /(\d{2})(\d{8})$/  // DDD + 8 d√≠gitos no final
      ];
      
      for (const pattern of patterns) {
        const match = phoneNumber.match(pattern);
        if (match) {
          let extracted;
          if (match[0].startsWith('55')) {
            extracted = match[0];
          } else if (match[2]) {
            extracted = '55' + match[1] + match[2];
          } else {
            extracted = '55' + match[1];
          }
          
          console.log(`${logPrefix} ‚úÖ N√∫mero corrigido: ${phoneNumber} ‚Üí ${extracted}`);
          return `${extracted}@s.whatsapp.net`;
        }
      }
      
      // √öltima tentativa: pegar √∫ltimos 11 d√≠gitos
      if (phoneNumber.length > 11) {
        const last11 = phoneNumber.slice(-11);
        const corrected = '55' + last11;
        console.log(`${logPrefix} ‚ö†Ô∏è Usando √∫ltimos 11 d√≠gitos: ${phoneNumber} ‚Üí ${corrected}`);
        return `${corrected}@s.whatsapp.net`;
      }
    }
  }
  
  // Caso 3: JID est√° correto, retornar como est√°
  return remoteJid;
}

// SUBSTITUIR NO connection-manager.js:
// Localizar a se√ß√£o que trata @lid (por volta da linha 271)
// e substituir todo o bloco de tratamento @lid por:

/*
// üîß CORRE√á√ÉO MELHORADA: Processar n√∫meros corrompidos (@lid e outros)
const cleanedJid = extractPhoneFromCorruptedJid(remoteJid, logPrefix);
if (cleanedJid !== remoteJid) {
  console.log(`${logPrefix} üîÑ JID corrigido: ${remoteJid} ‚Üí ${cleanedJid}`);
  remoteJid = cleanedJid;
}

// IMPORTANTE: Remover o filtro que ignora @lid (linha 309-311)
// Mudar de:
// if (remoteJid.includes('@g.us') || remoteJid.includes('@broadcast') ||
//     remoteJid.includes('@newsletter') || remoteJid.includes('@lid')) {

// Para:
if (remoteJid.includes('@g.us') || remoteJid.includes('@broadcast') ||
    remoteJid.includes('@newsletter')) {
  console.log(`${logPrefix} üö´ Mensagem de grupo/broadcast/newsletter ignorada: ${remoteJid}`);
  return;
}
*/

// EXEMPLO DE USO DA CORRE√á√ÉO:
// Input: "221092702589128@lid" ou "221092702589128@s.whatsapp.net"  
// Output: "551092702589128@s.whatsapp.net" (n√∫mero brasileiro correto)

module.exports = { extractPhoneFromCorruptedJid };