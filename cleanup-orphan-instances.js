// üßπ LIMPEZA AUTOM√ÅTICA DE INST√ÇNCIAS √ìRF√ÉS
// Este script remove inst√¢ncias que n√£o deveriam existir na VPS

const axios = require('axios');
const fs = require('fs');
const path = require('path');

class InstanceCleanup {
  constructor() {
    this.vpsUrl = 'http://localhost:3001';
    this.supabaseUrl = 'https://rhjgagzstjzynvrakdyj.supabase.co';
    this.supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InJoamdhZ3pzdGp6eW52cmFrZHlqIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1MDUxMzEwMCwiZXhwIjoyMDY2MDg5MTAwfQ.48XYhDq4XdVTqNhIHdskd6iMcJem38aHzk6U1psfRRM';
    this.authDir = '/root/whatsapp-server/auth_info';
  }

  // 1. BUSCAR INST√ÇNCIAS DO BANCO DE DADOS
  async getDatabaseInstances() {
    try {
      console.log('üìä Buscando inst√¢ncias v√°lidas no banco de dados...');
      
      const response = await axios.get(
        `${this.supabaseUrl}/rest/v1/whatsapp_instances?select=id,instance_name,vps_instance_id,phone,connection_status`,
        {
          headers: {
            'Authorization': `Bearer ${this.supabaseKey}`,
            'apikey': this.supabaseKey,
            'Content-Type': 'application/json'
          }
        }
      );

      const instances = response.data;
      console.log(`‚úÖ Encontradas ${instances.length} inst√¢ncias no banco`);
      
      instances.forEach(inst => {
        console.log(`   ‚Ä¢ ${inst.vps_instance_id} (${inst.connection_status}) - Telefone: ${inst.phone || 'N/A'}`);
      });

      return instances.map(inst => inst.vps_instance_id).filter(Boolean);

    } catch (error) {
      console.error('‚ùå Erro ao buscar inst√¢ncias do banco:', error.message);
      return [];
    }
  }

  // 2. BUSCAR INST√ÇNCIAS DA VPS
  async getVPSInstances() {
    try {
      console.log('üñ•Ô∏è Buscando inst√¢ncias da VPS...');
      
      const response = await axios.get(`${this.vpsUrl}/status`);
      const instances = response.data.instances;
      
      console.log(`‚úÖ Encontradas ${instances.length} inst√¢ncias na VPS`);
      
      instances.forEach(inst => {
        console.log(`   ‚Ä¢ ${inst.instanceId} (${inst.status}) - Conectada: ${inst.connected}`);
      });

      return instances;

    } catch (error) {
      console.error('‚ùå Erro ao buscar inst√¢ncias da VPS:', error.message);
      return [];
    }
  }

  // 3. VERIFICAR SE INST√ÇNCIA TEM AUTENTICA√á√ÉO V√ÅLIDA
  hasValidAuth(instanceId) {
    const authPath = path.join(this.authDir, instanceId);
    
    if (!fs.existsSync(authPath)) {
      return false;
    }

    // Verificar se tem arquivos de autentica√ß√£o essenciais
    const requiredFiles = ['creds.json'];
    const hasRequiredFiles = requiredFiles.every(file => 
      fs.existsSync(path.join(authPath, file))
    );

    if (!hasRequiredFiles) {
      return false;
    }

    // Verificar se o creds.json n√£o est√° vazio/corrompido
    try {
      const credsPath = path.join(authPath, 'creds.json');
      const credsContent = fs.readFileSync(credsPath, 'utf8');
      const creds = JSON.parse(credsContent);
      
      // Verificar se tem dados essenciais
      return creds && (creds.me || creds.platform || Object.keys(creds).length > 2);
      
    } catch (error) {
      console.log(`   ‚ö†Ô∏è Arquivo creds.json corrompido para ${instanceId}`);
      return false;
    }
  }

  // 4. ANALISAR E IDENTIFICAR √ìRF√ÉS
  async analyzeInstances() {
    console.log('üîç === AN√ÅLISE DE INST√ÇNCIAS √ìRF√ÉS ===');
    
    const [dbInstances, vpsInstances] = await Promise.all([
      this.getDatabaseInstances(),
      this.getVPSInstances()
    ]);

    const analysis = {
      database: dbInstances,
      vps: vpsInstances,
      orphans: [],
      invalidAuth: [],
      toKeep: [],
      toDelete: []
    };

    console.log('\nüîç Analisando cada inst√¢ncia da VPS...');
    
    for (const vpsInstance of vpsInstances) {
      const instanceId = vpsInstance.instanceId;
      const isInDatabase = dbInstances.includes(instanceId);
      const hasAuth = this.hasValidAuth(instanceId);
      const isConnected = vpsInstance.connected;

      console.log(`\nüìã Inst√¢ncia: ${instanceId}`);
      console.log(`   ‚Ä¢ No banco: ${isInDatabase ? '‚úÖ' : '‚ùå'}`);
      console.log(`   ‚Ä¢ Auth v√°lida: ${hasAuth ? '‚úÖ' : '‚ùå'}`);
      console.log(`   ‚Ä¢ Conectada: ${isConnected ? '‚úÖ' : '‚ùå'}`);
      console.log(`   ‚Ä¢ Status: ${vpsInstance.status}`);

      // CRIT√âRIOS PARA MANTER OU DELETAR
      if (isInDatabase && hasAuth && isConnected) {
        // MANTER: Est√° no banco, tem auth e est√° conectada
        analysis.toKeep.push({
          instanceId,
          reason: 'V√°lida: no banco + auth + conectada'
        });
        console.log(`   ‚úÖ MANTER: Inst√¢ncia v√°lida e funcionando`);
        
      } else if (isInDatabase && hasAuth && !isConnected) {
        // MANTER: Est√° no banco e tem auth (pode reconectar)
        analysis.toKeep.push({
          instanceId,
          reason: 'V√°lida: no banco + auth (pode reconectar)'
        });
        console.log(`   ‚ö†Ô∏è MANTER: Pode reconectar`);
        
      } else {
        // DELETAR: Qualquer outro caso
        let reason = [];
        if (!isInDatabase) reason.push('n√£o est√° no banco');
        if (!hasAuth) reason.push('sem auth v√°lida');
        if (!isConnected) reason.push('n√£o conectada');
        
        analysis.toDelete.push({
          instanceId,
          reason: `√ìrf√£: ${reason.join(' + ')}`
        });
        console.log(`   ‚ùå DELETAR: ${reason.join(' + ')}`);
        
        if (!isInDatabase) analysis.orphans.push(instanceId);
        if (!hasAuth) analysis.invalidAuth.push(instanceId);
      }
    }

    return analysis;
  }

  // 5. EXECUTAR LIMPEZA
  async executeCleanup(dryRun = true) {
    const analysis = await this.analyzeInstances();
    
    console.log('\nüßπ === RESUMO DA LIMPEZA ===');
    console.log(`‚úÖ Manter: ${analysis.toKeep.length} inst√¢ncias`);
    console.log(`‚ùå Deletar: ${analysis.toDelete.length} inst√¢ncias`);
    
    if (analysis.toKeep.length > 0) {
      console.log('\n‚úÖ INST√ÇNCIAS A MANTER:');
      analysis.toKeep.forEach(item => {
        console.log(`   ‚Ä¢ ${item.instanceId} - ${item.reason}`);
      });
    }
    
    if (analysis.toDelete.length > 0) {
      console.log('\n‚ùå INST√ÇNCIAS A DELETAR:');
      analysis.toDelete.forEach(item => {
        console.log(`   ‚Ä¢ ${item.instanceId} - ${item.reason}`);
      });
    }

    if (dryRun) {
      console.log('\nüîç MODO DRY RUN - Nenhuma a√ß√£o executada');
      console.log('Execute com deleteOrphans(false) para aplicar as mudan√ßas');
      return analysis;
    }

    // EXECUTAR DELE√á√ïES REAIS
    console.log('\nüóëÔ∏è Executando dele√ß√µes...');
    
    for (const item of analysis.toDelete) {
      try {
        console.log(`üóëÔ∏è Deletando ${item.instanceId}...`);
        
        // Deletar via API
        await axios.delete(`${this.vpsUrl}/instance/${item.instanceId}`);
        
        // Deletar diret√≥rio de auth
        const authPath = path.join(this.authDir, item.instanceId);
        if (fs.existsSync(authPath)) {
          fs.rmSync(authPath, { recursive: true, force: true });
          console.log(`   üìÅ Diret√≥rio auth removido: ${authPath}`);
        }
        
        console.log(`   ‚úÖ ${item.instanceId} deletada com sucesso`);
        
        // Delay entre dele√ß√µes
        await new Promise(resolve => setTimeout(resolve, 1000));
        
      } catch (error) {
        console.error(`   ‚ùå Erro ao deletar ${item.instanceId}:`, error.message);
      }
    }

    console.log('\nüéâ Limpeza conclu√≠da!');
    return analysis;
  }

  // 6. M√âTODO PRINCIPAL
  async deleteOrphans(dryRun = true) {
    console.log('üßπ === LIMPEZA AUTOM√ÅTICA DE INST√ÇNCIAS √ìRF√ÉS ===');
    console.log(`Modo: ${dryRun ? 'DRY RUN (apenas an√°lise)' : 'EXECU√á√ÉO REAL'}`);
    
    try {
      const result = await this.executeCleanup(dryRun);
      
      console.log('\nüìä ESTAT√çSTICAS FINAIS:');
      console.log(`   ‚Ä¢ Inst√¢ncias no banco: ${result.database.length}`);
      console.log(`   ‚Ä¢ Inst√¢ncias na VPS: ${result.vps.length}`);
      console.log(`   ‚Ä¢ √ìrf√£s (n√£o no banco): ${result.orphans.length}`);
      console.log(`   ‚Ä¢ Auth inv√°lida: ${result.invalidAuth.length}`);
      console.log(`   ‚Ä¢ Para manter: ${result.toKeep.length}`);
      console.log(`   ‚Ä¢ Para deletar: ${result.toDelete.length}`);
      
      return result;
      
    } catch (error) {
      console.error('‚ùå Erro na limpeza:', error.message);
      throw error;
    }
  }
}

// EXECUTAR SE CHAMADO DIRETAMENTE
if (require.main === module) {
  const cleanup = new InstanceCleanup();
  
  // Executar em modo DRY RUN primeiro
  cleanup.deleteOrphans(true)
    .then(() => {
      console.log('\n‚ö†Ô∏è Para executar a limpeza real, execute:');
      console.log('node cleanup-orphan-instances.js --execute');
    })
    .catch(console.error);
}

module.exports = InstanceCleanup; 