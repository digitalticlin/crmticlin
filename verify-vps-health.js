// ==========================================
// SCRIPT DE VERIFICA√á√ÉO DA SA√öDE DA VPS
// Execute na VPS: node verify-vps-health.js
// ==========================================

const fs = require('fs');
const http = require('http');

console.log('üîç Verificando sa√∫de da VPS...');

try {
  // 1. Verificar se arquivo existe e n√£o tem erros de sintaxe
  const serverPath = '/root/whatsapp-server/server.js';
  
  if (!fs.existsSync(serverPath)) {
    console.error('‚ùå Arquivo server.js n√£o encontrado!');
    process.exit(1);
  }

  console.log('‚úÖ Arquivo server.js encontrado');

  // 2. Verificar sintaxe b√°sica
  try {
    const content = fs.readFileSync(serverPath, 'utf8');
    
    // Verificar se tem endpoint /send
    if (!content.includes("app.post('/send'")) {
      console.error('‚ùå Endpoint /send n√£o encontrado!');
      process.exit(1);
    }
    console.log('‚úÖ Endpoint /send encontrado');

    // Verificar se tem suporte a m√≠dia
    if (content.includes('mediaType') && content.includes('mediaUrl')) {
      console.log('‚úÖ Suporte a m√≠dia detectado');
    } else {
      console.log('‚ö†Ô∏è  Suporte a m√≠dia N√ÉO detectado');
    }

    // Verificar se mant√©m funcionalidades originais
    if (content.includes('connectionManager') && content.includes('addSentMessageToCache')) {
      console.log('‚úÖ Funcionalidades originais mantidas');
    } else {
      console.log('‚ö†Ô∏è  Algumas funcionalidades originais podem ter sido perdidas');
    }

    console.log(`üìä Tamanho do arquivo: ${content.length} bytes`);

  } catch (syntaxError) {
    console.error('‚ùå Erro de sintaxe:', syntaxError.message);
    process.exit(1);
  }

  // 3. Verificar se servidor est√° rodando
  console.log('üåê Verificando se servidor est√° online...');
  
  const options = {
    hostname: 'localhost',
    port: 3001,
    path: '/health',
    method: 'GET',
    timeout: 5000
  };

  const req = http.request(options, (res) => {
    console.log(`‚úÖ Servidor respondendo: ${res.statusCode}`);
    process.exit(0);
  });

  req.on('error', (err) => {
    console.log('‚ö†Ô∏è  Servidor n√£o est√° respondendo (normal se acabou de reiniciar)');
    console.log('üîÑ Aguarde alguns segundos e verifique com: pm2 status');
    process.exit(0);
  });

  req.on('timeout', () => {
    console.log('‚ö†Ô∏è  Timeout ao conectar (normal se acabou de reiniciar)');
    req.destroy();
    process.exit(0);
  });

  req.end();

} catch (error) {
  console.error('‚ùå Erro durante verifica√ß√£o:', error.message);
  process.exit(1);
} 